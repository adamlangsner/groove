$.Model.extend("GS.Models.Base", {cache: {},getOneFromCache: function(c, a) {
        return this.addLibraryFavoriteFlags(this.cache[_.orEqual(a, "") + c])
    },addLibraryFavoriteFlags: function(c) {
        var a = this.shortName.toLowerCase() + "s";
        if (c && GS.user) {
            var b = c[c.Class.id];
            if (GS.user.favorites[a])
                c.isFavorite = _.defined(GS.user.favorites[a][b]) ? 1 : 0;
            if (a == "songs" && GS.user.library.songs)
                c.fromLibrary = _.defined(GS.user.library.songs[b]) ? 1 : 0
        }
        return c
    },getManyFromCache: function(c, a) {
        for (var b = [], g = 0, h = c.length; g < h; g++)
            b.push(this.getOneFromCache(c[g], 
            a));
        return b
    },wrap: function(c, a, b) {
        var g = this.id, h = c[g];
        a = _.orEqual(a, true);
        b = _.orEqual(b, "");
        if (h && a)
            if (h = this.getOneFromCache(h, b))
                return h;
        c = this.addLibraryFavoriteFlags(this._super(c));
        if (a && c[g]) {
            this.cache[b + c[g]] = c;
            c.cachePrefix = b
        }
        return c
    },wrapCollection: function(c, a, b, g, h, m) {
        var k, n, o = [], q, x;
        a = _.orEqual(a, null);
        b = _.orEqual(b, false);
        g = _.orEqual(g, false);
        h = _.orEqual(h, true);
        m = _.orEqual(m, "");
        for (k in c)
            if (c.hasOwnProperty(k)) {
                q = c[k];
                x = this.wrap(q, h, m).dupe();
                if (b)
                    for (n in q) {
                        if (q.hasOwnProperty(n))
                            x[n] = 
                            q[n]
                    }
                else if (a)
                    for (n in a)
                        if (a.hasOwnProperty(n))
                            if (n === "USE_INDEX")
                                x[a[n]] = parseInt(k, 10) + 1;
                            else
                                x[n] = _.orEqual(q[n], a[n]);
                if (!g || !$.isFunction(x.validate) || x.validate())
                    o.push(x)
            }
        o._use_call = true;
        return o
    },wrapCollectionInObject: function(c, a, b, g, h, m) {
        var k, n, o, q, x;
        k = {};
        a = _.orEqual(a, null);
        b = _.orEqual(b, false);
        g = _.orEqual(g, false);
        h = _.orEqual(h, true);
        m = _.orEqual(m, "");
        for (n in c)
            if (c.hasOwnProperty(n)) {
                q = c[n];
                (x = this.getOneFromCache(q[this.id], m)) || (x = this.wrap(q, h, m).dupe());
                if (b)
                    for (o in q) {
                        if (q.hasOwnProperty(o))
                            x[o] = 
                            q[o]
                    }
                else if (a)
                    for (o in a)
                        if (a.hasOwnProperty(o))
                            x[o] = _.orEqual(q[o], a[o]);
                if (!g || !$.isFunction(x.validate) || x.validate())
                    k[q[this.id]] = x
            }
        return k
    }}, {songs: {},albums: {},cachePrefix: "",dupe: function() {
        return new this.Class(this.attrs())
    },wrapSongCollection: function(c, a, b) {
        a = GS.Models.Song.wrapCollection(c.Songs || c.songs || c.result || c, a, b, true);
        for (b = 0; b < a.length; b++) {
            this.songs[a[b].SongID] = a[b];
            if (a[b].AlbumName && a[b].AlbumName.length) {
                if (this.albums[a[b].AlbumID]) {
                    if (this.albums[a[b].AlbumID].ArtistName != 
                    a[b].ArtistName)
                        this.albums[a[b].AlbumID].ArtistName = "Various Artists"
                } else {
                    album = GS.Models.Album.wrap({AlbumName: a[b].AlbumName,AlbumID: a[b].AlbumID,ArtistName: a[b].ArtistName,ArtistID: a[b].ArtistID,CoverArtFilename: a[b].CoverArtFilename,IsVerified: a[b].IsVerified}, true, "s_");
                    this.albums[a[b].AlbumID] = album
                }
                this.albums[a[b].AlbumID].songs[a[b].SongID] = a[b]
            }
        }
        if (c && c.hasMore)
            this.currentPage++;
        else
            this.songsLoaded = true;
        return a
    },playSongs: function(c) {
        var a = _.orEqual(c.index, -1), b = _.orEqual(c.playOnAdd, 
        false), g = _.orEqual(c.shuffle, false), h = _.orEqual(c.sort, false), m = _.orEqual(c.numericSort, false), k = new GS.Models.PlayContext((this.shortName || "").toLowerCase(), this);
        c.verified && _.isEmpty(this.songs) && this.getSongs(this.callback("playSongs", {index: a,playOnAdd: b,sort: "TrackNum",numericSort: true,verified: false}), null, false);
        a = [];
        var n = [];
        _.forEach(this.songs, function(o) {
            n.push(o)
        });
        if (g)
            n = n.shuffle();
        else if (h)
            n = n.sort(function(o, q) {
                if (o.hasOwnProperty(h) && q.hasOwnProperty(h)) {
                    var x = o[h], v = q[h];
                    if (m) {
                        x = 
                        parseFloat(x, 10);
                        if (isNaN(x))
                            x = 0;
                        v = parseFloat(v, 10);
                        if (isNaN(v))
                            v = 0;
                        return x - v
                    }
                    if (x > v)
                        return 1;
                    else if (x < v)
                        return -1;
                    return 0
                } else if (o.hasOwnProperty(h))
                    return 1;
                return 0
            });
        for (g = 0; g < n.length; g++)
            a.push(n[g].SongID);
        GS.player.addSongsToQueueAt(a, c.index, c.playOnAdd, k)
    },getClipboardAction: function(c, a) {
        if (!window.contextMenuClipboards)
            window.contextMenuClipboards = [];
        return this.callback(function() {
            if (ZeroClipboard && c) {
                var b = $("div[id^=jjmenu_main_sub]");
                $.each(c, function(g, h) {
                    var m = $(h.selector, b);
                    if (window.contextMenuClipboards[g])
                        window.contextMenuClipboards[g].reposition(m.get(0));
                    else {
                        window.contextMenuClipboards[g] = new ZeroClipboard.Client(m.get(0));
                        window.contextMenuClipboards[g].addEventListener("complete", function(k, n) {
                            console.log("copied: ", n);
                            $("div[id^=jjmenu]").remove();
                            var o = $("#grid").controller();
                            if (o) {
                                var q = GS.getGuts().extractSongItemInfo(o);
                                if (q) {
                                    var x = n.substr(7).split("/");
                                    q = GS.getGuts().extractSongItemInfo(o);
                                    if (x[1] == "album")
                                        GS.getGuts().onContextMenuClick("contextCopyAlbumURL", 
                                        a, false, q);
                                    else if (x[1] == "artist")
                                        GS.getGuts().onContextMenuClick("contextCopyArtistURL", a, false, q);
                                    else if (x[1] == "song" || x[1] == "s")
                                        GS.getGuts().onContextMenuClick("contextCopySongURL", a, false, q)
                                }
                            }
                        })
                    }
                    window.contextMenuClipboards[g].setText(h.text);
                    m.bind("remove", function() {
                        try {
                            $.each(window.contextMenuClipboards, function(n, o) {
                                o.hide()
                            })
                        } catch (k) {
                        }
                    })
                })
            }
        })
    }});
(function(c) {
    GS.Models.Base.extend("GS.Models.Song", {id: "SongID",cache: {},artPath: "http://images.grooveshark.com/static/albums/",defaults: {AlbumID: null,AlbumName: "",ArtistID: null,ArtistName: "",CoverArtFilename: "",EstimateDuration: 0,Flags: 0,IsLowBitrateAvailable: 0,Popularity: "0",SongID: null,SongName: "",TrackNum: "0",Year: "0",isDeleted: false,fromLibrary: 0,isFavorite: 0,IsVerified: 0,TSAdded: "",TSFavorited: "",_token: null,tokenFailed: false},songsLoaded: false,songsUnverifiedLoaded: false,getSong: function(a, 
        b, g, h) {
            var m = this.getOneFromCache(a);
            h = _.orEqual(h, {});
            if (m)
                c.isFunction(b) && b(m);
            else
                GS.service.getQueueSongListFromSongIDs([a], this.callback(["wrapSingleSongFromIDs", b]), g, h)
        },getOneSynchronous: function(a) {
            var b = this.getOneFromCache(a);
            if (b)
                return b;
            else {
                GS.service.getQueueSongListFromSongIDs([a], this.callback(this.wrapSingleSongFromIDs), null, {async: false});
                return this.getOneFromCache(a)
            }
        },getSongFromToken: function(a, b, g) {
            var h = this.getOneFromCache(a);
            h ? b(h) : GS.service.getSongFromToken(a, this.callback("wrapSongFromToken", 
            a, b), g)
        },getVerifiedDivider: function() {
            var a = this.wrap({SongID: -1,SongName: "",ArtistName: "",ArtistID: 0,AlbumName: "",AlbumID: 0,CoverArtFilename: ""}, false);
            a.IsVerified = 0.5;
            return a
        },wrap: function(a, b, g) {
            a = _.orEqual(a, {});
            var h = _.orEqualEx(a.TrackNum, a.trackNum, "0").toString();
            a = this._super({AlbumID: _.orEqualEx(a.AlbumID, a.albumID, 0),AlbumName: _.cleanText(_.orEqual(a.AlbumName, a.albumName)) || "Unknown Album",ArtistID: _.orEqualEx(a.ArtistID, a.artistID, 0),ArtistName: _.cleanText(_.orEqual(a.ArtistName, 
                a.artistName)) || "Unknown Artist",CoverArtFilename: _.orEqualEx(a.CoverArtFilename, a.artFilename, ""),EstimateDuration: _.orEqualEx(a.EstimateDuration, a.estimateDuration, 0),Flags: _.orEqualEx(a.Flags, a.flags, 0),IsLowBitrateAvailable: _.orEqualEx(a.IsLowBitrateAvailable, 0),SongID: _.orEqualEx(a.SongID, a.songID, 0),SongName: _.cleanText(_.orEqualEx(a.SongName, a.songName, a.Name)) || "Unknown Title",TrackNum: h,Year: _.cleanText(_.orEqualEx(a.Year, a.year, "0")),Popularity: _.orEqualEx(a.Popularity, a.popularity, 0),IsVerified: _.orEqual(parseFloat(a.IsVerified, 
                10), 0),_token: _.orEqualEx(a._token, null)}, b, g);
            if (a.TrackNum !== h && h !== "0")
                a.TrackNum = h;
            if (a.CoverArtFilename == "default.png")
                a.CoverArtFilename = null;
            return a
        },wrapQueue: function(a) {
            return this.wrapCollection(a, {Flags: 0,EstimateDuration: 0,autoplayVote: 0,parentQueueID: 0,queueSongID: 0,source: "",index: -1,context: null,sponsoredAutoplayID: 0}, false, true, true)
        },wrapSingleSongFromIDs: function(a) {
            a = this.wrapCollection(a);
            if (a.length)
                return a[0]
        },wrapSongFromToken: function(a, b, g) {
            if (c.isArray(g))
                g = {};
            g = this.wrap(g);
            g.validate() && g.checkToken({Token: a});
            c.isFunction(b) && b(g);
            return g
        },archive: function(a) {
            return {A: a.AlbumID,B: a.AlbumName,C: a.ArtistID,D: a.ArtistName,E: a.CoverArtFilename,F: a.EstimateDuration,G: a.Flags,H: a.Popularity,I: a.SongID,J: a.SongName,K: a.TSAdded,L: a.TrackNum,M: a.Year,N: a.isFavorite}
        },unarchive: function(a) {
            return {AlbumID: a.A,AlbumName: a.B,ArtistID: a.C,ArtistName: a.D,CoverArtFilename: a.E,EstimateDuration: a.F,Flags: a.G,Popularity: a.H,SongID: a.I,SongName: a.J,TSAdded: a.K,TrackNum: isNaN(a.L) ? "0" : 
                a.L,Year: isNaN(a.M) ? "0" : a.M,isFavorite: a.N}
        },itemRenderer: function(a) {
            var b = "" + ('<a class="name ellipsis" href="' + a.toUrl() + '">' + a.SongName + "</a>");
            ['<a href="', a.toUrl(), '">', a.SongName, "</a>"].join("");
            var g = ['<a href="', a.toArtistUrl(), '">', a.ArtistName, "</a>"].join("");
            g = c("<span></span>").localeDataString("BY_ARTIST", {artist: g});
            var h = ['<img width="70" height="70" src="', a.getImageURL(70), '"/>'].join("");
            return ['<a href="', a.toUrl(), '" class="albumImage">', h, '<span class="playBtn" data-albumid="', 
                a.AlbumID, '"></span></a><div class="meta">', b, '<span class="by">', g.render(), "</span></div>"].join("")
        },matchFilter: function(a, b) {
            b = _.orEqual(b, false);
            var g;
            if (b) {
                g = RegExp("^" + a, "i");
                return function(h) {
                    h.SongName.match(g)
                }
            } else {
                g = RegExp(a, "gi");
                return function(h) {
                    return h.SongName.match(g) || h.ArtistName.match(g) || h.AlbumName.match(g)
                }
            }
        }}, {validate: function() {
            if (this.SongID > 0 && this.ArtistID > 0 && this.AlbumID > 0)
                return true;
            return false
        },init: function(a) {
            if (a) {
                this._super(a);
                this.SongName = _.orEqual(a.SongName, 
                a.Name) || "Unknown Title";
                this.AlbumName = a.AlbumName || "Unknown Album";
                this.ArtistName = a.ArtistName || "Unknown Artist";
                this.searchText = [this.SongName, this.ArtistName, this.AlbumName].join(" ").toLowerCase();
                this.fanbase = false;
                this.songs = {};
                delete this.Name
            }
        },toUrl: function(a) {
            if (this._token)
                return _.cleanUrl(this.SongName, this.SongID, "s", this._token, a);
            else if (this.tokenFailed)
                return _.generate404();
            else {
                this.getToken();
                return this._token ? _.cleanUrl(this.SongName, this.SongID, "s", this._token, a) : _.generate404()
            }
        },
        toArtistUrl: function(a) {
            return _.cleanUrl(this.ArtistName, this.ArtistID, "artist", null, a)
        },toAlbumUrl: function(a) {
            return _.cleanUrl(this.AlbumName, this.AlbumID, "album", null, a)
        },getToken: function() {
            if (this._token)
                return this._token;
            else if (this.tokenFailed)
                return null;
            else {
                GS.service.getTokenForSong(this.SongID, this.callback(this.checkToken), this.callback(this.tokenCallFail), {async: false});
                return this._token
            }
        },checkToken: function(a) {
            if (a.Token) {
                this._token = a.Token;
                GS.Models.Song.cache[this._token] = 
                this;
                GS.Models.Song.getOneFromCache(this.SongID)._token = this._token
            } else
                this.tokenFailed = true
        },tokenCallFail: function() {
            this._token = null
        },getImageURL: function(a) {
            a = _.orEqual(a, 70);
            var b = GS.Models.Song.artPath + a + "_album.png";
            if (this.CoverArtFilename && this.CoverArtFilename.indexOf("default") == -1)
                b = GS.Models.Song.artPath + a + "_" + this.CoverArtFilename;
            return b
        },getDetailsForFeeds: function() {
            return {songID: this.SongID,songName: this.SongName,albumID: this.AlbumID,albumName: this.AlbumName,artistID: this.ArtistID,
                artistName: this.ArtistName,artFilename: this.CoverArtFilename,track: this.TrackNum,isDeleted: this.isDeleted}
        },getRelatedSongs: function(a, b, g) {
            g = _.orEqual(g, true);
            this.album ? this.album.getSongs(a, b, g) : GS.Models.Album.getAlbum(this.AlbumID, this.callback(function(h) {
                this.album = h;
                h.getSongs(a, b, g)
            }), b, false)
        },getAffiliateDownloadURLs: function(a) {
            var b;
            if (_.isEmpty(this.affiliateDownloadURLs))
                b = this;
            else
                return this.affiliateDownloadURLs;
            var g = [];
            GS.service.getAffiliateDownloadURLs(this.SongName, this.ArtistName, 
            function(h) {
                c.each(h, function(m, k) {
                    if (m === "amazon")
                        m = "Amazon";
                    g.push({name: m,url: k.url})
                });
                b.affiliateDownloadURLs = g;
                a(b.affiliateDownloadURLs)
            }, function() {
                a({})
            })
        },getContextMenu: function(a) {
            a = _.orEqual(a, {});
            var b;
            if (a)
                b = _.orEqual(a.menuType, "");
            var g = GS.getGuts().extractSongItemInfo(a.gridController), h = [], m = {menuType: b,multiClick: false,gridController: a.gridController};
            GS.user.library.songs[this.SongID] ? h.push({title: c.localize.getString("CONTEXT_REMOVE_FROM_LIBRARY"),customClass: "last jj_menu_item_hasIcon jj_menu_item_remove_music",
                action: {type: "fn",callback: this.callback(function() {
                        GS.user.removeFromLibrary(this.SongID)
                    }),log: this.callback(function() {
                        GS.getGuts().onContextMenuClick("contextRemoveFromLibrary", b, false, g)
                    })}}) : h.push({title: c.localize.getString("CONTEXT_ADD_TO_LIBRARY"),customClass: "last jj_menu_item_hasIcon jj_menu_item_music",action: {type: "fn",callback: this.callback(function() {
                        GS.user.addToLibrary(this.SongID)
                    }),log: this.callback(function() {
                        GS.getGuts().onContextMenuClick("contextAddToLibrary", b, false, g)
                    })}});
            GS.user.favorites.songs[this.SongID] ? h.push({title: c.localize.getString("CONTEXT_REMOVE_FROM_FAVORITES"),customClass: "last jj_menu_item_hasIcon jj_menu_item_remove_favorite",action: {type: "fn",callback: this.callback(function() {
                        GS.user.removeFromSongFavorites(this.SongID)
                    }),log: this.callback(function() {
                        GS.getGuts().onContextMenuClick("contextRemoveFromFavorites", b, false, g)
                    })}}) : h.push({title: c.localize.getString("CONTEXT_ADD_TO_FAVORITES"),customClass: "last jj_menu_item_hasIcon jj_menu_item_favorites",
                action: {type: "fn",callback: this.callback(function() {
                        GS.user.addToSongFavorites(this.SongID)
                    }),log: this.callback(function() {
                        GS.getGuts().onContextMenuClick("contextAddToFavorites", b, false, g)
                    })}});
            GS.user.getIsShortcut("song", this.SongID) ? h.push({title: c.localize.getString("CONTEXT_REMOVE_FROM_PINBOARD"),customClass: "last jj_menu_item_hasIcon jj_menu_item_remove_music",action: {type: "fn",callback: this.callback(function() {
                        GS.user.removeFromShortcuts("song", this.SongID)
                    }),log: this.callback(function() {
                        GS.getGuts().onContextMenuClick("contextRemoveFromPinboard", 
                        b, false, g)
                    })}}) : h.push({title: c.localize.getString("CONTEXT_ADD_TO_PINBOARD"),customClass: "last jj_menu_item_hasIcon jj_menu_item_pinboard",action: {type: "fn",callback: this.callback(function() {
                        GS.user.addToShortcuts("song", this.SongID, this.SongName)
                    }),log: this.callback(function() {
                        GS.getGuts().onContextMenuClick("contextAddToPinboard", b, false, g)
                    })}});
            h.push({customClass: "separator"});
            if (_.isEmpty(GS.user.playlists))
                h.push({title: c.localize.getString("CONTEXT_NEW_PLAYLIST"),customClass: "jj_menu_item_hasIcon jj_menu_item_new_playlist",
                    action: {type: "fn",callback: this.callback(function() {
                            GS.getLightbox().open("newPlaylist", this.SongID)
                        })}});
            else {
                h.push({title: c.localize.getString("CONTEXT_ADD_TO_PLAYLIST"),type: "sub",customClass: "jj_menu_item_hasIcon jj_menu_item_playlists",src: GS.Models.Playlist.getPlaylistsMenu(this.SongID, this.callback(function(k) {
                        k.addSongs([this.SongID], -1, true)
                    }), null, null, m)});
                !a.isQueue && GS.page.activePage && GS.page.activePage.playlist && GS.page.activePage.playlist.songs && h.push({title: c.localize.getString("CONTEXT_REMOVE_FROM_PLAYLIST"),
                    customClass: "jj_menu_item_hasIcon jj_menu_item_remove_music",action: {type: "fn",callback: this.callback(function() {
                            var k = a.gridController, n = [], o = GS.page.activePage.playlist;
                            if (k && k.selectedRowIDs.length > 0)
                                for (var q = 0; q < k.selectedRowIDs.length; q++) {
                                    var x = o.gridKeyLookup[k.selectedRowIDs[q]];
                                    x && n.push(o.songs.indexOf(x))
                                }
                            n.length && o.removeSongs(n)
                        })}})
            }
            h.push({customClass: "separator"});
            h = h.concat([{title: c.localize.getString("CONTEXT_SHARE_SONG"),customClass: "jj_menu_item_hasIcon jj_menu_item_share",
                    action: {type: "fn",callback: this.callback(function() {
                            GS.getLightbox().open("share", {type: "song",id: this.SongID});
                            GS.getGuts().onContextMenuClick("contextShareSong", b, false, g)
                        })}}, {title: c.localize.getString("COPY_URL"),type: "sub",action: {type: "fn",callback: this.callback(function() {
                            this.getClipboardAction([{text: "http://grooveshark.com/" + this.toUrl().replace("#!/", ""),selector: "div.songUrl"}, {text: "http://grooveshark.com/" + _.cleanUrl(this.AlbumName, this.AlbumID, "album").replace("#!/", ""),selector: "div.albumUrl"}, 
                                {text: "http://grooveshark.com/" + _.cleanUrl(this.ArtistName, this.ArtistID, "artist").replace("#!/", ""),selector: "div.artistUrl"}], b)();
                            c("div[name$=Url]", elem).show()
                        })},customClass: "last copyUrl jj_menu_item_hasIcon jj_menu_item_copy",src: [{title: c.localize.getString("SONG_URL"),customClass: "songUrl jj_menu_item_hasIcon jj_menu_item_copy"}, {title: c.localize.getString("ALBUM_URL"),customClass: "albumUrl jj_menu_item_hasIcon jj_menu_item_copy"}, {title: c.localize.getString("ARTIST_URL"),customClass: " artistUrl jj_menu_item_hasIcon jj_menu_item_copy"}]}, 
                {customClass: "separator"}, {title: c.localize.getString("CONTEXT_BUY_SONG"),customClass: "last jj_menu_item_hasIcon jj_menu_item_download",action: {type: "fn",callback: this.callback(function() {
                            GS.getLightbox().open("buySong", this.SongID)
                        }),log: this.callback(function() {
                            GS.getGuts().onContextMenuClick("contextBuySong", b, false, g)
                        })}}]);
            a.isQueue = _.orEqual(a.isQueue, false);
            if (a.isQueue) {
                h.push({customClass: "separator"}, {title: c.localize.getString("CONTEXT_FLAG_SONG"),customClass: "last jj_menu_item_hasIcon jj_menu_item_flag",
                    type: "sub",src: [{title: c.localize.getString("CONTEXT_FLAG_BAD_SONG"),customClass: "last jj_menu_item_hasIcon jj_menu_item_flag",action: {type: "fn",callback: function() {
                                    a.flagSongCallback(1)
                                }}}, {title: c.localize.getString("CONTEXT_FLAG_BAD_METADATA"),customClass: "last jj_menu_item_hasIcon jj_menu_item_flag",action: {type: "fn",callback: function() {
                                    a.flagSongCallback(4)
                                }}}]});
                (m = GS.player.getCurrentQueue()) && m.autoplayEnabled && h.push({customClass: "separator"}, {title: c.localize.getString("QUEUE_ITEM_SMILE"),
                    customClass: "last jj_menu_item_hasIcon jj_menu_item_smile",action: {type: "fn",callback: function() {
                            a.voteSongCallback(1)
                        }}}, {title: c.localize.getString("QUEUE_ITEM_FROWN"),customClass: "last jj_menu_item_hasIcon jj_menu_item_frown",action: {type: "fn",callback: function() {
                            a.voteSongCallback(-1)
                        }}})
            }
            return h
        },getTitle: function() {
            return ['"', this.SongName, '" by ', this.ArtistName, ' on "', this.AlbumName, '"'].join("")
        },getVideos: function(a, b, g) {
            g = _.orEqual(g, 5);
            GS.getYoutube().search("", g, this.callback(function(h) {
                var m = 
                [];
                if (h && h[0] && h[0].VideoID) {
                    for (var k = 0; k < h.length; k++) {
                        h[k].title = this.ArtistName + " - " + this.SongName;
                        m.push(h[k])
                    }
                    a(m)
                } else {
                    console.warn("bad youtube search items", h);
                    b([])
                }
            }), b, this)
        },toProxyLabel: function() {
            return _.getString("SELECTION_SONG_SINGLE", {SongName: _.cleanText(this.SongName),ArtistName: _.cleanText(this.ArtistName)})
        },toString: function(a) {
            return (a = _.orEqual(a, false)) ? ["Song. sid:", this.SongID, ", name:", this.SongName, ", aid:", this.ArtistID, ", arname: ", this.ArtistName, ", alid: ", this.AlbumID, 
                ", alname:", this.AlbumName, ", track: ", this.TrackNum, ", verified: ", this.IsVerified].join("") : _.getString("SELECTION_SONG_SINGLE", {SongName: _.cleanText(this.SongName),ArtistName: _.cleanText(this.ArtistName)})
        }})
})(jQuery);
(function(c) {
    GS.Models.Base.extend("GS.Models.Album", {id: "AlbumID",cache: {},artPath: "http://images.grooveshark.com/static/albums/",smallAlbum: 5,defaults: {AlbumName: "",AlbumID: null,ArtistName: "",ArtistID: null,CoverArtFilename: "",Year: "",IsVerified: 0,PathName: false,PathNameEmpty: false,isFavorite: 0,songsLoaded: false,songsUnverifiedLoaded: false,fanbase: null},getAlbum: function(a, b, g) {
            var h = this.getOneFromCache(a);
            if (h)
                c.isFunction(b) && b(h);
            else
                GS.service.getAlbumByID(a, this.callback(["wrap", b]), g)
        },getOneSynchronous: function(a) {
            var b = 
            this.getOneFromCache(a);
            if (b)
                return b;
            else {
                GS.service.getAlbumByID(a, this.callback(this.wrap), null, {async: false});
                return this.getOneFromCache(a)
            }
        },getFilterAll: function(a) {
            return this.wrap({AlbumID: -1,AlbumName: c.localize.getString("ALL_ALBUMS"),ArtistName: a || "",ArtistID: -1,IsVerified: 2,isFilterAll: 1}, false)
        },defaultSongSort: function(a, b) {
            var g = parseFloat(_.orEqual(a.TrackNum, 0), 10), h = parseFloat(_.orEqual(b.TrackNum, 0), 10);
            if (isNaN(g))
                g = 0;
            if (isNaN(h))
                h = 0;
            if (g !== 0 && h === 0)
                return -1;
            if (h !== 0 && g === 0)
                return 1;
            return g - h
        },prettySort: function(a, b) {
            return a.IsVerified && a.CoverArtFilename || a.IsVerified && !b.CoverArtFilename ? -1 : b.IsVerified && b.CoverArtFilename ? 1 : 0
        },itemRenderer: function(a) {
            var b = "" + ('<a class="name ellipsis" href="' + a.toUrl() + '">' + a.AlbumName + "</a>"), g = ['<a href="', a.toArtistUrl(), '">', a.ArtistName, "</a>"].join("");
            g = c("<span></span>").localeDataString("BY_ARTIST", {artist: g});
            var h = ['<img width="70" height="70" src="', a.getImageURL(70), '"/>'].join(""), m = _.count(a.songs);
            m = m > 0 ? '<p class="numSongs">' + 
            _.printf("NUM_SONGS", {numSongs: m}) + "</p>" : "";
            return ['<a href="', a.toUrl(), '" class="albumImage insetBorder height70">', h, '<span class="playBtn" data-albumid="', a.AlbumID, '"></span></a><div class="meta">', b, '<span class="by">', g.render(), "</span>", m, "</div>"].join("")
        },exploreItemRenderer: function(a) {
            var b = "" + ('<a class="name ellipsis" href="' + a.toUrl() + '">' + a.AlbumName + "</a>"), g = ['<a href="', a.toArtistUrl(), '">', a.ArtistName, "</a>"].join("");
            g = c("<span></span>").localeDataString("BY_ARTIST", {artist: g});
            var h = ['<img height="120" src="', a.getImageURL(120), '"/>'].join(""), m = a.tags ? '<div class="tags"><span class="icon"></span><span class="label ellipsis">' + a.tags + "</span></div>" : "";
            return ['<div class="tooltip" data-tip-type="album" data-albumid="', a.AlbumID, '" data-cachePrefix="', a.cachePrefix, '"><a href="', a.toUrl(), '" class="albumImage insetBorder height120" >', h, '<span class="playBtn" data-albumid="', a.AlbumID, '"></span></a><div class="meta">', b, '<span class="by ellipsis">', g.render(), "</span>", 
                m, "</div></div>"].join("")
        },wrap: function(a, b, g) {
            a = _.orEqual(a, {});
            a.ArtistName = _.cleanText(a.ArtistName) || "Unknown Artist";
            a.AlbumName = _.cleanText(_.orEqual(a.AlbumName, a.Name)) || "Unknown Album";
            return this._super(a, b, g)
        },matchFilter: function(a) {
            var b = RegExp(a, "gi");
            return function(g) {
                return g.ArtistName.match(b) || g.AlbumName.match(b)
            }
        },filterVerified: function(a) {
            var b = {};
            _.forEach(a, function(g) {
                if (g.IsVerified == 1)
                    b[g.SongID] = g
            });
            return b
        }}, {getSongs: function(a, b, g) {
            var h = arguments[arguments.length - 
            1] === g ? {} : arguments[arguments.length - 1];
            g = _.orEqual(g, true);
            if (this.songsLoaded) {
                h = this.songs;
                if (g)
                    h = GS.Models.Album.filterVerified(h);
                h = this._wrapManySongs(h);
                c.isFunction(a) && a(h)
            } else
                GS.service.albumGetAllSongs(this.AlbumID, this.callback("_loadAndProcessSongs", g, a), b, h)
        },_loadAndProcessSongs: function(a, b, g) {
            this.hasVerified = false;
            var h, m, k, n = {}, o = {}, q = [], x = {}, v = {};
            for (h in g)
                if (g.hasOwnProperty(h)) {
                    m = g[h];
                    m = GS.Models.Song.wrap(m);
                    m.AlbumName = this.AlbumName;
                    m.AlbumID = this.AlbumID;
                    m.CoverArtFilename = 
                    this.CoverArtFilename;
                    x[m.SongID] = m.IsVerified === 1;
                    m.IsVerified = 0;
                    n[m.SongID] = m;
                    k = parseInt(m.TrackNum, 10);
                    k = isNaN(k) ? 0 : k;
                    if (q[k])
                        q[k].push(m);
                    else
                        q[k] = [m];
                    k = this._reduceTitle(m);
                    if (o.hasOwnProperty(k))
                        o[k].push(m);
                    else
                        o[k] = [m]
                }
            for (h = 1; h < q.length; h++) {
                g = q[h];
                if (m = this._pickBestSong(g, x, v, false)) {
                    k = this._reduceTitle(m);
                    if (v[k]) {
                        o = v[k];
                        if (x[o.SongID] || !x[m.SongID]) {
                            if (m = this._pickBestSong(g, x, v, true)) {
                                m.IsVerified = 1;
                                k = this._reduceTitle(m);
                                v[k] = m
                            }
                        } else {
                            o.IsVerified = 0;
                            m.IsVerified = 1;
                            v[k] = m;
                            if (m = this._pickBestSong(q[o.TrackNum], 
                            x, v, true)) {
                                m.IsVerified = 1;
                                v[this._reduceTitle(m.SongName)] = m
                            }
                        }
                    } else {
                        this.hasVerified = true;
                        m.IsVerified = 1;
                        v[k] = m
                    }
                }
            }
            this.songs = n;
            this.songsLoaded = true;
            if (c.isFunction(b))
                a ? b(this._wrapManySongs(GS.Models.Album.filterVerified(n))) : b(this._wrapManySongs(n));
            return n
        },_cleanTitleForReduce: /\s|\-|\:|\(|\)|\[|\]/g,_reduceTitle: function(a) {
            var b = a.SongName;
            b = b.toLowerCase();
            a = b.replace(a.ArtistName.toLowerCase(), "").replace(this._cleanTitleForReduce, "");
            return b = a.length ? a : b.replace(this._cleanTitleForReduce, 
            "")
        },_isGrossTitle: /\(|\)|\[|\]|live|feat|\sft|remix|demo/i,_pickBestSong: function(a, b, g, h) {
            var m;
            if (!c.isArray(a) || a.length === 0)
                return false;
            if (a.length === 1) {
                b = a[0];
                m = this._reduceTitle(b);
                if (h && g[m])
                    return false;
                return b
            }
            var k = this;
            a = a.sort(function(o, q) {
                if (o.IsVerified !== q.IsVerified)
                    return q.IsVerified - o.IsVerified;
                var x = k._isGrossTitle.test(o.SongName), v = k._isGrossTitle.test(q.SongName);
                if (x === v)
                    return 0;
                return x && !v ? 1 : -1
            });
            for (var n = 0; n < a.length; n++) {
                b = a[n];
                m = this._reduceTitle(b);
                if (!g[m])
                    return b
            }
            return h ? 
            false : a[0]
        },_wrapManySongs: function(a) {
            return this.wrapSongCollection(a, {IsVerified: 0,TrackNum: 0,AlbumName: this.AlbumName,AlbumID: this.AlbumID,CoverArtFilename: this.CoverArtFilename,Popularity: "0"})
        },play: function(a, b, g, h) {
            _.orEqual(h, true);
            this.getSongs(this.callback("playSongs", {index: a,playOnAdd: b,sort: "TrackNum",numericSort: true,verified: h,shuffle: g}))
        },validate: function() {
            if (this.AlbumID > 0 && this.ArtistID > 0)
                return true;
            return false
        },init: function(a) {
            this._super(a);
            this.AlbumName = _.cleanText(_.orEqual(a.AlbumName, 
            a.Name) || "Unknown Album");
            if (!this.isFilterAll)
                this.ArtistName = _.cleanText(a.ArtistName || "Unknown Artist");
            this.fanbase = false;
            this.songs = {};
            this.songsUnverifiedLoaded = this.songsLoaded = false;
            this.searchText = [this.AlbumName, this.ArtistName].join(" ").toLowerCase()
        },getDetailsForFeeds: function() {
            return {albumID: this.AlbumID,albumName: this.AlbumName,artistID: this.ArtistID,artistName: this.ArtistName,artFilename: this.ArtFilename}
        },toUrl: function(a) {
            return this.PathName ? _.makeUrlFromPathName(this.PathName, 
            a) : _.cleanUrl(this.AlbumName, this.AlbumID, "album", null, a)
        },toArtistUrl: function(a) {
            return _.cleanUrl(this.ArtistName, this.ArtistID, "artist", null, a)
        },_onPathNameSuccess: function(a, b) {
            if (b.name)
                this.PathName = b.name;
            else {
                this.PathName = "";
                this.PathNameEmpty = true
            }
            c.isFunction(a) && a(this.PathName)
        },_onPathNameFailed: function(a) {
            this.PathName = "";
            this.PathNameEmpty = true;
            c.isFunction(a) && a(this.PathName)
        },getImageURL: function(a) {
            a = _.orEqual(a, 70);
            var b = GS.Models.Album.artPath + a + "_album.png";
            if (this.CoverArtFilename && 
            this.CoverArtFilename.indexOf("default") == -1)
                return GS.Models.Album.artPath + a + "_" + this.CoverArtFilename;
            return b
        },getTitle: function() {
            return ['"', this.AlbumName, '" by ', this.ArtistName].join("")
        },getContextMenu: function() {
            new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_ALBUM, this);
            var a = [{title: c.localize.getString("CONTEXT_PLAY_ALBUM"),action: {type: "fn",callback: this.callback(function() {
                            this.play(GS.player.INDEX_DEFAULT, true)
                        })},customClass: "jj_menu_item_hasIcon jj_menu_item_play"}, {title: c.localize.getString("CONTEXT_PLAY_ALBUM_NEXT"),
                    action: {type: "fn",callback: this.callback(function() {
                            this.play(GS.player.INDEX_NEXT, false)
                        })},customClass: "jj_menu_item_hasIcon jj_menu_item_play_next"}, {title: c.localize.getString("CONTEXT_PLAY_ALBUM_LAST"),action: {type: "fn",callback: this.callback(function() {
                            this.play(GS.player.INDEX_LAST, false)
                        })},customClass: "jj_menu_item_hasIcon jj_menu_item_play_last"}, {customClass: "separator"}, {title: c.localize.getString("CONTEXT_REPLACE_ALL_SONGS"),action: {type: "fn",callback: this.callback(function() {
                            this.play(GS.player.INDEX_REPLACE, 
                            GS.player.isPlaying)
                        })},customClass: "jj_menu_item_hasIcon jj_menu_item_replace_playlist"}, {customClass: "separator"}];
            a = a.concat([{title: c.localize.getString("SHARE_ALBUM"),customClass: "jj_menu_item_hasIcon jj_menu_item_share",action: {type: "fn",callback: this.callback(function() {
                            GS.getLightbox().open("share", {type: "album",id: this.AlbumID})
                        })}}, {customClass: "separator"}]);
            GS.user.getIsShortcut("album", this.AlbumID) ? a.push({title: c.localize.getString("CONTEXT_REMOVE_FROM_PINBOARD"),customClass: "last jj_menu_item_hasIcon jj_menu_item_remove_pinboard",
                action: {type: "fn",callback: this.callback(function() {
                        GS.user.removeFromShortcuts("album", this.AlbumID)
                    })}}) : a.push({title: c.localize.getString("CONTEXT_ADD_TO_PINBOARD"),customClass: "last jj_menu_item_hasIcon jj_menu_item_pinboard",action: {type: "fn",callback: this.callback(function() {
                        GS.user.addToShortcuts("album", this.AlbumID, this.AlbumName)
                    })}});
            return a
        },toProxyLabel: function() {
            return _.getString(this.ArtistName ? "SELECTION_ALBUM_SINGLE" : "SELECTION_ALBUM_SINGLE_NO_ARTIST", {AlbumName: _.cleanText(this.AlbumName),
                ArtistName: _.cleanText(this.ArtistName)})
        },toString: function(a) {
            a = _.orEqual(a, false);
            var b = this.ArtistName ? "SELECTION_ALBUM_SINGLE" : "SELECTION_ALBUM_SINGLE_NO_ARTIST";
            return a ? ["Album. alid: ", this.AlbumID, ", alname:", this.AlbumName, ", aid:", this.ArtistID, ", arname: ", this.ArtistName, ", verified: ", this.IsVerified].join("") : _.getString(b, {AlbumName: _.cleanText(this.AlbumName),ArtistName: _.cleanText(this.ArtistName)})
        }})
})(jQuery);
(function(c) {
    GS.Models.Base.extend("GS.Models.Artist", {id: "ArtistID",cache: {},artPath: "http://images.grooveshark.com/static/artists/",defaults: {ArtistName: "",ArtistID: null,CoverArtFilename: "",PathName: null,PathNameEmpty: false,mbID: null,isFavorite: 0,songsLoaded: false,eventsLoaded: false,eventIDs: [],fanbase: null,lastFMInfo: {}},getArtist: function(a, b, g) {
            var h = this.getOneFromCache(a);
            if (h)
                c.isFunction(b) && b(h);
            else
                GS.service.getArtistByID(a, this.callback(["wrap", b]), g)
        },getOneSynchronous: function(a) {
            var b = 
            this.getOneFromCache(a);
            if (b)
                return b;
            else {
                GS.service.getArtistByID(a, this.callback(this.wrap), null, {async: false});
                return this.getOneFromCache(a)
            }
        },getFilterAll: function() {
            return this.wrap({ArtistID: -1,ArtistName: c.localize.getString("ALL_ARTISTS"),IsVerified: 2,isFilterAll: 1}, false)
        },defaultSongSort: function(a, b) {
            var g = _.orEqual(a.AlbumName, ""), h = _.orEqual(a.AlbumName, "");
            if (g > h)
                return 1;
            else if (g < h)
                return -1;
            return GS.Models.Album.defaultSongSort(a, b)
        },itemRenderer: function(a) {
            var b = "", g = "ARTIST_FOLLOW";
            if (a.isFavorite) {
                b = "following";
                g = "ARTIST_FOLLOWING"
            }
            var h = ['<a class="name ellipsis" href="', a.toUrl(), '">', a.ArtistName, "</a>"].join("");
            ['<a href="', a.toUrl(), '">', a.ArtistName, "</a>"].join("");
            var m = ['<img width="70" height="70" src="', a.getImageURL(), '"/>'].join("");
            b = ['<button class="btn button_style2 followArtist artistID', a.ArtistID, " ", b, '" data-artistid="', a.ArtistID, '"><div><span class="icon"></span><span class="label" data-translate-text="', g, '">', c.localize.getString(g), "</span></div></button>"].join("");
            return ['<a href="', a.toUrl(), '" class="artistImage insetBorder height70">', m, '</a><div class="meta">', h, b, "</div>"].join("")
        },exploreItemRenderer: function(a) {
            var b = "", g = "";
            if (a.isFavorite) {
                b = "following";
                g = c.localize.getString("UNFOLLOW")
            }
            var h = ['<a class="name ellipsis" href="', a.toUrl(), '">', a.ArtistName, "</a>"].join("");
            ['<a href="', a.toUrl(), '">', a.ArtistName, "</a>"].join("");
            var m = ['<img src="', a.getImageURL(120), '"/>'].join("");
            b = ['<button class="followArtist artistID', a.ArtistID, " ", b, '"data-artistid="', 
                a.ArtistID, '" title="', g, '" data-cachePrefix="' + a.cachePrefix + '"><div><span class="icon"></span></div></button>'].join("");
            g = a.tags ? '<div class="tags"><span class="icon"></span><span class="label ellipsis">' + a.tags + "</span></div>" : "";
            return ['<div class="tooltip" data-tip-type="artist" data-artistid="', a.ArtistID, '" data-cachePrefix="', a.cachePrefix, '"><a href="', a.toUrl(), '" class="artistImage insetBorder height120">', m, "</a>", b, '<div class="meta">', h, g, "</div></div>"].join("")
        },matchFilter: function(a) {
            var b = 
            RegExp(a, "gi");
            return function(g) {
                return g.ArtistName.match(b) || g.AlbumName.match(b)
            }
        }}, {smallCollection: 10,artistFeed: null,init: function(a) {
            this._super(a);
            this.ArtistName = _.cleanText(_.orEqual(a.ArtistName, a.Name) || "Unknown Artist");
            this.CoverArtFilename = _.orEqual(a.ArtistCoverArtFilename, a.CoverArtFilename);
            this.fanbase = false;
            this.songs = {};
            this.albums = {};
            this.songsUnverifiedLoaded = this.songsLoaded = false;
            this.eventIDs = [];
            this.eventsLoaded = false;
            this.searchText = this.ArtistName.toLowerCase();
            this.feed = 
            false
        },loadSongs: function(a, b) {
            this.allSongs ? a(this.allSongs) : GS.service.artistGetAllSongs(this.ArtistID, this.callback(function(g) {
                this.allSongs = g;
                a(g)
            }), b, {})
        },getSongs: function(a, b, g) {
            this.loadSongs(this.callback(function(h) {
                h = this._returnFreshSongCollection(h, b);
                a(h)
            }), g)
        },getAlbums: function(a, b, g) {
            this.loadSongs(this.callback(function(h) {
                var m = [], k = {}, n, o, q;
                o = 0;
                for (q = h.length; o < q; o++) {
                    n = h[o];
                    if (!k[n.AlbumID] && n.AlbumID) {
                        m.push({AlbumName: n.AlbumName,AlbumID: n.AlbumID,ArtistName: n.ArtistName,ArtistID: n.ArtistID,
                            CoverArtFilename: _.orEqualEx(n.CoverArtFilename, n.artFilename, ""),IsVerified: _.orEqual(parseFloat(n.IsVerified, 10), 0)});
                        k[n.AlbumID] = true
                    }
                }
                m = m.sort(function(x, v) {
                    return parseFloat(x.AlbumID, 10) <= parseFloat(v.AlbumID, 10) ? -1 : 1
                });
                m = b(m);
                o = 0;
                for (q = m.length; o < q; o++)
                    m[o] = GS.Models.Album.wrap(m[o], false);
                a(m)
            }), g)
        },wrap: function(a, b, g) {
            a = _.orEqual(a, {});
            try {
                delete a.AlbumID
            } catch (h) {
            }
            a.ArtistName = _.cleanText(a.ArtistName) || "Unknown Artist";
            a.CoverArtFilename = _.orEqual(a.ArtistCoverArtFilename, a.CoverArtFilename);
            return this._super(a, b, g)
        },_returnFreshSongCollection: function(a, b) {
            if (typeof b === "function") {
                a = b(a);
                this.songsLoaded = false
            } else
                this.songsLoaded = true;
            return this.wrapSongCollection(a, {Popularity: "0"})
        },getEvent: function(a, b) {
            var g = {};
            if (this.eventsLoaded) {
                g = GS.Models.Event.getManyFromCache(this.eventIDs);
                a(g)
            } else
                GS.service.artistGetEvents(this.ArtistID, this.ArtistName, this.callback([GS.Models.Event.wrapMany, a]), b, g)
        },cacheAndReturnEvents: function(a) {
            for (var b = GS.Models.User.wrapMany(a.Users || a.Return.fans || 
            a.Return), g = 0; g < b.length; g++) {
                var h = b[g];
                this.userIDs.push(h.UserID);
                GS.Models.User.cache[h.UserID] = h
            }
            if (_.defined(a.hasMore) && a.hasMore)
                this.currentPage++;
            else
                this.fansLoaded = true;
            return b
        },validate: function() {
            if (this.ArtistID > 0)
                return true;
            return false
        },getDetailsForFeeds: function() {
            return {artistID: this.ArtistID,artistName: this.ArtistName,artFilename: this.CoverArtFilename}
        },toUrl: function(a) {
            return this.PathName ? _.makeUrlFromPathName(this.PathName, a) : _.cleanUrl(this.ArtistName, this.ArtistID, "artist", 
            null, a)
        },getPathName: function(a) {
            if (this.PathName || this.PathNameEmpty)
                c.isFunction(a) && a(this.PathName);
            else
                GS.service.getPageInfoByIDType(this.ArtistID, "artist", this.callback(this._onPathNameSuccess, a), this.callback(this._onPathNameFailed, a))
        },_onPathNameSuccess: function(a, b) {
            if (b.Name) {
                this.PathName = b.Name;
                if (b.Data && b.Data.mbID)
                    this.mbID = b.Data.mbID
            } else {
                this.PathName = "";
                this.PathNameEmpty = true
            }
            c.isFunction(a) && a(this.PathName)
        },_onPathNameFailed: function(a) {
            this.PathName = "";
            this.PathNameEmpty = 
            true;
            c.isFunction(a) && a(this.PathName)
        },getImageURL: function(a) {
            a = _.orEqual(a, 70);
            if (this.CoverArtFilename)
                return GS.Models.Artist.artPath + a + "_" + this.CoverArtFilename;
            return GS.Models.Artist.artPath + a + "_artist.png"
        },getTitle: function() {
            return this.ArtistName
        },play: function(a, b, g) {
            this.getSongs(this.callback("playSongs", {index: a,playOnAdd: b,verified: true,shuffle: g}))
        },getArtAttribution: function(a) {
            if (this.artAttribution)
                c.isFunction(a) && a(this.artAttribution);
            else
                GS.service.artistGetArtAttribution(this.ArtistID, 
                this.callback(function(b) {
                    this.artAttribution = b;
                    c.isFunction(a) && a(b)
                }))
        },getContextMenu: function() {
            new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_ARTIST, this);
            var a = [{title: c.localize.getString("CONTEXT_PLAY_ARTIST"),action: {type: "fn",callback: this.callback(function() {
                            this.play(GS.player.INDEX_DEFAULT, true)
                        })},customClass: "jj_menu_item_hasIcon jj_menu_item_play"}, {title: c.localize.getString("CONTEXT_PLAY_ARTIST_NEXT"),action: {type: "fn",callback: this.callback(function() {
                            this.play(GS.player.INDEX_NEXT, 
                            false)
                        })},customClass: "jj_menu_item_hasIcon jj_menu_item_play_next"}, {title: c.localize.getString("CONTEXT_PLAY_ARTIST_LAST"),action: {type: "fn",callback: this.callback(function() {
                            this.play(GS.player.INDEX_LAST, false)
                        })},customClass: "jj_menu_item_hasIcon jj_menu_item_play_last"}, {customClass: "separator"}, {title: c.localize.getString("CONTEXT_REPLACE_ALL_SONGS"),action: {type: "fn",callback: this.callback(function() {
                            this.play(GS.player.INDEX_REPLACE, GS.player.isPlaying)
                        })},customClass: "jj_menu_item_hasIcon jj_menu_item_replace_playlist"}, 
                {customClass: "separator"}];
            a = a.concat([{title: c.localize.getString("SHARE_ARTIST"),customClass: "jj_menu_item_hasIcon jj_menu_item_share",action: {type: "fn",callback: this.callback(function() {
                            GS.getLightbox().open("share", {type: "artist",id: this.ArtistID})
                        })}}, {customClass: "separator"}]);
            GS.user.getIsShortcut("artist", this.ArtistID) ? a.push({title: c.localize.getString("CONTEXT_REMOVE_FROM_PINBOARD"),customClass: "last jj_menu_item_hasIcon jj_menu_item_remove_pinboard",action: {type: "fn",callback: this.callback(function() {
                        GS.user.removeFromShortcuts("artist", 
                        this.ArtistID)
                    })}}) : a.push({title: c.localize.getString("CONTEXT_ADD_TO_PINBOARD"),customClass: "last jj_menu_item_hasIcon jj_menu_item_pinboard",action: {type: "fn",callback: this.callback(function() {
                        GS.user.addToShortcuts("artist", this.ArtistID, this.ArtistName)
                    })}});
            return a
        },getShareMenu: function() {
            var a = [], b = this.ArtistID;
            a.push({title: c.localize.getString("SHARE_FACEBOOK"),action: {type: "fn",callback: function() {
                        GS.getLightbox().open("share", {service: "facebook",type: "artist",id: b})
                    }},customClass: "jj_menu_item_hasIcon jj_menu_item_share_facebook"}, 
            {title: c.localize.getString("SHARE_TWITTER"),action: {type: "fn",callback: function() {
                        GS.getLightbox().open("share", {service: "twitter",type: "artist",id: b})
                    }},customClass: "jj_menu_item_hasIcon jj_menu_item_share_twitter"}, {title: c.localize.getString("SHARE_STUMBLE"),action: {type: "fn",callback: this.callback(function() {
                        window.open(_.makeUrlForShare("stumbleupon", "artist", this), "_blank");
                        c("div[id^=jjmenu]").remove()
                    })},customClass: "jj_menu_item_hasIcon jj_menu_item_share_stumbleupon"}, {title: c.localize.getString("SHARE_REDDIT"),
                action: {type: "fn",callback: this.callback(function() {
                        window.open(_.makeUrlForShare("reddit", "artist", this), "_blank");
                        c("div[id^=jjmenu]").remove()
                    })},customClass: "jj_menu_item_hasIcon jj_menu_item_share_reddit"}, {title: c.localize.getString("ARTIST_URL"),customClass: "artistUrl jj_menu_item_hasIcon jj_menu_item_copy"});
            return a
        },toProxyLabel: function() {
            return _.cleanText(this.ArtistName)
        },toString: function(a) {
            return (a = _.orEqual(a, false)) ? ["Artist. aid:", this.ArtistID, ", arname: ", this.ArtistName].join("") : 
            _.cleanText(this.ArtistName)
        }})
})(jQuery);
(function(c) {
    GS.Models.Base.extend("GS.Models.Playlist", {SAVE_DELAY: 1E3,id: "PlaylistID",cache: {},artPath: "http://images.grooveshark.com/static/playlists/",defaults: {PlaylistID: 0,PlaylistName: "",UserID: 0,Username: "",UserName: "",FName: "",LName: "",Description: "",NumSongs: 0,Picture: "",Sort: null,Collaborative: false,Collaborators: null,isFavorite: 0,songs: [],originalOrder: [],songsLoaded: false,hasUnsavedChanges: false,searchText: "",fanbase: null,gridKey: 1,gridKeyLookup: {},songIDLookup: {},changeLog: [],isDeleted: false},
        playlistsLoaded: false,playlistIDs: [],getPlaylist: function(a, b, g) {
            var h = this.getOneFromCache(a);
            if (h)
                c.isFunction(b) && b(h);
            else
                GS.service.getPlaylistByID(a, this.callback(["wrap", b]), g, {async: false})
        },getOneSynchronous: function(a) {
            var b = this.getOneFromCache(a);
            if (b)
                return b;
            else {
                GS.service.getPlaylistByID(a, this.callback(this.wrap), null, {async: false});
                return this.getOneFromCache(a)
            }
        },getPlaylistsOrdered: function(a, b, g) {
            b = _.orEqual(b, false);
            g = _.orEqual(g, false);
            a = _.orEqual(a, "PlaylistName");
            g = b === false ? 
            g ? GS.user.collabPlaylists : GS.user.playlists : GS.user.favorites.playlists;
            var h = [];
            if (g) {
                c.each(g, function(m, k) {
                    var n = GS.Models.Playlist.getOneFromCache(k.PlaylistID);
                    if (n)
                        k = n;
                    if (b)
                        k.TSAdded = k.TSFavorited;
                    h.push(k)
                });
                h.sort(function(m, k) {
                    var n, o;
                    try {
                        n = m[a].toString().toLowerCase();
                        o = k[a].toString().toLowerCase()
                    } catch (q) {
                        console.warn("playlistOrdered error: " + q, a, m[a], k[a]);
                        return 0
                    }
                    return n == o ? 0 : n > o ? 1 : -1
                })
            }
            return h
        },getPlaylistsMenu: function(a, b, g, h, m) {
            a = c.makeArray(a);
            var k = "", n = "", o = null;
            if (m) {
                k = 
                m.menuType;
                n = m.multiClick;
                o = m.gridController
            }
            var q = {};
            q = n ? GS.getGuts().extractMultiSongInfo(o, a) : GS.getGuts().extractSongItemInfo(o);
            g = _.orEqual(g, false);
            h = _.orEqual(h, true);
            var x;
            x = [];
            if (h) {
                x.push({title: c.localize.getString("CONTEXT_NEW_PLAYLIST"),customClass: "jj_menu_item_hasIcon jj_menu_item_new_playlist",action: {type: "fn",callback: function() {
                            GS.getLightbox().open("newPlaylist", a)
                        },log: function() {
                            GS.getGuts().onContextMenuClick("contextNewPlaylist", k, n, q)
                        }}});
                _.isEmpty(GS.user.playlists) || x.push({customClass: "separator"})
            }
            var v = 
            false;
            c.each(this.getPlaylistsOrdered("PlaylistName"), function(A, t) {
                x.push({title: t.PlaylistName,customClass: "jj_menu_item_hasIcon jj_menu_item_playlist",action: {type: "fn",callback: function() {
                            b(t);
                            return true
                        },log: function() {
                            GS.getGuts().onContextMenuClick("contextAddToExistingPlaylist", k, n, q, t.PlaylistID)
                        }}});
                v = true
            });
            h = this.getPlaylistsOrdered("PlaylistName", false, true);
            v && h.length && x.push({customClass: "separator"});
            c.each(h, function(A, t) {
                t.UserID != GS.user.UserID && x.push({title: t.PlaylistName,customClass: "jj_menu_item_hasIcon jj_menu_item_playlist",
                    action: {type: "fn",callback: function() {
                            b(t);
                            return true
                        },log: function() {
                            GS.getGuts().onContextMenuClick("contextAddToExistingPlaylist", k, n, q, t.PlaylistID)
                        }}})
            });
            g && c.each(this.getPlaylistsOrdered("PlaylistName", true), function(A, t) {
                x.push({title: t.PlaylistName,customClass: "jj_menu_item_hasIcon jj_menu_item_playlist_subscribed",action: {type: "fn",callback: function() {
                            b(t)
                        }}})
            });
            return x
        },itemRenderer: function(a) {
            var b = "", g = "PLAYLIST_SUBSCRIBE";
            if (a.isFavorite) {
                b = "subscribed";
                g = "PLAYLIST_UNSUBSCRIBE"
            }
            var h = 
            ['<a href="', a.toUserUrl(), '">', a.UserName, "</a>"].join("");
            h = c("<span></span>").localeDataString("BY_ARTIST", {artist: h});
            var m = ['<span class="lineHeight"><a class="name ellipsis" href="', a.toUrl(), '">' + a.PlaylistName + "</a></span>"].join(""), k = ['<a href="', a.toUrl(), '"class="playlistImage insetBorder height70"><img width="70" height="70" src="', a.getImageURL(), '"/></a>'].join("");
            a = a.UserID === GS.user.UserID ? "" : ['<button class="btn button_style2 ', b, '" data-follow-userid="', a.UserID, '" ><div><span class="label" data-translate-text="', 
                g, '">', c.localize.getString(g), "</span></div></button>"].join("");
            return [k, '<div class="meta">', m, '<span class="ellipsis by">', h.render(), "</span>", a, "</div>"].join("")
        },exploreItemRenderer: function(a) {
            var b = "" + ('<a class="name ellipsis" href="' + a.toUrl() + '">' + a.PlaylistName + "</a>"), g;
            g = a.uri && a.uri.length > 6 && a.uri !== "" ? a.uri.indexOf("grooveshark.com") == -1 ? _.printf("BY_USER", {user: '<a href="' + a.uri + '" target="_blank">' + a.attributor + "</a>"}) : _.printf("BY_USER", {user: '<a href="' + a.uri + '">' + a.attributor + 
                "</a>"}) : _.printf("BY_USER", {user: a.attributor});
            var h = ['<img height="120" src="', a.hasCustomImage ? GS.Models.Explore.IMG_PATH + "120_" + a.Picture : a.getImageURL(200), '"/>'].join(""), m = a.tags ? '<div class="tags"> <span class="icon"></span> <span class="label ellipsis" title="' + a.tags + '">' + a.tags + "</span></div>" : "";
            return ['<div class="tooltip" data-tip-type="playlist" data-playlistID="', a.PlaylistID, '" data-cachePrefix="', a.cachePrefix, '"><a href="', a.toUrl(), '" class="playlistImage insetBorder height120">', 
                h, '<span class="playBtn" data-playlistid="', a.PlaylistID, '"></span></a><div class="meta">', b, '<span class="by ellipsis">', g, "</span>", m, "</div></div>"].join("")
        },prettySort: function(a, b) {
            return a.Picture || !b.Picture ? -1 : b.Picture ? 1 : 0
        },matchFilter: function(a) {
            var b = RegExp(a, "gi");
            return function(g) {
                return g.PlaylistName.match(b) || g.UserName.match(b)
            }
        }}, {init: function(a) {
            this._super(a);
            this.PlaylistName = _.defined(a.PlaylistName) ? _.cleanText(a.PlaylistName) : _.cleanText(a.Name);
            this.Description = _.orEqual(a.Description, 
            a.About || "");
            this.Username = this.Username && this.Username.length ? this.Username : a.Username;
            this.UserName = _.cleanText(c.trim(this.FName + (this.LName && this.LName.length ? " " + this.LName : "")));
            this.Collaborative = _.orEqual(a.Collaborative, false);
            this.Collaborators = a.Collaborators ? GS.Models.User.wrapCollectionInObject(a.Collaborators) : {};
            this.fanbase = false;
            this.searchText = [this.PlaylistName, this.FName, this.Description].join(" ").toLowerCase();
            this.songs = [];
            this.albums = {};
            this.originalOrder = [];
            this.images = [];
            this.songsLoaded = _.orEqual(a.songsLoaded, false);
            this.changeLog = [];
            this.hasUnsavedChanges = false;
            delete this.Name;
            delete this.About
        },getSongs: function(a, b) {
            var g = arguments[arguments.length - 1] === b ? {} : arguments[arguments.length - 1];
            if (this.songsLoaded) {
                this._updateSongs();
                a(this.songs)
            } else
                GS.service.playlistGetSongs(this.PlaylistID, this.callback(["wrapManySongs", a]), b, g)
        },validate: function() {
            if (this.PlaylistID > 0)
                return true;
            return false
        },wrapManySongs: function(a) {
            var b = [];
            if (this.hasUnsavedChanges)
                b = 
                this.songs;
            var g = a.Songs || a.songs || a.result || a;
            this.songs = [];
            this.gridKeyLookup = {};
            this.songIDLookup = {};
            var h, m;
            g.sort(function(n, o) {
                return parseFloat(n.Sort, 10) - parseFloat(o.Sort, 10)
            });
            var k;
            h = 0;
            for (m = g.length; h < m; h++) {
                a = GS.Models.Song.wrap(g[h], true).dupe();
                a.Sort = h;
                a.GridKey = this.gridKey;
                if (!this.albums[a.AlbumID]) {
                    k = GS.Models.Album.wrap({AlbumName: a.AlbumName,AlbumID: a.AlbumID,ArtistName: a.ArtistName,ArtistID: a.ArtistID,CoverArtFilename: a.CoverArtFilename,IsVerified: a.IsVerified}, false);
                    this.albums[a.AlbumID] = 
                    k
                }
                this.songs.push(a);
                this.gridKeyLookup[a.GridKey] = a;
                this.songIDLookup[a.SongID] = a;
                this.gridKey++
            }
            g = 0;
            for (m = b.length; g < m; g++) {
                a = b[g];
                a.Sort = g + h;
                a.GridKey = this.gridKey;
                b[g] = a;
                this.gridKeyLookup[a.GridKey] = a;
                this.songIDLookup[a.SongID] = a;
                this.gridKey++
            }
            this.originalOrder = this.songs.concat();
            this.songs = this.songs.concat(b);
            this.songsLoaded = true;
            c.publish("gs.playlist.view.update", this);
            this.songs._use_call = true;
            return this.songs
        },_updateSongs: function() {
            var a, b, g = GS.Models.Song;
            for (a = 0; a < this.songs.length; a++) {
                b = 
                g.getOneFromCache(this.songs[a].SongID);
                this.songs[a].isFavorite = b.isFavorite;
                this.songs[a].fromLibrary = b.fromLibrary
            }
        },reapplySorts: function() {
            for (var a = 0, b = this.songs.length; a < b; a++)
                this.songs[a].Sort = a
        },play: function(a, b, g) {
            this.getSongs(this.callback("playSongs", {index: a,playOnAdd: b,shuffle: g}), null)
        },playSongs: function(a) {
            var b = _.orEqual(a.shuffle, false), g = new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_PLAYLIST, this), h = [];
            if (b) {
                var m = this.songs.shuffle();
                for (b = 0; b < m.length; b++)
                    h.push(m[b].SongID)
            } else
                for (b = 
                0; b < this.songs.length; b++)
                    h.push(this.songs[b].SongID);
            GS.player.addSongsToQueueAt(h, a.index, a.playOnAdd, g)
        },getImageURL: function(a) {
            a = _.orEqual(a, 200);
            var b = GS.Models.Playlist.artPath + a + "_playlist.png";
            if (this.Picture)
                b = GS.Models.Playlist.artPath + a + "_" + this.Picture;
            return b
        },getDefaultImageUrl: function(a) {
            return GS.Models.Playlist.artPath + a + "_playlist.png"
        },getPlaylistArt: function(a) {
            a = _.orEqual(a, 200);
            if (this.Picture)
                return [GS.Models.Playlist.artPath + a + "_" + this.Picture];
            var b = [], g = {}, h = [];
            _.forEach(this.songs, 
            function(k) {
                if (k.CoverArtFilename)
                    if (g.hasOwnProperty(k.AlbumID))
                        g[k.AlbumID].weight++;
                    else
                        g[k.AlbumID] = {CoverArtFilename: k.CoverArtFilename,weight: 1}
            });
            for (var m in g)
                g.hasOwnProperty(m) && h.push([m, g[m]]);
            h = h.sort(function(k, n) {
                return n[1].weight - k[1].weight
            }).slice(0, 4);
            if (h.length >= 4)
                a = 70;
            for (m = 0; m < h.length && m < 4; ++m)
                b.push(GS.Models.Album.artPath + a + "_" + h[m][1].CoverArtFilename);
            return b.length ? b : [this.getDefaultImageUrl(a)]
        },_addSongAtEnd: function(a) {
            this.hasUnsavedChanges && this.addSongs([a], 
            this.songs.length, true);
            if (!this.isEditable(GS.user.UserID))
                return false;
            if (!(a <= 0)) {
                var b = GS.Models.Song.getOneFromCache(a).dupe(), g = {messageType: "playlist",action: "append",time: Math.floor(+new Date / 1024),data: {userID: GS.user.UserID,songs: [b.getDetailsForFeeds()],playlistID: this.PlaylistID,uuid: gsConfig.uuid}};
                if (this.songsLoaded) {
                    this.hasUnsavedChanges = true;
                    GS.Controllers.PageController.ALLOW_LOAD = false;
                    this.addSongsUpdate([b], -1, true);
                    GS.user.isLoggedIn ? GS.service.playlistAddSongToExisting(this.PlaylistID, 
                    a, b.getDetailsForFeeds(), this.callback("saveSuccess", true, g), this.callback("saveFailed")) : this.saveSuccess(true, false);
                    c.publish("gs.playlist.view.update", this)
                } else if (GS.user.isLoggedIn)
                    GS.service.playlistAddSongToExisting(this.PlaylistID, a, b.getDetailsForFeeds(), this.callback("addSongSuccess", g), this.callback("saveFailed"));
                else
                    return false
            }
        },addSongsUpdate: function(a, b, g) {
            var h = [], m = a.length && _.isObject(a[0]), k, n, o, q;
            o = 0;
            for (q = a.length; o < q; o++) {
                if (m)
                    n = a[o].dupe();
                else {
                    if (a[o] <= 0)
                        continue;
                    n = GS.Models.Song.getOneFromCache(a[o]).dupe()
                }
                n.GridKey = 
                this.gridKey;
                this.gridKeyLookup[n.GridKey] = n;
                this.songIDLookup[n.SongID] = n;
                this.gridKey++;
                h.push(n);
                if (!this.albums[n.AlbumID]) {
                    k = GS.Models.Album.wrap({AlbumName: n.AlbumName,AlbumID: n.AlbumID,ArtistName: n.ArtistName,ArtistID: n.ArtistID,CoverArtFilename: n.CoverArtFilename,IsVerified: n.IsVerified}, false);
                    this.albums[n.AlbumID] = k
                }
                typeof g != "undefined" && g && GS.getGuts().logEvent("songAddedToPlaylist", {songID: n.SongID})
            }
            b == -1 ? this.songs.push.apply(this.songs, h) : this.songs.splice.apply(this.songs, [b, 0].concat(h));
            this.reapplySorts()
        },addSongs: function(a, b, g) {
            b = _.orEqual(b, this.songs.length);
            g = _.orEqual(g, false);
            if (this.songsLoaded && a.length + this.songs.length > 2500) {
                a = (new GS.Models.DataString(c.localize.getString("POPUP_FAIL_ADD_PLAYLIST_TOO_MANY_MSG"), {playlist: this.PlaylistName,numSongs: a.length})).render();
                c.publish("gs.notification", {type: "error",message: a})
            } else if (a.length == 1 && !this.hasUnsavedChanges && g && (b == this.songs.length || b === -1))
                this._addSongAtEnd(a[0]);
            else {
                if (!this.isEditable(GS.user.UserID))
                    return false;
                this.hasUnsavedChanges = true;
                GS.Controllers.PageController.ALLOW_LOAD = false;
                this.addSongsUpdate(a, b, true);
                g && this.save();
                c.publish("gs.playlist.view.update", this)
            }
        },removeSongs: function(a, b) {
            if (!this.isEditable(GS.user.UserID))
                return false;
            b = _.orEqual(b, false);
            this.hasUnsavedChanges = true;
            GS.Controllers.PageController.ALLOW_LOAD = false;
            for (var g, h = 0; h < a.length; h++)
                if (g = this.songs[a[h]])
                    g.isDeleted = true;
            this.reapplySorts();
            b ? this.save() : this.saveLater();
            c.publish("gs.playlist.view.update", this)
        },overwriteWithSongs: function(a, 
        b) {
            if (!this.isEditable(GS.user.UserID))
                return false;
            b = _.orEqual(b, false);
            this.songs = [];
            for (var g, h = 0; h < a.length; h++)
                if (!(a[h] <= 0)) {
                    g = GS.Models.Song.getOneFromCache(a[h]).dupe();
                    g.GridKey = this.gridKey;
                    this.gridKeyLookup[g.GridKey] = g;
                    this.songIDLookup[g.SongID] = g;
                    this.gridKey++;
                    this.songs.push(g)
                }
            this.reapplySorts();
            this.hasUnsavedChanges = this.songsLoaded = true;
            GS.Controllers.PageController.ALLOW_LOAD = false;
            b && this.save();
            c.publish("gs.playlist.view.update", this)
        },moveSongsTo: function(a, b, g) {
            if (!this.isEditable(GS.user.UserID))
                return false;
            g = _.orEqual(g, false);
            this.hasUnsavedChanges = true;
            GS.Controllers.PageController.ALLOW_LOAD = false;
            var h, m = [];
            for (h = 0; h < a.length; h++)
                m.push(this.songs[a[h]]);
            for (h = 0; h < m.length; h++) {
                a = this.songs.indexOf(m[h]);
                this.songs.splice(a, 1);
                a < b && b--
            }
            this.songs.splice.apply(this.songs, [b, 0].concat(m));
            this.reapplySorts();
            g ? this.save() : this.saveLater();
            c.publish("gs.playlist.view.update", this)
        },broadcastOverwrite: function(a) {
            if (a instanceof Object)
                a = a;
            else {
                a = [];
                for (var b = 0, g = this.songs.length; b < g; b++)
                    a.push(this.songs[b].getDetailsForFeeds());
                a = {messageType: "playlist",action: "overwrite",time: Math.floor(+new Date / 1024),data: {userID: GS.user.UserID,songs: a,playlistID: this.PlaylistID,uuid: gsConfig.uuid}}
            }
            var h = {publishers: [this.UserID + ""]};
            if (this.Collaborators) {
                c.each(this.Collaborators, function(m) {
                    h.publishers.push(m + "")
                });
                c.unique(h.publishers)
            }
            GS.player.player.broadcastToChannel("playlist" + this.PlaylistID, a, h)
        },saveTimer: null,saveLater: function(a) {
            a = _.orEqual(a, true);
            this.saveTimer && clearTimeout(this.saveTimer);
            this.saveTimer = setTimeout(this.callback("save", 
            a), GS.Models.Playlist.SAVE_DELAY)
        },save: function(a) {
            if (this.songsLoaded) {
                var b, g, h = [], m = [], k = [];
                for (b = 0; g = this.songs[b]; b++)
                    if (g.isDeleted)
                        GS.getGuts().logEvent("songRemovedFromPlaylist", {songID: g.SongID});
                    else {
                        h.push(g.SongID);
                        k.push(g.getDetailsForFeeds())
                    }
                b = 0;
                for (g = this.originalOrder.length; b < g; b++)
                    m.push(this.originalOrder[b].SongID);
                if (h.join(".") == m.join(".")) {
                    this.originalOrder = this.songs.concat();
                    this.hasUnsavedChanges = false;
                    GS.Controllers.PageController.ALLOW_LOAD = true;
                    c.publish("gs.playlist.view.update", 
                    this)
                } else {
                    GS.user.isLoggedIn ? GS.service.overwritePlaylist(this.PlaylistID, this.PlaylistName, h, k, this.callback("saveSuccess", a, true), this.callback("saveFailed")) : this.saveSuccess();
                    GS.getGuts().gaTrackEvent("playlist", "savePlaylist")
                }
            } else
                this.getSongs(this.callback("save"), this.callback("saveFailed"), false)
        },saveHistory: function(a) {
            this.changeLog.push(a);
            this.changeLog.length > 10 && this.changeLog.shift()
        },saveSuccess: function(a, b) {
            for (var g = [], h = 0; h < this.songs.length; h++)
                this.songs[h].isDeleted || 
                g.push(this.songs[h]);
            (a = _.orEqual(a, true)) && this.saveHistory(this.originalOrder);
            this.songsLoaded = true;
            this.songs = g;
            this.originalOrder = this.songs.concat();
            this.hasUnsavedChanges = false;
            this.TSModified = (new Date).getTime();
            GS.Controllers.PageController.ALLOW_LOAD = true;
            g = (new GS.Models.DataString(c.localize.getString("POPUP_SAVE_PLAYLIST_MSG"), {playlist: this.PlaylistName,playlistID: this.PlaylistID})).render();
            c.publish("gs.notification", {type: "notice",message: g});
            c.publish("gs.playlist.view.update", 
            this);
            b && this.broadcastOverwrite(b)
        },addSongSuccess: function(a) {
            var b = (new GS.Models.DataString(c.localize.getString("POPUP_SAVE_PLAYLIST_MSG"), {playlist: this.PlaylistName,playlistID: this.PlaylistID})).render();
            c.publish("gs.notification", {type: "notice",message: b});
            c.publish("gs.playlist.view.update", this);
            this.broadcastOverwrite(a)
        },saveFailed: function() {
            c.publish("gs.notification", {type: "error",message: c.localize.getString("POPUP_FAIL_SAVE_PLAYLIST_MSG")})
        },remove: function(a) {
            GS.user.deletePlaylist(this.PlaylistID, 
            a);
            GS.getGuts().logEvent("playlistDeleted", {playlistID: this.PlaylistID})
        },restore: function(a) {
            GS.user.restorePlaylist(this.PlaylistID, a)
        },setCollaborative: function(a) {
            if (GS.user.UserID > 0 && GS.user.UserID == this.UserID)
                GS.service.playlistSetCollaboration(this.PlaylistID, a ? 1 : 0, this.callback("_setCollaborate", a ? 1 : 0))
        },_setCollaborate: function(a) {
            this.Collaborative = a;
            if (GS.user.UserID == this.UserID) {
                if (GS.user.PageNameData.CollabPlaylists)
                    if (a)
                        GS.user.PageNameData.CollabPlaylists[this.PlaylistID] = this;
                    else
                        GS.user.PageNameData.CollabPlaylists.hasOwnProperty(this.PlaylistID) && 
                        delete GS.user.PageNameData.CollabPlaylists[this.PlaylistID];
                if (GS.user.playlists && GS.user.playlists.hasOwnProperty(this.PlaylistID))
                    GS.user.playlists[this.PlaylistID].Collaborative = a;
                GS.user._updateCollabPlaylists()
            }
            c.publish("gs.playlist.view.update", this)
        },setCollaborativePermissions: function(a, b) {
            if (GS.user.UserID > 0 && (GS.user.UserID == this.UserID || GS.user.UserID == a))
                GS.service.playlistSetUserPermissions(this.PlaylistID, a, b, this.callback("_setUserPermissions", a, b))
        },isCollaborator: function(a) {
            return this.Collaborators && 
            this.Collaborators.hasOwnProperty(a)
        },isEditable: function(a) {
            return a == this.UserID || this.Collaborative && this.isCollaborator(a)
        },_setUserPermissions: function(a, b) {
            var g = GS.Models.User.getOneFromCache(a);
            if (g) {
                if (b >= 0) {
                    this.Collaborative = true;
                    this.Collaborators[g.UserID] = g;
                    var h = {publishers: [this.UserID + ""]};
                    if (this.Collaborators) {
                        c.each(this.Collaborators, function(m) {
                            h.publishers.push(m + "")
                        });
                        c.unique(h.publishers)
                    }
                    GS.player.player.subscribeToPlaylistChannel(this.PlaylistID, h)
                } else {
                    delete this.Collaborators[a];
                    if (GS.user.UserID == a) {
                        delete GS.user.PageNameData.CollabPlaylists[this.PlaylistID];
                        GS.user._updateCollabPlaylists()
                    }
                }
                c.publish("gs.playlist.view.update", this)
            }
        },undo: function() {
            var a, b;
            if (this.hasUnsavedChanges) {
                this.songs = this.originalOrder.concat();
                a = 0;
                for (b = this.songs.length; a < b; a++)
                    this.songs[a].isDeleted = false;
                this.hasUnsavedChanges = false;
                GS.Controllers.PageController.ALLOW_LOAD = true
            } else if (this.changeLog.length) {
                this.songs = this.changeLog.pop();
                this.gridKeyLookup = {};
                a = 0;
                for (b = this.songs.length; a < 
                b; a++) {
                    this.songs[a].isDeleted = false;
                    this.gridKeyLookup[this.songs[a].GridKey] = this.songs[a]
                }
                this.save(false);
                this.originalOrder = this.songs.concat()
            }
            this.reapplySorts();
            c.publish("gs.playlist.view.update", this)
        },rename: function(a, b, g) {
            var h = {messageType: "playlist",action: "rename",time: Math.floor(+new Date / 1024),data: {userID: GS.user.UserID,name: a,playlistID: this.PlaylistID,uuid: gsConfig.uuid}}, m = {publishers: [this.UserID + ""]};
            if (this.Collaborators) {
                c.each(this.Collaborators, function(k) {
                    m.publishers.push(k + 
                    "")
                });
                c.unique(m.publishers)
            }
            GS.player.player.broadcastToChannel("playlist" + this.PlaylistID, h, m);
            GS.service.renamePlaylist(this.PlaylistID, a, this.Collaborative, this.callback([this._renameSuccess, b], a), this.callback([this._renameFailed, g]))
        },_renameSuccess: function(a, b) {
            this.PlaylistName = a;
            var g = this.Class.getOneFromCache(this.PlaylistID);
            if (g)
                g.PlaylistName = a;
            if (g = GS.user.playlists[this.PlaylistID])
                g.PlaylistName = a;
            this._updateUserPageNameData();
            c.publish("gs.playlist.view.update", this);
            c.publish("gs.auth.playlists.update", 
            this);
            return b
        },_renameFailed: function(a) {
            return a
        },changeDescription: function(a, b, g) {
            GS.service.setPlaylistAbout(this.PlaylistID, a, this.Collaborative, this.callback([this._changeDescSuccess, b], a), this.callback([this._changeDescFailed, g]))
        },_changeDescSuccess: function(a, b) {
            this.Description = a;
            var g = this.Class.getOneFromCache(this.PlaylistID);
            if (g)
                g.Description = a;
            if (g = GS.user.playlists[this.PlaylistID])
                g.Description = a;
            c.publish("gs.playlist.view.update", this);
            return b
        },_changeDescFailed: function(a) {
            return a
        },
        getDetailsForFeeds: function() {
            var a = {playlistID: this.PlaylistID,playlistName: this.PlaylistName,userID: this.UserID,displayName: this.FName + (this.LName && this.LName.length ? " " + this.LName : ""),artFilename: this.Picture};
            if (this.songs) {
                a.songs = [];
                for (var b = 0; b < a.songs; b++)
                    a.songs.push(this.songs[b].getDetailsForFeeds())
            }
            return a
        },getTitle: function() {
            return ['"', this.PlaylistName, '" by ', this.UserName].join("")
        },isSubscribed: function() {
            return GS.user.UserID != this.UserID && this.isFavorite || !_.isEmpty(GS.user.favorites.playlists[this.PlaylistID])
        },
        subscribe: function() {
            GS.user.addToPlaylistFavorites(this.PlaylistID)
        },unsubscribe: function() {
            GS.user.removeFromPlaylistFavorites(this.PlaylistID)
        },_updateUserPageNameData: function() {
            if (this.UserID != GS.user.UserID)
                if (GS.user.PageNameData.CollabPlaylists && GS.user.PageNameData.CollabPlaylists[this.PlaylistID]) {
                    var a = GS.user.PageNameData.CollabPlaylists[this.PlaylistID], b = false;
                    if (a.Name != this.PlaylistName) {
                        b = true;
                        GS.user.PageNameData.CollabPlaylists[this.PlaylistID].Name = this.PlaylistName
                    }
                    if (a.Picture != 
                    this.Picture) {
                        b = true;
                        GS.user.PageNameData.CollabPlaylists[this.PlaylistID].Picture = this.Picture
                    }
                    if (a.FName != this.UserName) {
                        b = true;
                        GS.user.PageNameData.CollabPlaylists[this.PlaylistID].FName = this.UserName
                    }
                    if (b) {
                        GS.service.userCollaborativePlaylistChanged(this.getDetailsForFeeds());
                        GS.user._updateCollabPlaylists(true)
                    }
                }
        },updateFromBroadcast: function(a) {
            if (a.data.uuid == gsConfig.uuid)
                return false;
            var b;
            if (a.data.songs)
                b = GS.Models.Song.wrapCollection(a.data.songs);
            if (b && this.hasUnsavedChanges && (GS.user.UserID == 
            this.UserID || a.data.userID > GS.user.UserID))
                this.broadcastOverwrite();
            else {
                switch (a.action) {
                    case "rename":
                        this.TSModified = a.time;
                        this._renameSuccess(_.cleanText(a.data.name));
                        location.hash = this.toUrl();
                        return;
                    case "description":
                        this.Description = a.data.description;
                        this.TSModified = a.time;
                        break;
                    case "append":
                        this.saveHistory(this.songs.concat());
                        this.TSModified = a.time;
                        this.addSongsUpdate(b, -1, false);
                        this.originalOrder = this.songs.concat();
                        break;
                    case "overwrite":
                        this.saveHistory(this.songs.concat());
                        this.songs = 
                        [];
                        this.songs._use_call = true;
                        this.albums = {};
                        this.gridKeyLookup = {};
                        this.songIDLookup = {};
                        this.TSModified = a.time;
                        this.addSongsUpdate(b, -1, false);
                        this.originalOrder = this.songs.concat();
                        break
                }
                c.publish("gs.playlist.view.update", this)
            }
        },getContextMenu: function() {
            var a = new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_PLAYLIST, this), b = [{title: c.localize.getString("CONTEXT_PLAY_PLAYLIST"),customClass: "last jj_menu_item_hasIcon jj_menu_item_play",action: {type: "fn",callback: this.callback(function() {
                            this.getSongs(function(g) {
                                var h = 
                                [];
                                c.each(g, function(m, k) {
                                    h.push(k.SongID)
                                });
                                GS.player.addSongsToQueueAt(h, GS.player.INDEX_DEFAULT, true, a)
                            }, null)
                        })}}, {title: c.localize.getString("CONTEXT_PLAY_PLAYLIST_NEXT"),customClass: "last jj_menu_item_hasIcon jj_menu_item_play_next",action: {type: "fn",callback: this.callback(function() {
                            this.getSongs(function(g) {
                                var h = [];
                                c.each(g, function(m, k) {
                                    h.push(k.SongID)
                                });
                                GS.player.addSongsToQueueAt(h, GS.player.INDEX_NEXT, false, a)
                            }, null)
                        })}}, {title: c.localize.getString("CONTEXT_PLAY_PLAYLIST_LAST"),customClass: "last jj_menu_item_hasIcon jj_menu_item_play_last",
                    action: {type: "fn",callback: this.callback(function() {
                            this.getSongs(function(g) {
                                var h = [];
                                c.each(g, function(m, k) {
                                    h.push(k.SongID)
                                });
                                GS.player.addSongsToQueueAt(h, GS.player.INDEX_LAST, false, a)
                            }, null)
                        })}}, {customClass: "separator"}];
            if (this.PlaylistID > 0)
                b = b.concat([{title: c.localize.getString("SHARE_PLAYLIST"),customClass: "jj_menu_item_hasIcon jj_menu_item_share",action: {type: "fn",callback: this.callback(function() {
                                GS.getLightbox().open("share", {type: "playlist",id: this.PlaylistID})
                            })}}, {customClass: "separator"}]);
            b = b.concat([{title: c.localize.getString("CONTEXT_REPLACE_ALL_SONGS"),customClass: "last jj_menu_item_hasIcon jj_menu_item_now_playing",action: {type: "fn",callback: this.callback(function() {
                            this.getSongs(function(g) {
                                var h = [], m = GS.player.isPlaying;
                                c.each(g, function(k, n) {
                                    h.push(n.SongID)
                                });
                                GS.player.addSongsToQueueAt(h, GS.player.INDEX_REPLACE, m, a)
                            }, null)
                        })}}, {customClass: "separator"}]);
            GS.user.getIsShortcut("playlist", this.PlaylistID) ? b.push({title: c.localize.getString("CONTEXT_REMOVE_FROM_PINBOARD"),customClass: "last jj_menu_item_hasIcon jj_menu_item_remove_pinboard",
                action: {type: "fn",callback: this.callback(function() {
                        GS.user.removeFromShortcuts("playlist", this.PlaylistID)
                    })}}) : b.push({title: c.localize.getString("CONTEXT_ADD_TO_PINBOARD"),customClass: "last jj_menu_item_hasIcon jj_menu_item_pinboard",action: {type: "fn",callback: this.callback(function() {
                        GS.user.addToShortcuts("playlist", this.PlaylistID, this.PlaylistName)
                    })}});
            return b
        },getShareMenu: function() {
            var a = [];
            GS.user.isLoggedIn && a.push({title: c.localize.getString("SHARE_EMAIL"),customClass: "jj_menu_item_hasIcon jj_menu_item_share_email",
                action: {type: "fn",callback: this.callback(function() {
                        GS.getLightbox().open("share", {service: "email",type: "playlist",id: this.PlaylistID})
                    })}});
            return a = a.concat([{title: c.localize.getString("SHARE_FACEBOOK"),customClass: "jj_menu_item_hasIcon jj_menu_item_share_facebook",action: {type: "fn",callback: this.callback(function() {
                            GS.getLightbox().open("share", {service: "facebook",type: "playlist",id: this.PlaylistID})
                        })}}, {title: c.localize.getString("SHARE_TWITTER"),customClass: "jj_menu_item_hasIcon jj_menu_item_share_twitter",
                    action: {type: "fn",callback: this.callback(function() {
                            GS.getLightbox().open("share", {service: "twitter",type: "playlist",id: this.PlaylistID})
                        })}}, {title: c.localize.getString("SHARE_STUMBLE"),customClass: "jj_menu_item_hasIcon jj_menu_item_share_stumbleupon",action: {type: "fn",callback: this.callback(function() {
                            window.open(_.makeUrlForShare("stumbleupon", "playlist", this), "_blank");
                            c("div[id^=jjmenu]").remove()
                        })}}, {title: c.localize.getString("SHARE_REDDIT"),customClass: "jj_menu_item_hasIcon jj_menu_item_share jj_menu_item_share_reddit",
                    action: {type: "fn",callback: this.callback(function() {
                            window.open(_.makeUrlForShare("reddit", "playlist", this), "_blank");
                            c("div[id^=jjmenu]").remove()
                        })}}, {title: c.localize.getString("SHARE_WIDGET"),customClass: "jj_menu_item_hasIcon jj_menu_item_share_widget",action: {type: "fn",callback: this.callback(function() {
                            GS.getLightbox().open("share", {service: "widget",type: "playlist",id: this.PlaylistID})
                        })}}, {title: c.localize.getString("PLAYLIST_URL"),customClass: "playlistUrl jj_menu_item_hasIcon jj_menu_item_copy"}])
        },
        toUrl: function(a) {
            return _.cleanUrl(this.PlaylistName, this.PlaylistID, "playlist", null, a)
        },toUserUrl: function(a) {
            return _.cleanUrl(this.UserName, this.UserID, "user", null, a)
        },toProxyLabel: function() {
            return _.getString("SELECTION_PLAYLIST_SINGLE", {PlaylistName: _.cleanText(this.PlaylistName),Username: _.cleanText(this.UserName)})
        },partyUrls: {},getPartyUrl: function(a, b, g) {
            this.partyUrls[a] ? b(this.partyUrls[a]) : GS.service.getPlaylist3DES(this.PlaylistID, a, this.callback(["savePartyUrl", b], a), g)
        },savePartyUrl: function(a, 
        b) {
            if (b && b.length) {
                this.partyUrls[a] = GS.Controllers.PartyController.partyPath + b;
                return this.partyUrls[a]
            }
        },toString: function(a) {
            return (a = _.orEqual(a, false)) ? ["Playlist. pid: ", this.PlaylistID, ", pname:", this.PlaylistName, ", uid:", this.UserID, ", uname: ", this.UserName].join("") : _.getString("SELECTION_PLAYLIST_SINGLE", {PlaylistName: _.cleanText(this.PlaylistName),Username: _.cleanText(this.UserName)})
        }})
})(jQuery);
(function() {
    GS.Models.Base.extend("GS.Models.Explore", {IMG_PATH: "http://images.grooveshark.com/static/featured/",cache: {},getType: function(c) {
            var a = this.getOneFromCache(c);
            if (!a) {
                a = this.wrap({type: c});
                this.cache[c] = a
            }
            return a
        },slideProxyRenderer: function(c, a, b) {
            if (c.PlaylistID)
                return GS.Models.Playlist.slideItemRenderer(c, a, b);
            else if (c.SongID)
                return GS.Models.Song.slideItemRenderer(c, a, b);
            else if (c.AlbumID)
                return GS.Models.Album.slideItemRenderer(c, a, b);
            else if (c.ArtistID)
                return GS.Models.Artist.slideItemRenderer(c, 
                a, b);
            else
                console.warn("Wrong type of object for featured itemrenderers")
        },proxyRenderer: function(c, a, b) {
            if (c.PlaylistID)
                return GS.Models.Playlist.exploreItemRenderer(c, a, b);
            else if (c.VideoID)
                return GS.Models.Video.exploreItemRenderer(c, a, b);
            else if (c.SongID)
                return GS.Models.Song.exploreItemRenderer(c, a, b);
            else if (c.AlbumID)
                return GS.Models.Album.exploreItemRenderer(c, a, b);
            else if (c.ArtistID)
                return GS.Models.Artist.exploreItemRenderer(c, a, b);
            else
                console.warn("Wrong type of object for featured itemrenderers")
        }}, 
    {type: null,songsLoaded: false,featuredData: null,featuredPlaylists: [],featuredVideos: [],videoGroups: {},init: function(c) {
            this._super(c);
            this.songsLoaded = false;
            this.songs = []
        },getFeaturedData: function(c, a) {
            this.featuredData ? c(this.featuredData) : GS.service.featuredGetCurrentFeatured(null, this.callback(["wrapFeatured", c]), a)
        },wrapFeatured: function(c) {
            this.featuredPlaylists = [];
            this.featuredData = c;
            i = 0;
            for (l = this.featuredData.Contents.length; i < l; i++) {
                j = 0;
                for (l2 = this.featuredData.Contents[i].items.length; j < 
                l2; j++)
                    if (this.featuredData.Contents[i].items[j].PlaylistID)
                        this.featuredData.Contents[i].items[j] = GS.Models.Playlist.wrap(this.featuredData.Contents[i].items[j], true, "featured");
                    else if (this.featuredData.Contents[i].items[j].VideoID) {
                        this.featuredData.Contents[i].items[j] = GS.Models.Video.wrap(this.featuredData.Contents[i].items[j], true, "featured");
                        c = this.featuredData.Contents[i].items[j];
                        if (this.videoGroups[c.set])
                            this.videoGroups[c.set].push(c);
                        else
                            this.videoGroups[c.set] = [c]
                    } else if (this.featuredData.Contents[i].items[j].SongID)
                        this.featuredData.Contents[i].items[j] = 
                        GS.Models.Song.wrap(this.featuredData.Contents[i].items[j], true, "featured");
                    else if (this.featuredData.Contents[i].items[j].AlbumID)
                        this.featuredData.Contents[i].items[j] = GS.Models.Album.wrap(this.featuredData.Contents[i].items[j], true, "featured");
                    else if (this.featuredData.Contents[i].items[j].ArtistID)
                        this.featuredData.Contents[i].items[j] = GS.Models.Artist.wrap(this.featuredData.Contents[i].items[j], true, "featured");
                if (this.featuredData.Contents[i].items[0].PlaylistID)
                    this.featuredPlaylists.push(this.featuredData.Contents[i]);
                else
                    this.featuredData.Contents[i].items[0].VideoID && this.featuredVideos.push(this.featuredData.Contents[i])
            }
        },getPopularSongs: function(c, a) {
            if (this.songsLoaded) {
                this.songs = this.wrapSongCollection(this.songs, {Popularity: 0,Weight: "",NumPlays: ""});
                c(this.songs)
            } else
                GS.service.popularGetSongs(this.type, this.callback(["wrapManySongs", c]), a)
        },wrapManySongs: function(c) {
            c.Songs && c.Songs.reverse();
            return this.wrapSongCollection(c, {USE_INDEX: "Popularity",Weight: "",NumPlays: ""})
        }})
})(jQuery);
(function(c) {
    GS.Models.Base.extend("GS.Models.User", {id: "UserID",cache: {},usersLoaded: false,userIDs: [],artPath: "http://images.grooveshark.com/static/users/",defaults: {UserID: 0,Username: "",Name: "",FName: "",LName: "",Picture: "",IsPremium: 0,SignupDate: null,Location: "",Sex: "",FollowingFlags: 0,Flags: 0,PathName: null,PathNameEmpty: false,PageNameData: {},isFavorite: 0,library: {},favorites: {songs: {},albums: {},artists: {},playlists: {},users: {}},fanbase: null,playlists: {},profileFeed: {},communityFeed: {},mentionsFeed: {},
            collabPlaylists: {}},getUser: function(a, b, g) {
            var h = this.getOneFromCache(a);
            h ? b(h) : GS.service.getUserByID(a, this.callback(["wrapProxy", b]), g)
        },itemRenderer: function(a) {
            var b = GS.user.favorites.users && GS.user.favorites.users[a.UserID] ? " following" : "", g = GS.user.favorites.users && GS.user.favorites.users[a.UserID] ? "FOLLOWING" : "FOLLOW", h = "" + ('<a class="name ellipsis capitalize" href="' + _.cleanUrl(a.UserID, a.Name, "user") + '">' + a.Name + "</a>"), m = a.City && a.State && a.Country ? a.Location : a.Country ? a.Country : "";
            m = ['<span class="location ellipsis', 
                m.length ? "" : " emphasis", '">', m.length ? m : c.localize.getString("USER_NO_LOCATION"), "</span>"].join("");
            var k = a.getImageURL(70);
            k = ['<img src="', k, '"/>'].join("");
            b = a.UserID === GS.user.UserID ? "" : ['<button class="follow btn button_style2 ', b, '" data-follow-userid="', a.UserID, '" ><div><span class="icon"></span><span class="label" data-translate-text="', g, '">', c.localize.getString(g), "</span></div></button>"].join("");
            return ['<a href="', _.cleanUrl(a.UserID, a.Name, "user"), '" class="userImage insetBorder height70"><div class="status ', 
                a.getVipPackage(), '"></div>', k, '</a><div class="meta">', h, m, b, "</div>"].join("")
        },sliderRenderer: function(a) {
            var b = '<div class="page_content_slide subcontent-item fans"><a href="' + a.toUrl() + '" class="image"><img src="' + a.getImageURL() + '"></a><a class="title" href="' + a.toUrl() + '">' + (a.FName || a.Name) + '</a><span class="duration">';
            a = a.getAccountDuration();
            b += c("<span></span>").localeDataString(a.key, a).render();
            b += "</span></div>";
            return b
        },matchFilter: function(a) {
            var b = RegExp(a, "gi");
            return function(g) {
                return g.Name ? 
                g.Name.match(b) : false
            }
        },wrapProxy: function(a) {
            return this.wrap(a.User || a)
        },FLAG_PLUS: 1,FLAG_LASTFM: 2,FLAG_FACEBOOK: 4,FLAG_FACEBOOKUSER: 16,FLAG_GOOGLEUSER: 32,FLAG_GOOGLE: 64,FLAG_ANYWHERE: 128,FLAG_ISARTIST: 256,FLAG_CLEARVOICE: 512,FLAG_MUSIC_BUSINESS: 1024,FLAG_LITE: 32768,FLAG_KINESIS: 16384}, {validate: function() {
            if (this.UserID > 0)
                return true;
            return false
        },init: function(a) {
            this._super(a);
            var b = _.orEqual(this.City, "");
            b += this.State && b.length ? ", " + this.State : _.orEqual(this.State, "");
            b += this.Country && b.length ? 
            ", " + this.Country : _.orEqual(this.Country, "");
            this.FName = _.cleanText(this.FName);
            this.LName = _.cleanText(this.LName);
            if (_.defined(this.displayName))
                this.Name = _.cleanText(this.displayName);
            else if (_.defined(this.FName)) {
                this.Name = _.cleanText(this.FName);
                if (this.LName && this.LName.length)
                    this.Name += " " + _.cleanText(this.LName)
            } else
                this.Name = "New User";
            this.Username = this.UserID > 0 ? this.Username && this.Username.length ? this.Username : this.Name : "New User";
            this.Location = b;
            this.IsPremium = this.IsPremium == 1 ? 1 : 0;
            this.library = this.isAuth ? {} : false;
            this.communityFeed = this.profileFeed = this.fanbase = false;
            this.mentionsFeed = GS.Models.MentionsFeed.wrap({user: this});
            this.searchText = [this.Locale, this.FName, this.LName].join(" ").toLowerCase();
            this.playlists = {};
            this.favorites = {songs: {},albums: {},artists: {},playlists: {},users: {}};
            this.TSAdded = _.orEqual(a.TSAdded, false);
            this.TSLogin = _.orEqual(a.TSLogin, null);
            this.TSModified = _.orEqual(a.TSModified, null)
        },autocompleteFavoriteUsers: function() {
            var a = [];
            c.each(this.favorites.users, 
            function(b, g) {
                c.each(g.searchText.trim().split(), function(h, m) {
                    a.push([m.trim(), g.UserID])
                })
            });
            return a
        },getTopArtists: function(a, b) {
            _.isEmpty(this.topArtists) ? GS.service.getUserTopArtists(this.UserID, this.callback(function(g) {
                this._setTopArtists(g, a)
            }), b) : a(this.topArtists)
        },_setTopArtists: function(a, b) {
            for (var g in a) {
                a[g].ArtistID = a[g].artistID;
                a[g].Name = a[g].artistName;
                delete a[g].artistID;
                delete a[g].artistName
            }
            this.topArtists = GS.Models.Artist.wrapCollectionInObject(a);
            b(this.topArtists)
        },getFavoritesByType: function(a, 
        b, g) {
            var h = arguments[arguments.length - 1] === g ? {} : arguments[arguments.length - 1], m = a.toLowerCase();
            if (_.isEmpty(this.favorites[m]))
                GS.service.getFavorites(this.UserID, a, !this.isAuth, this.callback(["load" + a + "Favorites", b]), g, h);
            else {
                h = this.favorites[m];
                this.favorites[m] = GS.Models[a.substring(0, a.length - 1)].wrapCollectionInObject(h, {TSFavorited: "",TSAdded: ""});
                b(this.favorites[m])
            }
        },loadAlbumsFavorites: function(a) {
            var b = {};
            for (var g in a)
                if (a.hasOwnProperty(g)) {
                    a[g].TSAdded = a[g].TSFavorited;
                    b[a[g].AlbumID] = 
                    a[g];
                    if (this.isAuth)
                        a[g].isFavorite = 1
                }
            this.favorites.albums = GS.Models.Album.wrapCollectionInObject(b, {TSFavorited: "",TSAdded: ""});
            return this.favorites.albums
        },loadArtistsFavorites: function(a) {
            var b = {};
            for (var g in a)
                if (a.hasOwnProperty(g)) {
                    a[g].TSAdded = a[g].TSFavorited;
                    b[a[g].ArtistID] = a[g];
                    if (this.isAuth)
                        a[g].isFavorite = 1
                }
            this.favorites.artists = GS.Models.Artist.wrapCollectionInObject(b, {TSFavorited: "",TSAdded: ""});
            return this.favorites.artists
        },loadPlaylistsFavorites: function(a) {
            var b = {};
            for (var g in a)
                if (a.hasOwnProperty(g)) {
                    a[g].TSAdded = 
                    a[g].TSFavorited;
                    b[a[g].PlaylistID] = a[g];
                    if (this.isAuth)
                        a[g].isFavorite = 1
                }
            this.favorites.playlists = GS.Models.Playlist.wrapCollectionInObject(b, {TSFavorited: "",TSAdded: ""});
            return this.favorites.playlists
        },loadSongsFavorites: function(a) {
            var b = {};
            for (var g in a)
                if (a.hasOwnProperty(g)) {
                    a[g].TSAdded = a[g].TSFavorited;
                    b[a[g].SongID] = a[g]
                }
            this.favorites.songs = GS.Models.Song.wrapCollectionInObject(b, {TSFavorited: "",TSAdded: ""});
            if (!this.library)
                this.library = GS.Models.Library.wrap({userID: this.UserID});
            for (g in this.favorites.songs)
                if (this.favorites.songs.hasOwnProperty(g)) {
                    a = 
                    this.favorites.songs[g];
                    if (this.isAuth) {
                        a.isFavorite = 1;
                        a.fromLibrary = 1
                    }
                    this.library.songs[a.SongID] = a.dupe()
                }
            return this.favorites.songs
        },loadUsersFavorites: function(a) {
            var b = {};
            for (var g in a)
                if (a.hasOwnProperty(g)) {
                    a[g].FollowingFlags = parseInt(a[g].FollowingFlags, 10);
                    b[a[g].UserID] = a[g];
                    if (this.isAuth)
                        a[g].isFavorite = 1
                }
            this.favorites.users = GS.Models.User.wrapCollectionInObject(b, {TSFavorited: "",TSAdded: "",FollowingFlags: 0});
            return this.favorites.users
        },getShortName: function() {
            var a = "";
            if (this.Name.length > 
            12) {
                for (var b = this.Name.split(" "), g = 0; g < b.length; g++)
                    if (a.length == 0 || b[g].length < 10 && a.length < 12) {
                        if (a.length)
                            a += " ";
                        a += b[g]
                    } else
                        return a;
                if (a > 12)
                    return a.substr(0, 12) + "&hellip;";
                return a
            }
            return this.Name
        },getPlaylists: function(a, b) {
            if (_.isEmpty(this.playlists))
                GS.service.userGetPlaylists(this.UserID, !this.isAuth, this.callback(["cachePlaylists", a]), b);
            else
                c.isFunction(a) && a()
        },cachePlaylists: function(a) {
            var b = {};
            a = a.Playlists;
            for (var g in a)
                if (a.hasOwnProperty(g)) {
                    a[g].UserName = this.Name;
                    a[g].FName = 
                    this.FName;
                    a[g].LName = this.LName;
                    a[g].UserID = this.UserID;
                    b[a[g].PlaylistID] = a[g]
                }
            g = this.playlists;
            this.playlists = GS.Models.Playlist.wrapCollectionInObject(b);
            if (this.isAuth) {
                _.forEach(g, function(h) {
                    _.defined(this.playlists[h.PlaylistID]) || (this.playlists[h.PlaylistID] = h)
                }, this);
                c.publish("gs.auth.playlists.update")
            }
        },getProfileFeed: function(a, b) {
            if (!this.profileFeed)
                this.profileFeed = GS.Models.ProfileFeed.wrap({user: this});
            this.profileFeed.getFeed(this.callback(a), b)
        },getCommunityExceptions: function() {
            return this.isAuth ? 
            this.filterFriends(1) : this.favorites.users
        },getCommunityFeed: function(a, b) {
            var g = [];
            if (!this.communityFeed)
                this.communityFeed = GS.Models.CommunityFeed.wrap({user: user});
            if (this.isAuth)
                g = _.toArrayID(this.getCommunityExceptions());
            if (this.UserID > 0) {
                this.communityFeed.userIDs = g;
                this.communityFeed.getFeed(this.callback(a), b)
            }
        },playUserRadio: function() {
        },filterFriends: function(a, b) {
            var g = {};
            if (b)
                for (var h in this.favorites.users)
                    this.favorites.users[h].FollowingFlags & a || (g[h] = this.favorites.users[h]);
            else
                for (h in this.favorites.users)
                    if (this.favorites.users[h].FollowingFlags & 
                    a)
                        g[h] = this.favorites.users[h];
            return g
        },getRecentlyActiveUsersFeed: function(a, b) {
            this.recentActiveUsersFeed.getFeed(this.callback(a), b)
        },getVipPackage: function() {
            var a = "";
            if (this.Flags & GS.Models.User.FLAG_ANYWHERE)
                a = "anywhere";
            else if (this.Flags & GS.Models.User.FLAG_PLUS)
                a = "plus";
            else if (this.Flags & GS.Models.User.FLAG_LITE)
                a = "lite";
            return a
        },getAccountDuration: function() {
            var a = {};
            if (this.TSAdded) {
                var b = this.TSAdded.split(" ");
                if (b) {
                    b = b[0].split("-");
                    var g = new Date;
                    a = parseInt(g.getFullYear() - parseInt(b[0]));
                    b = parseInt(g.getMonth() - parseInt(b[1]) + 1);
                    if (b < 0) {
                        a--;
                        b = 12 + parseInt(b)
                    }
                    a = {months: b,years: a};
                    a.key = a.years > 0 ? a.years == 1 ? "USER_MEMBER_FOR_YEAR" : "USER_MEMBER_FOR_YEARS" : a.months < 1 ? "USER_MEMBER_LESS_THAN_MONTH" : a.months == 1 ? "USER_MEMBER_FOR_MONTH" : "USER_MEMBER_FOR_MONTHS"
                }
            }
            return a
        },toUrl: function(a) {
            return this.PathName ? _.makeUrlFromPathName(this.PathName, a) : _.cleanUrl(this.UserID ? this.Name : "New User", this.UserID, "user", null, a)
        },getPageNameData: function(a) {
            if (_.isEmpty(this.PageNameData))
                GS.service.getPageInfoByIDType(this.UserID, 
                "user", this.callback(this._onPageNameDataSuccess, a), this.callback(this._onPageNameDataFailed, a));
            else
                c.isFunction(a) && a(this.PageNameData)
        },_onPageNameDataSuccess: function(a, b) {
            this.PageNameData = _.orEqual(b.Data, {});
            this.PageNameData.CollabPlaylists && this._updateCollabPlaylists();
            if (b.Name)
                this.PathName = b.Name;
            else {
                this.PathName = "";
                this.PathNameEmpty = true
            }
            c.isFunction(a) && a(this.PageNameData);
            if (this.UserID == GS.user.UserID) {
                c.publish("gs.auth.user.pathName");
                c.publish("gs.auth.user.collabPlaylists")
            }
        },
        _onPageNameDataFailed: function(a, b) {
            this.PageNameData = {};
            this._onPathNameFailed(null, b);
            c.isFunction(a) && a(this.PageNameData)
        },_updateCollabPlaylists: function(a) {
            var b = [], g, h;
            if (this.PageNameData.CollabPlaylists)
                for (h in this.PageNameData.CollabPlaylists)
                    if (this.PageNameData.CollabPlaylists.hasOwnProperty(h)) {
                        p = this.PageNameData.CollabPlaylists[h];
                        a || (g = GS.Models.Playlist.getOneFromCache(h));
                        p.PlaylistName = _.orEqual(p.PlaylistName, p.Name);
                        p.PlaylistID = _.orEqual(p.PlaylistID, h);
                        p.Collaborative = _.orEqual(p.Collaborative, 
                        true);
                        p.Collaborators = _.orEqual(p.Collaborators, []);
                        p.Collaborators[GS.user.UserID] = GS.user;
                        if (!a && g) {
                            this.UserID == GS.user.UserID && g._updateUserPageNameData();
                            b.push(g);
                            p.Name = g.PlaylistName
                        } else
                            b.push(GS.Models.Playlist.wrap(p, false))
                    }
            this.collabPlaylists = b;
            c.publish("gs.auth.user.collabPlaylists.update")
        },getPathName: function(a) {
            if (this.PathName || this.PathNameEmpty)
                c.isFunction(a) && a(this.PathName);
            else
                this.UserID > 0 && GS.service.getPageNameByIDType(this.UserID, "user", this.callback(this._onPathNameSuccess, 
                a), this.callback(this._onPathNameFailed, a))
        },_onPathNameSuccess: function(a, b) {
            if (b.name)
                this.PathName = b.name;
            else {
                this.PathName = "";
                this.PathNameEmpty = true
            }
            c.isFunction(a) && a(this.PathName);
            this.UserID == GS.user.UserID && c.publish("gs.auth.user.pathName")
        },_onPathNameFailed: function(a) {
            this.PathName = "";
            this.PathNameEmpty = true;
            c.isFunction(a) && a(this.PathName)
        },getImageURL: function(a) {
            a = _.orEqual(a, 70);
            var b = GS.Models.User.artPath + a + "_user.png";
            if (this.Picture)
                b = GS.Models.User.artPath + a + "_" + this.Picture;
            return b
        },getDetailsForFeeds: function() {
            return {userID: this.UserID,userName: this.Name,isPremium: this.IsPremium,location: this.location,picture: this.Picture}
        },getTitle: function() {
            return this.Name
        },getIsFavorite: function(a, b) {
            if (!b || !a)
                return false;
            a = a.toLowerCase();
            b = b.toString();
            switch (a) {
                case "playlist":
                    return Boolean(this.favorites.playlists[b]);
                case "song":
                    return Boolean(this.favorites.songs[b]);
                case "artist":
                    return Boolean(this.favorites.artists[b]);
                case "user":
                    return Boolean(this.favorites.users[b])
            }
            return false
        },
        getContextMenu: function() {
            var a = [];
            if (GS.user.UserID != this.UserID)
                GS.user.getIsFavorite("user", this.UserID) ? a.push({title: c.localize.getString("CONTEXT_UNFOLLOW"),customClass: "last jj_menu_item_hasIcon jj_menu_item_unfollow",action: {type: "fn",callback: this.callback(function() {
                            GS.user.removeFromUserFavorites(this.UserID)
                        })}}) : a.push({title: c.localize.getString("CONTEXT_FOLLOW"),customClass: "last jj_menu_item_hasIcon jj_menu_item_follow",action: {type: "fn",callback: this.callback(function() {
                            GS.user.addToUserFavorites(this.UserID, 
                            true)
                        })}});
            return a
        },toString: function(a) {
            return (a = _.orEqual(a, false)) ? ["User. uid: ", this.UserID, ", uname:", this.Name].join("") : _.cleanText(this.Name)
        }})
})(jQuery);
(function() {
    GS.Models.Base.extend("GS.Models.Library", {}, {currentPage: 0,userID: null,lastModified: 0,songsLoaded: false,init: function(c) {
            this._super(c);
            this.songsLoaded = false;
            this.lastModified = this.currentPage = 0;
            this.songs = {}
        },getSongs: function(c, a) {
            if (this.songsLoaded) {
                this.songs = this.wrapSongCollection(this.songs, {TSAdded: "",TSFavorited: ""});
                c(this.songs)
            } else
                GS.service.userGetSongsInLibrary(this.userID, this.currentPage, !(GS.user && GS.user.UserID === this.userID), this.callback(["saveLastModified", "loadSongs", 
                    c]), a)
        },reloadLibrary: function(c, a) {
            this.songsLoaded = false;
            this.lastModified = this.currentPage = 0;
            this.songs = {};
            this.getSongs(c, a)
        },loadSongs: function(c) {
            return this.wrapSongCollection(c, {TSAdded: "",TSFavorited: "",fromLibrary: GS.user.UserID == this.userID ? 1 : 0})
        },saveLastModified: function(c) {
            this.lastModified = c.TSModified;
            return c
        },refreshLibrary: function(c) {
            c.TSModified > this.lastModified && this.reloadLibrary(null, null, false)
        }})
})(jQuery);
(function(c) {
    GS.Models.Base.extend("GS.Models.Station", {id: "StationID",TAG_STATIONS: [{StationID: 136,StationTitle: "STATION_INDIE",TagID: 136}, {StationID: 67,StationTitle: "STATION_ELECTRONICA",TagID: 67}, {StationID: 750,StationTitle: "STATION_CLASSICAL",TagID: 750}, {StationID: 56,StationTitle: "STATION_POP",TagID: 56}, {StationID: 3,StationTitle: "STATION_RAP",TagID: 3}, {StationID: 80,StationTitle: "STATION_COUNTRY",TagID: 80}, {StationID: 13,StationTitle: "STATION_ALTERNATIVE",TagID: 13}, {StationID: 29,StationTitle: "STATION_HIP_HOP",
                TagID: 29}, {StationID: 3529,StationTitle: "STATION_CLASSIC_ROCK",TagID: 3529}, {StationID: 75,StationTitle: "STATION_AMBIENT",TagID: 75}, {StationID: 111,StationTitle: "STATION_PUNK",TagID: 111}, {StationID: 9,StationTitle: "STATION_90S_ALT_ROCK",TagID: 9}, {StationID: 230,StationTitle: "STATION_BLUES",TagID: 230}, {StationID: 12,StationTitle: "STATION_ROCK",TagID: 12}, {StationID: 43,StationTitle: "STATION_JAZZ",TagID: 43}, {StationID: 4,StationTitle: "STATION_RNB",TagID: 4}, {StationID: 122,StationTitle: "STATION_FOLK",TagID: 122}, 
            {StationID: 2563,StationTitle: "STATION_DUBSTEP",TagID: 2563}, {StationID: 55,StationTitle: "STATION_80s",TagID: 55}, {StationID: 69,StationTitle: "STATION_TRANCE",TagID: 69}, {StationID: 96,StationTitle: "STATION_BLUEGRASS",TagID: 96}, {StationID: 160,StationTitle: "STATION_REGGAE",TagID: 160}, {StationID: 17,StationTitle: "STATION_METAL",TagID: 17}, {StationID: 102,StationTitle: "STATION_OLDIES",TagID: 102}, {StationID: 191,StationTitle: "STATION_EXPERIMENTAL",TagID: 191}, {StationID: 528,StationTitle: "STATION_LATIN",TagID: 528}],
        tagStations: [],extraStations: {},stationsByName: {},getStationsStartMenu: function() {
            for (var a = [], b, g = function(m) {
                return function() {
                    GS.player.setAutoplay(true, m)
                }
            }, h = 0; h < GS.Models.Station.tagStations.length; h++) {
                b = GS.Models.Station.tagStations[h];
                a.push({title: c.localize.getString(b.StationTitle),customClass: "jj_menu_item_hasIcon jj_menu_item_station",action: {type: "fn",callback: g(b.TagID)}})
            }
            a.sort(function(m, k) {
                var n = m.title.toLowerCase(), o = k.title.toLowerCase();
                return n == o ? 0 : n > o ? 1 : -1
            });
            return a
        },getStationsStartMenuForPinboard: function() {
            for (var a = 
            [], b, g = function(m) {
                return function() {
                    GS.user.addToShortcuts("station", m, true)
                }
            }, h = 0; h < GS.Models.Station.tagStations.length; h++) {
                b = GS.Models.Station.tagStations[h];
                GS.user.getIsShortcut("station", b.TagID) || a.push({title: c.localize.getString(b.StationTitle),customClass: "jj_menu_item_hasIcon jj_menu_item_station",action: {type: "fn",callback: g(b.TagID)}})
            }
            a.sort(function(m, k) {
                var n = m.title.toLowerCase(), o = k.title.toLowerCase();
                return n == o ? 0 : n > o ? 1 : -1
            });
            return a
        },getStationByName: function(a) {
            if (c.localize.ready && 
            GS.getLocale && GS.Models.Station.stationsByName.locale != GS.getLocale().locale) {
                GS.Models.Station.stationsByName = {};
                _.forEach(GS.Models.Station.TAG_STATIONS, function(b) {
                    var g = c.localize.getString(b.StationTitle).toLowerCase();
                    GS.Models.Station.stationsByName[g] = b
                }, this);
                GS.Models.Station.stationsByName.locale = GS.getLocale().locale
            }
            if (GS.Models.Station.stationsByName[a])
                return GS.Models.Station.stationsByName[a];
            return false
        },FeedStation: null,lastHeardFeedEvent: 0,init: function() {
            c.subscribe("gs.player.nowplaying", 
            this.callback("onSongPlay"));
            c.subscribe("gs.app.ready", this.callback(function() {
                _.forEach(GS.Models.Station.TAG_STATIONS, function(a) {
                    GS.Models.Station.tagStations.push(GS.Models.Station.wrap(a))
                }, this)
            }))
        },setFeedStation: function(a) {
            if (a && this.Station !== a) {
                this.lastHeardFeedEvent = 0;
                a.playSongs(-1, true)
            }
            GS.Models.Station.FeedStation = a
        },onSongPlay: function() {
            if (this.Station) {
                GS.Models.Feed.Station.play(-1, false, GS.Models.Feed.lastHeardFeedEvent);
                GS.Models.Feed.lastHeardFeedEvent = GS.Models.Feed.Station.newestTime
            }
        },
        itemRenderer: function(a, b) {
            return b = ['<a class="name ellipsis" href="#!/station/-/', a, '">', b, "</a>"].join("")
        },makeChristmasHappen: function() {
            GS.player.setAutoplay(true, 703)
        }}, {StationID: 0,TagID: 0,StationTitle: "",StationName: "",Artists: [],init: function(a) {
            this._super(a);
            this.StationName = c.localize.getString(a.StationTitle);
            if (!this.StationName)
                this.StationName = this.StationTitle
        },toProxyLabel: function() {
            return _.cleanText(c.localize.getString(this.StationTitle))
        },getContextMenu: function() {
            var a = [];
            a.push({title: c.localize.getString("CONTEXT_START_STATION"),customClass: "jj_menu_item_hasIcon jj_menu_item_station",action: {type: "fn",callback: this.callback(function() {
                        GS.player.setAutoplay(true, this.TagID)
                    })}});
            a.push({title: c.localize.getString("CONTEXT_ADD_TO_PINBOARD"),customClass: "jj_menu_item_hasIcon jj_menu_item_pinboard",action: {type: "fn",callback: this.callback(function() {
                        GS.user.addToShortcuts("station", this.StationID, true)
                    })}});
            return a
        }})
})(jQuery);
(function(c) {
    c.Model.extend("GS.Models.PlayContext", {}, {type: null,data: null,init: function(a, b) {
            this.type = _.orEqual(a, "unknown");
            this.data = _.orEqual(b, {});
            var g;
            if (this.type === "album" && this.data.hasOwnProperty("CoverArtFilename"))
                g = this.data.CoverArtFilename;
            if (c.isFunction(this.data.getDetailsForFeeds))
                this.data = this.data.getDetailsForFeeds();
            if (g)
                this.data.CoverArtFilename = g
        }})
})(jQuery);
(function(c) {
    c.fn.dataString = function() {
        if (arguments.length === 0)
            return _.orEqual(this.data("DataString"), null);
        var a = new GS.Models.DataString(arguments[0], arguments[1]);
        a.hookup(this);
        return a
    };
    c.fn.localeDataString = function(a, b, g) {
        a = _.orEqual(a, "");
        b = _.orEqual(b, {});
        g = _.orEqual(g, false);
        var h = c(this).dataString();
        if (!h) {
            h = new GS.Models.DataString;
            h.hookup(this)
        }
        h.string = c.localize.getString(a);
        h.data = b;
        g ? c(this).attr("data-translate-title", a).attr("title", h.render()) : c(this).attr("data-translate-text", 
        a).html(h.render());
        return h
    };
    c.Model.extend("GS.Models.DataString", {dateString: function(a) {
            var b, g = {};
            b = new Date;
            var h = b.getTime() - a.getTime(), m = GS.getLocale();
            if (h < 6E4)
                b = c.localize.getString("SECONDS_AGO");
            else if (h < 36E5) {
                b = c.localize.getString("MINUTES_AGO");
                g = {minutes: Math.ceil(h / 6E4)}
            } else if (h < 432E5 || b.getDate() == a.getDate() && h < 6048E5) {
                b = c.localize.getString("HOURS_AGO");
                g = {hours: Math.ceil(h / 36E5)}
            } else if (b.getDate() - 1 == a.getDate() && h < 6048E5) {
                b = c.localize.getString("YESTERDAY_AGO");
                g = {time: a.format("g:i a")}
            } else if (h < 
            6048E5) {
                b = c.localize.getString("DAY_AGO");
                g = {day: m.daysOfWeek[a.getDay()],time: a.format("g:i a")}
            } else {
                b = c.localize.getString("OVER_A_WEEK_AGO");
                g = {day: m.daysOfWeek[a.getDay()],date: a.format("F jS Y")}
            }
            return new GS.Models.DataString(b, g)
        }}, {string: null,data: null,element: null,init: function(a, b) {
            this.string = _.orEqual(a, "");
            this.data = _.orEqual(b, {})
        },setString: function(a) {
            if (this.string !== a) {
                this.string = a;
                this.render()
            }
        },setData: function(a, b) {
            if (this.data[a] !== b) {
                this.data[a] = b;
                this.render()
            }
        },hookup: function(a) {
            this.element = 
            c(a);
            this.element.data("DataString", this)
        },render: function() {
            for (var a = this.string, b = [], g, h = /^[^\{]+/, m = /^\{(.*?)\}/, k = this.data; a; ) {
                if (g = h.exec(a))
                    b.push(g[0]);
                else if (g = m.exec(a)) {
                    var n = g[1];
                    k[n] ? b.push(k[n]) : b.push(g[0])
                } else
                    throw "Error rendering data object";
                a = a.substring(g[0].length)
            }
            a = b.join("");
            if (this.element && this.element.length)
                this.element[0].tagName == "INPUT" ? this.element.val(a) : this.element.html(a);
            return a
        }})
})(jQuery);
(function(c) {
    GS.Models.User.extend("GS.Models.AuthUser", {id: "AuthUserID",cache: {},loggedOutPlaylistCount: 0,wrap: function(a) {
            return this._super(a, false)
        },wrapFromService: function(a) {
            return this.wrap(c.extend({}, a, {Email: a.Email || a.email,Sex: a.Sex || a.sex,UserID: a.UserID || a.userID,IsPremium: a.IsPremium || a.isPremium,FName: a.FName || a.fName,LName: a.LName || a.lName,TSDOB: a.TSDOB || a.tsDOB,Flags: a.Flags || a.flags,Username: a.Username || a.username,Privacy: _.orEqualEx(a.Privacy, a.privacy, 0)}))
        }}, {authRealm: 1,authToken: "",
        autoAutoplay: false,badAuthToken: false,favoritesLimit: 500,librarySizeLimit: 5E3,themeID: "",uploadsEnabled: 0,UserID: -1,Username: "",Email: "",City: "",Country: "",State: "",TSDOB: "",Privacy: 0,Flags: 0,Points: 0,settings: null,isLoggedIn: false,isAuth: true,artistsPlayed: [],defaultStations: ["750", "12", "136", "3", "56", "67"],defaultFromService: null,searchVersion: "",promotions: {},userFavoritesLoaded: false,userTrackingID: 0,songPlays: 0,notificationsFeed: null,PageNameData: {},init: function(a) {
            this._super(a);
            this.defaultFromService = 
            {};
            this.refreshLibraryStatic = this.callback(this.refreshLibrary);
            this.library.songs = {};
            this.playlists = {};
            this.favorites = {songs: {},albums: {},artists: {},playlists: {},users: {}};
            this.sidebarLoaded = false;
            this.sidebar = {playlists: [],stations: [],subscribedPlaylists: [],songs: [],artists: [],albums: [],meta: {playlists: {},stations: {},subscribedPlaylists: {},songs: {},artists: {},albums: {}}};
            this.settings = GS.Models.UserSettings.wrap({UserID: this.UserID});
            this._pointsDirty = true;
            this.Points = 0;
            if (this.UserID > 0) {
                this.isLoggedIn = 
                true;
                this.getPlaylists();
                this.getFavorites();
                this.getSidebar();
                this.getLibrary();
                this.handleLiveRamp();
                this.getPageNameData();
                this.notificationsFeed = GS.Models.NotificationsFeed.wrap({user: this})
            } else {
                this.isDirty = this.isLoggedIn = false;
                this.sidebarLoaded = true;
                this.sidebar.stations = this.defaultStations.concat()
            }
            this.artistsPlayed = GS.store.get("artistsPlayed" + this.UserID) || [];
            c.subscribe("gs.player.nowplaying", this.callback(this.onSongPlay));
            setTimeout(function() {
                c.publish("gs.auth.stations.update")
            }, 
            10);
            var b = 0;
            if (this.Flags & GS.Models.User.FLAG_ANYWHERE)
                b = 8;
            else if (this.Flags & GS.Models.User.FLAG_PLUS)
                b = 6;
            else if (this.Flags & GS.Models.User.FLAG_LITE)
                b = 21;
            else if (this.IsPremium)
                b = 8;
            this.subscription = new GS.Models.Subscription({SubscriptionTypeID: b});
            setTimeout(this.callback(function() {
                GS.user.UserID === a.UserID && this.checkVipExpiring()
            }), 54E4);
            this.searchVersion = "";
            this.hipsterFailCount = 0
        },uploadComplete: function() {
            var a = this.toUrl("music");
            this.library.reloadLibrary(function() {
                GS.router.setHash(a)
            })
        },
        getNotifications: function(a, b) {
            this.UserID > 0 && this.notificationsFeed.getFeed(a, b)
        },setLastSeenNotification: function() {
            store.set(this.UserID + "_notificationTimestamp", this.notificationsFeed.events[0] ? this.notificationsFeed.events[0].timestamp : 0)
        },getLastSeenNotification: function() {
            return store.get(this.UserID + "_notificationTimestamp")
        },onSongPlay: function(a) {
            if (this === GS.user) {
                if (a && a.ArtistID) {
                    var b = this.artistsPlayed.indexOf(a.ArtistID);
                    b != -1 && this.artistsPlayed.splice(b, 1);
                    this.artistsPlayed.unshift(a.ArtistID);
                    this.artistsPlayed.splice(999, 1)
                }
                this.songPlays++;
                this.songPlays == 10 && this.UserID <= 0 && GS.page.activePageName != "SignupController" && GS.getLightbox().open("signupNow")
            }
        },storeData: function() {
            var a;
            if (_.isEmpty(this.library.songs))
                a = null;
            else {
                a = {currentPage: this.library.currentPage,songsLoaded: this.library.songsLoaded,userID: this.library.userID,lastModified: this.library.lastModified,songs: {}};
                for (var b in this.library.songs)
                    if (this.library.songs.hasOwnProperty(b))
                        a.songs[b] = GS.Models.Song.archive(this.library.songs[b])
            }
            this.settings.changeLocalSettings({});
            GS.store.set("artistsPlayed" + this.UserID, this.artistsPlayed);
            GS.store.set("library" + this.UserID, a)
        },clearData: function() {
            GS.store.remove("library" + this.UserID)
        },createPlaylist: function(a, b, g, h, m, k) {
            k = _.orEqual(k, true);
            b = _.orEqual(b, []);
            if (this.isLoggedIn)
                GS.service.createPlaylist(a, b, g, this.callback(["createPlaylistSuccess"], {callback: h,name: a,songIDs: b,description: g,notify: k}), m);
            else {
                GS.Models.AuthUser.loggedOutPlaylistCount++;
                g = GS.Models.Playlist.wrap({PlaylistID: -GS.Models.AuthUser.loggedOutPlaylistCount,
                    PlaylistName: a,UserName: this.Name,UserID: this.UserID,songsLoaded: true,TSAdded: (new Date).format("Y-m-d G:i:s"),Description: g});
                g.addSongs(b, 0, true);
                this.playlists[g.PlaylistID] = g;
                this.isDirty = true;
                c.publish("gs.auth.playlists.update");
                c.publish("gs.auth.playlists.add", g);
                k && c.publish("gs.notification.playlist.create", g);
                h(g)
            }
            GS.getGuts().logEvent("playlistCreated", {playlistName: a});
            GS.getGuts().gaTrackEvent("user", "newPlaylist")
        },createPlaylistSuccess: function(a, b) {
            var g = GS.Models.Playlist.wrap({PlaylistID: b,
                PlaylistName: a.name,Description: a.description,UserID: this.UserID,UserName: this.Name,FName: this.Name,TSAdded: (new Date).format("Y-m-d G:i:s"),NumSongs: a.songIDs.length});
            this.playlists[g.PlaylistID] = g;
            c.publish("gs.auth.playlists.update");
            a.notify && c.publish("gs.notification.playlist.create", g);
            a.callback(g)
        },deletePlaylist: function(a, b) {
            var g = GS.Models.Playlist.getOneFromCache(a);
            if (g && g.UserID === this.UserID) {
                b = _.orEqual(b, true);
                if (this.isLoggedIn)
                    GS.service.deletePlaylist(g.PlaylistID, g.PlaylistName, 
                    this.callback(function() {
                        g.isDeleted = true;
                        this.removeFromShortcuts("playlist", g.PlaylistID, false);
                        delete this.playlists[g.PlaylistID];
                        c.publish("gs.playlist.view.update", g);
                        c.publish("gs.auth.playlists.update");
                        c.publish("gs.user.playlist.remove");
                        if (b) {
                            var h = (new GS.Models.DataString(c.localize.getString("POPUP_DELETE_PLAYLIST_MSG"), {playlist: g.PlaylistName})).render();
                            c.publish("gs.notification", {type: "notice",message: h})
                        }
                    }), this.callback(function() {
                        g.isDeleted = false;
                        if (b) {
                            var h = (new GS.Models.DataString(c.localize.getString("POPUP_FAIL_DELETE_PLAYLIST_MSG"), 
                            {playlist: g.PlaylistName})).render();
                            c.publish("gs.notification", {type: "error",message: h})
                        }
                    }));
                else {
                    g.isDeleted = true;
                    this.removeFromShortcuts("playlist", g.PlaylistID, false);
                    delete this.playlists[g.PlaylistID];
                    c.publish("gs.playlist.view.update", g);
                    c.publish("gs.auth.playlists.update");
                    c.publish("gs.user.playlist.remove");
                    b && c.publish("gs.notification", {type: "notice",message: c.localize.getString("NOTIFICATION_PLAYLIST_DELETED")})
                }
            }
            GS.getGuts().gaTrackEvent("user", "deletePlaylist")
        },restorePlaylist: function(a, 
        b) {
            var g = GS.Models.Playlist.getOneFromCache(a);
            if (g && g.UserID === this.UserID) {
                b = _.orEqual(b, true);
                if (this.isLoggedIn)
                    GS.service.playlistUndelete(g.PlaylistID, this.callback(function() {
                        g.isDeleted = false;
                        this.playlists[g.PlaylistID] = g;
                        c.publish("gs.playlist.view.update", g);
                        b && c.publish("gs.notification", {type: "notice",message: c.localize.getString("NOTIFICATION_PLAYLIST_RESTORED")})
                    }), function() {
                        b && c.publish("gs.notification", {type: "error",message: c.localize.getString("NOTIFICATION_PLAYLIST_RESTORE_FAIL")})
                    });
                else {
                    g.isDeleted = false;
                    this.playlists[g.PlaylistID] = g;
                    c.publish("gs.playlist.view.update", g);
                    b && c.publish("gs.notification", {type: "notice",message: c.localize.getString("NOTIFICATION_PLAYLIST_RESTORED")})
                }
            }
            GS.getGuts().gaTrackEvent("user", "restorePlaylist")
        },getSidebar: function() {
            GS.service.getUserSidebar(this.callback("loadSidebar"))
        },loadSidebar: function(a) {
            this.sidebarLoaded = true;
            if (c.isArray(a.meta))
                a.meta = {};
            this.sidebar = c.extend(true, this.sidebar, a);
            c.publish("gs.auth.sidebar.loaded");
            if (this.sidebar.stations.length === 
            0) {
                var b = this;
                _.forEach(this.defaultStations, function(g) {
                    b.addToShortcuts("station", g, "", false)
                })
            }
        },getFavorites: function() {
            var a = this;
            _.forEach(["Albums", "Artists", "Playlists", "Songs", "Users"], function(b) {
                GS.service.getFavorites(a.UserID, b, false, a.callback("load" + b + "Favorites"))
            })
        },loadAlbumsFavorites: function(a) {
            _.forEach(this.favorites.albums, function(b) {
                a.push(b)
            });
            this._super(a);
            c.publish("gs.auth.favorites.albums.update")
        },loadArtistsFavorites: function(a) {
            _.forEach(this.favorites.artists, function(b) {
                a.push(b)
            });
            this._super(a);
            c.publish("gs.auth.favorites.artists.update")
        },loadPlaylistsFavorites: function(a) {
            _.forEach(this.favorites.playlists, function(b) {
                a.push(b)
            });
            this._super(a);
            c.publish("gs.auth.favorites.playlists.update")
        },loadSongsFavorites: function(a) {
            _.forEach(this.favorites.songs, function(b) {
                a.push(b)
            });
            this._super(a);
            c.publish("gs.auth.favorites.songs.update")
        },loadUsersFavorites: function(a) {
            _.forEach(this.favorites.users, function(b) {
                a.push(b)
            });
            this._super(a);
            this.userFavoritesLoaded = true;
            c.publish("gs.auth.favorites.users.update")
        },
        getLibrary: function() {
            var a = GS.store.get("library" + this.UserID);
            if (a) {
                var b = a.songs;
                delete a.songs;
                this.library = GS.Models.Library.wrap(a);
                for (var g in b)
                    if (b.hasOwnProperty(g)) {
                        b[g] = GS.Models.Song.unarchive(b[g]);
                        b[g].fromLibrary = 1
                    }
                a = this.library.songs;
                this.library.songs = GS.Models.Song.wrapCollectionInObject(b, {TSAdded: "",TSFavorited: ""});
                _.forEach(a, function(h) {
                    _.defined(this.library.songs[h.SongID]) || (this.library.songs[h.SongID] = h)
                }, this);
                GS.service.userGetLibraryTSModified(this.UserID, this.callback("refreshLibrary"))
            } else {
                this.library = 
                GS.Models.Library.wrap({userID: this.UserID});
                this.library.getSongs(this.callback("loadLibrary"), false)
            }
        },refreshLibrary: function(a) {
            a.TSModified > this.library.lastModified ? this.library.reloadLibrary(function() {
                c.publish("gs.auth.library.update")
            }, null, false) : c.publish("gs.auth.library.update")
        },loadLibrary: function(a) {
            for (var b = 0; b < a.length; b++)
                this.library.songs[a[b].SongID] = a[b];
            c.publish("gs.auth.library.update");
            this.library.songsLoaded || this.library.getSongs(this.callback("loadLibrary"), false)
        },
        addToSongFavorites: function(a, b) {
            b = _.orEqual(b, true);
            if (!this.favorites.songs[a]) {
                var g = GS.Models.Song.getOneFromCache(a);
                if (!g)
                    throw "AUTH.ADDTOSONGFAVES. SONGID NOT IN CACHE: " + a;
                g = g.dupe();
                g.isFavorite = 1;
                g.fromLibrary = 1;
                g.TSFavorited = (new Date).format("Y-m-d G:i:s");
                if (!_.defined(g.TSAdded) || g.TSAdded === "")
                    g.TSAdded = g.TSFavorited;
                if (this.library.songs[a])
                    this.library.songs[a] = g;
                else {
                    this.library.songs[a] = g;
                    c.publish("gs.auth.library.add", g)
                }
                this.favorites.songs[a] = g.dupe();
                GS.getGuts().logEvent("objectFavorited", 
                {type: "song",id: a});
                c.publish("gs.auth.song.update", g);
                c.publish("gs.auth.favorites.songs.add", g);
                b && c.publish("gs.notification.favorite.song", g);
                if (this.isLoggedIn)
                    GS.service.favorite("Song", g.SongID, g.getDetailsForFeeds(), null, this.callback(this._favoriteFail, "Song", g));
                else
                    this.isDirty = true;
                GS.getGuts().gaTrackEvent("user", "favoriteSong")
            }
        },addToPlaylistFavorites: function(a, b) {
            b = _.orEqual(b, true);
            if (!this.favorites.playlists[a]) {
                var g = GS.Models.Playlist.getOneFromCache(a);
                if (!g)
                    throw "AUTH.ADDTOPLAYLISTFAVES. PLAYLISTID NOT IN CACHE: " + 
                    a;
                g.isFavorite = 1;
                g.TSFavorited = (new Date).format("Y-m-d G:i:s");
                this.favorites.playlists[a] = g;
                GS.getGuts().logEvent("objectFavorited", {type: "playlist",id: a});
                this.addToShortcuts("playlist", a, g.PlaylistName, false);
                c.publish("gs.auth.favorites.playlists.update");
                c.publish("gs.auth.playlist.update", g);
                c.publish("gs.auth.favorite.playlist", g);
                c.publish("gs.playlist.view.update", this);
                b && c.publish("gs.notification.favorite.playlist", g);
                if (this.isLoggedIn)
                    GS.service.favorite("Playlist", g.PlaylistID, g.getDetailsForFeeds(), 
                    null, this.callback(this._favoriteFail, "Playlist", g));
                else
                    this.isDirty = true;
                GS.getGuts().gaTrackEvent("user", "favoritePlaylist")
            }
        },removeFromPlaylistFavorites: function(a, b) {
            b = _.orEqual(b, true);
            var g = GS.Models.Playlist.getOneFromCache(a);
            if (g) {
                this.removeFromShortcuts("playlist", g.PlaylistID, false);
                g.isFavorite = 0;
                GS.Models.Playlist.cache[a] = g;
                delete this.favorites.playlists[a];
                GS.getGuts().logEvent("objectUnfavorited", {type: "playlist",id: a});
                c.publish("gs.auth.favorites.playlists.update");
                c.publish("gs.auth.playlist.update", 
                g);
                c.publish("gs.playlist.view.update", this);
                this.isLoggedIn && GS.service.unfavorite("Playlist", a);
                b && c.publish("gs.notification", {type: "notify",message: _.printf("NOTIFICATION_PLAYLIST_UNSUBSCRIBED", {playlist: g.PlaylistName})});
                GS.getGuts().gaTrackEvent("user", "unfavoritePlaylist")
            }
        },addToArtistFavorites: function(a, b) {
            b = _.orEqual(b, true);
            if (!this.favorites.artists[a]) {
                var g = GS.Models.Artist.getOneFromCache(a);
                if (!g)
                    throw "AUTH.ADDTOARTSTTFAVES. ARTISTID NOT IN CACHE: " + a;
                g.isFavorite = 1;
                g.TSFavorited = 
                (new Date).format("Y-m-d G:i:s");
                this.favorites.artists[a] = g;
                GS.getGuts().logEvent("objectFavorited", {type: "artist",id: a});
                c.publish("gs.auth.favorites.artists.update");
                b && c.publish("gs.notification.favorite.artist", g);
                if (this.isLoggedIn)
                    GS.service.favorite("Artist", g.ArtistID, g.getDetailsForFeeds(), null, this.callback(this._favoriteFail, "Artist", g));
                else
                    this.isDirty = true;
                GS.getGuts().gaTrackEvent("user", "favoriteArtist")
            }
        },removeFromArtistFavorites: function(a, b) {
            b = _.orEqual(b, true);
            var g = GS.Models.Artist.getOneFromCache(a);
            if (g) {
                g.isFavorite = 0;
                GS.Models.Artist.cache[a] = g;
                delete this.favorites.artists[a];
                GS.getGuts().logEvent("objectUnfavorited", {type: "artist",id: a});
                c.publish("gs.auth.favorites.artists.update");
                this.isLoggedIn && GS.service.unfavorite("Artist", a);
                b && c.publish("gs.notification", {type: "notify",message: c.localize.getString("NOTIFICATION_ARTIST_UNSUBSCRIBED")});
                GS.getGuts().gaTrackEvent("user", "unfavoriteArtist")
            }
        },removeFromSongFavorites: function(a, b) {
            b = _.orEqual(b, true);
            var g = this.favorites.songs[a];
            if (g) {
                g.isFavorite = 
                0;
                delete this.favorites.songs[a];
                GS.getGuts().logEvent("objectUnfavorited", {type: "song",id: a});
                this.library.songs[a] = g.dupe();
                c.publish("gs.auth.song.update", g);
                c.publish("gs.auth.favorites.songs.remove", g);
                this.isLoggedIn && GS.service.unfavorite("Song", g.SongID);
                if (b) {
                    g = {songLink: "<a class='songLink' rel='" + g.SongID + "'>" + g.SongName + "</a>",artistLink: "<a href='" + _.cleanUrl(g.ArtistName, g.ArtistID, "artist", null, null) + "'>" + g.ArtistName + "</a>"};
                    c.publish("gs.notification", {type: "notify",message: (new GS.Models.DataString(c.localize.getString("NOTIF_UNFAVORITED_SONG"), 
                        g)).render()})
                }
                GS.getGuts().gaTrackEvent("user", "unfavoriteSong")
            }
        },addToUserFavorites: function(a, b) {
            b = _.orEqual(b, true);
            if (!(!a || this.favorites.users[a])) {
                var g = GS.Models.User.getOneFromCache(a);
                if (!g || this.UserID === g.UserID)
                    this._favoriteFail("User", null);
                else {
                    g.isFavorite = 1;
                    this.favorites.users[a] = g;
                    GS.getGuts().logEvent("objectFavorited", {type: "user",id: a});
                    c.publish("gs.auth.favorites.users.update");
                    c.publish("gs.auth.user.update", g);
                    c.publish("gs.auth.favorite.user", g);
                    b && c.publish("gs.notification.favorite.user", 
                    g);
                    if (this.isLoggedIn)
                        GS.service.favorite("User", g.UserID, g.getDetailsForFeeds(), null, this.callback(this._favoriteFail, "User", g));
                    else
                        this.isDirty = true;
                    this.communityFeed.isDirty = true;
                    GS.getGuts().gaTrackEvent("user", "followUser")
                }
            }
        },removeFromUserFavorites: function(a) {
            var b = GS.Models.User.getOneFromCache(a);
            if (!(!b || this.UserID === b.UserID)) {
                b.isFavorite = 0;
                GS.Models.User.cache[a] = b;
                delete this.favorites.users[a];
                GS.getGuts().logEvent("objectUnfavorited", {type: "user",id: a});
                c.publish("gs.auth.favorites.users.update");
                c.publish("gs.auth.user.update", b);
                this.communityFeed.isDirty = true;
                this.isLoggedIn && GS.service.unfavorite("User", b.UserID);
                GS.getGuts().gaTrackEvent("user", "unfollowUser")
            }
        },changeFollowFlags: function(a) {
            if (this.isLoggedIn) {
                var b = false;
                for (var g in a)
                    if (a.hasOwnProperty(g))
                        if (!this.favorites.users[a[g].userID] || this.favorites.users[a[g].userID].FollowingFlags !== a[g].flags) {
                            b = true;
                            break
                        }
                b ? GS.service.changeFollowFlags(a, this.callback("changeFollowFlagsSuccess", a), this.callback("changeFollowFlagsFail")) : 
                this.changeFollowFlagsSuccess(a, {success: true})
            } else
                this.changeFollowFlagsFail()
        },changeFollowFlagsSuccess: function(a, b) {
            if (b.success) {
                for (var g in a)
                    if (a.hasOwnProperty(g))
                        if (this.favorites.users[a[g].userID])
                            this.favorites.users[a[g].userID].FollowingFlags = a[g].flags;
                this.communityFeed.isDirty = true;
                c.publish("gs.auth.favorites.users.update")
            } else
                this.changeFollowFlagsFail()
        },changeFollowFlagsFail: function() {
            c.publish("gs.notification", {message: c.localize.getString("SETTINGS_USER_HIDE_FAIL")})
        },
        addToLibrary: function(a, b) {
            b = _.orEqual(b, true);
            var g = [];
            a = c.makeArray(a);
            for (var h = 0; h < a.length; h++) {
                var m = a[h];
                if (!this.library.songs[m]) {
                    var k = GS.Models.Song.getOneFromCache(m);
                    if (k) {
                        k = k.dupe();
                        k.fromLibrary = 1;
                        if (this.favorites.songs[m])
                            k.isFavorite = 1;
                        if (!_.defined(k.TSAdded) || k.TSAdded === "")
                            k.TSAdded = (new Date).format("Y-m-d G:i:s");
                        this.library.songs[m] = k;
                        GS.getGuts().logEvent("songAddedToLibrary", {id: m});
                        c.publish("gs.auth.library.add", k);
                        c.publish("gs.auth.song.update", k);
                        g.push(k.getDetailsForFeeds())
                    }
                }
            }
            if (!_.isEmpty(g)) {
                if (this.isLoggedIn)
                    GS.service.userAddSongsToLibrary(g, 
                    this.callback("addToLibrarySuccess", b, g), this.callback("addtoLibraryFailed"));
                else {
                    this.isDirty = true;
                    this.addToLibrarySuccess(b, g)
                }
                GS.getGuts().gaTrackEvent("user", "addLibrarySong")
            }
        },addToLibrarySuccess: function(a, b, g) {
            a && c.publish("gs.auth.library.songsAdded", {songs: b});
            if (g) {
                tsAdded = parseInt(g.Timestamps.newTSModified, 10);
                parseInt(g.Timestamps.oldTSModified, 10) > this.library.lastModified && this.library.reloadLibrary(function() {
                    c.publish("gs.auth.library.update")
                }, null, false)
            } else
                tsAdded = _.unixTime();
            this.library.lastModified = tsAdded;
            a = (new Date(tsAdded * 1E3)).format("Y-m-d G:i:s");
            for (g = 0; g < b.length; g++)
                this.library.songs[b[g].songID].TSAdded = a
        },_favoriteFail: function(a, b) {
            var g = "NOTIFICATION_LIBRARY_ADD_FAIL", h = {};
            if (b)
                switch (a) {
                    case "Song":
                        g += "_SONG";
                        h.name = b.SongName;
                        break;
                    case "Playlist":
                        g += "_PLAYLIST";
                        h.name = b.PlaylistName;
                        break;
                    case "User":
                        g += "_USER";
                        h.name = b.Name;
                        break
                }
            c.publish("gs.notification", {type: "error",message: (new GS.Models.DataString(c.localize.getString(g), h)).render()})
        },addToLibraryFailed: function() {
            var a = 
            {numSongs: songIDsToAdd.length};
            c.publish("gs.notification", {type: "error",message: (new GS.Models.DataString(c.localize.getString(songIDsToAdd.length > 1 ? "NOTIFICATION_LIBRARY_ADD_SONGS_FAIL" : "NOTIFICATION_LIBRARY_ADD_SONG_FAIL"), a)).render()})
        },removeFromLibrary: function(a, b) {
            b = _.orEqual(b, true);
            a = c.makeArray(a);
            for (var g = [], h = [], m = [], k = 0; k < a.length; k++) {
                var n = a[k], o = this.library.songs[n];
                if (o) {
                    delete this.library.songs[n];
                    GS.getGuts().logEvent("songRemovedFromLibrary", {id: n});
                    delete this.favorites.songs[n];
                    o.fromLibrary = 0;
                    o.isFavorite = 0;
                    GS.Models.Song.cache[o.SongID] = o;
                    c.publish("gs.auth.library.remove", o);
                    c.publish("gs.auth.song.update", o);
                    g.push(o.SongID);
                    h.push(o.ArtistID);
                    m.push(o.AlbumID)
                } else
                    console.warn("removing song not in library!", n)
            }
            if (!_.isEmpty(g)) {
                if (this.isLoggedIn) {
                    GS.service.userRemoveSongsFromLibrary(this.UserID, g, m, h, this.callback("removeFromLibrarySuccess", b, g), this.callback("removeFromLibraryFailed", o));
                    GS.service.unfavorite("Song", o.SongID)
                } else
                    this.removeFromLibrarySuccess(b, 
                    g);
                GS.getGuts().gaTrackEvent("user", "removeLibrarySong")
            }
        },removeFromLibrarySuccess: function(a, b, g) {
            if (g) {
                parseInt(g.Timestamps.oldTSModified, 10) > this.library.lastModified && this.library.reloadLibrary(function() {
                    c.publish("gs.auth.library.update")
                }, null, false);
                this.library.lastModified = parseInt(g.Timestamps.newTSModified, 10)
            }
            if (a) {
                a = GS.Models.Song.getOneFromCache(b[0]);
                !a || !a.SongName || b.length > 1 ? c.publish("gs.notification", {message: _.getString("NOTIFICATION_LIBRARY_REMOVE_SONGS", {numSongs: b.length})}) : 
                c.publish("gs.notification", {message: _.getString("NOTIFICATION_LIBRARY_REMOVE_SONG", {song: a.SongName})})
            }
        },removeFromLibraryFailed: function() {
            c.publish("gs.notification", {type: "error",message: c.localize.getString("NOTIFICATION_LIBRARY_REMOVE_FAIL")})
        },getIsShortcut: function(a, b) {
            if (!b || !a)
                return false;
            a = a.toLowerCase();
            b = b.toString();
            switch (a) {
                case "playlist":
                    return this.sidebar.playlists.indexOf(b) > -1 || this.sidebar.subscribedPlaylists.indexOf(b) > -1;
                case "station":
                    return this.sidebar.stations.indexOf(b) > 
                    -1;
                case "song":
                    return this.sidebar.songs.indexOf(b) > -1;
                case "artist":
                    return this.sidebar.artists.indexOf(b) > -1;
                case "album":
                    return this.sidebar.albums.indexOf(b) > -1
            }
            return false
        },addToShortcuts: function(a, b, g, h) {
            h = _.orEqual(h, true);
            a = a.toLowerCase();
            var m = b.toString();
            switch (a) {
                case "playlist":
                    a = GS.Models.Playlist.getOneFromCache(b);
                    if (!a)
                        return;
                    a = a.UserID === this.UserID ? "playlists" : "subscribedPlaylists";
                    break;
                case "station":
                case "song":
                case "artist":
                case "album":
                    a = a + "s";
                    break;
                default:
                    return
            }
            if (this.sidebar[a].indexOf(m) === 
            -1) {
                this.sidebar[a].unshift(m);
                this.sidebar.meta[a][b] = g;
                c.publish("gs.auth.pinboard.update", {type: a});
                if (this.isLoggedIn)
                    GS.service.addShortcutToUserSidebar(a, b, g, this.callback(this._addShortcutSuccess, a, b, h), this.callback(this._addShortcutFailed, a, b, h));
                else {
                    this.isDirty = true;
                    this._addShortcutSuccess(a, b, h, {})
                }
                GS.getGuts().gaTrackEvent("user", "addShortcut")
            }
        },_addShortcutSuccess: function(a, b, g) {
            var h, m = {};
            switch (a) {
                case "playlists":
                case "subscribedPlaylists":
                    if (a = GS.Models.Playlist.getOneFromCache(b)) {
                        h = 
                        "NOTIFICATION_PLAYLIST_PINBOARD_ADD_SUCCESS";
                        m.playlist = a.PlaylistName;
                        c.publish("gs.playlist.view.update", a)
                    }
                    break;
                case "stations":
                    a = GS.Models.Station.getOneFromCache(b);
                    h = "NOTIFICATION_STATION_PINBOARD_ADD_SUCCESS";
                    m.station = c.localize.getString(a.StationTitle);
                    break;
                case "songs":
                    if (a = GS.Models.Song.getOneFromCache(b)) {
                        h = "NOTIFICATION_SONG_PINBOARD_ADD_SUCCESS";
                        m.song = a.SongName
                    }
                    break;
                case "artists":
                    if (a = GS.Models.Artist.getOneFromCache(b)) {
                        h = "NOTIFICATION_ARTIST_PINBOARD_ADD_SUCCESS";
                        m.artist = 
                        a.ArtistName
                    }
                    break;
                case "albums":
                    if (a = GS.Models.Album.getOneFromCache(b)) {
                        h = "NOTIFICATION_ALBUM_PINBOARD_ADD_SUCCESS";
                        m.album = a.AlbumName
                    }
                    break
            }
            if (g && h) {
                g = new GS.Models.DataString(c.localize.getString(h), m);
                c.publish("gs.notification", {type: "notice",message: g.render()})
            }
        },_addShortcutFailed: function(a, b, g) {
            var h, m = {}, k = this.sidebar[a].indexOf(b.toString());
            if (k != -1) {
                this.sidebar[a].splice(k, 1);
                c.publish("gs.auth.pinboard.update", {type: a})
            }
            switch (a) {
                case "playlists":
                case "subscribedPlaylists":
                    if (a = 
                    GS.Models.Playlist.getOneFromCache(b)) {
                        h = "NOTIFICATION_PLAYLIST_PINBOARD_ADD_FAILED";
                        m.playlist = a.PlaylistName;
                        c.publish("gs.playlist.view.update", a)
                    }
                    break;
                case "stations":
                    a = GS.Models.Station.getOneFromCache(b);
                    h = "NOTIFICATION_STATION_PINBOARD_ADD_FAILED";
                    m.station = c.localize.getString(a.StationTitle);
                    break;
                case "songs":
                    if (a = GS.Models.Song.getOneFromCache(b)) {
                        h = "NOTIFICATION_SONG_PINBOARD_ADD_FAILED";
                        m.song = a.SongName
                    }
                    break;
                case "artists":
                    if (a = GS.Models.Artist.getOneFromCache(b)) {
                        h = "NOTIFICATION_ARTIST_PINBOARD_ADD_FAILED";
                        m.artist = a.ArtistName
                    }
                    break;
                case "albums":
                    if (a = GS.Models.Album.getOneFromCache(b)) {
                        h = "NOTIFICATION_ALBUM_PINBOARD_ADD_FAILED";
                        m.album = a.AlbumName
                    }
                    break
            }
            if (g && h) {
                g = new GS.Models.DataString(c.localize.getString(h), m);
                c.publish("gs.notification", {type: "error",message: g.render()})
            }
        },removeFromShortcuts: function(a, b, g) {
            g = _.orEqual(g, true);
            switch (a) {
                case "playlist":
                    a = GS.Models.Playlist.getOneFromCache(b);
                    if (!a)
                        return;
                    a = a.UserID === this.UserID ? "playlists" : "subscribedPlaylists";
                    break;
                case "station":
                case "song":
                case "artist":
                case "album":
                    a = 
                    a + "s";
                    break;
                default:
                    return
            }
            var h = this.sidebar[a].indexOf(b.toString());
            if (h != -1) {
                this.sidebar[a].splice(h, 1);
                c.publish("gs.auth.pinboard.update", {type: a});
                if (this.isLoggedIn)
                    GS.service.removeShortcutFromUserSidebar(a, b, this.callback(this._removeShortcutSuccess, a, b, g), this.callback(this._removeShortcutFailed, a, b, h, g));
                else {
                    this.isDirty = true;
                    this._removeShortcutSuccess(a, b, g, {})
                }
                GS.getGuts().gaTrackEvent("user", "removeShortcut")
            }
        },_removeShortcutSuccess: function(a, b, g) {
            var h, m = {};
            switch (a) {
                case "playlists":
                case "subscribedPlaylists":
                    if (a = 
                    GS.Models.Playlist.getOneFromCache(b)) {
                        h = "NOTIFICATION_PLAYLIST_PINBOARD_REMOVE_SUCCESS";
                        m.playlist = a.PlaylistName;
                        c.publish("gs.playlist.view.update", a)
                    }
                    break;
                case "stations":
                    a = GS.Models.Station.getOneFromCache(b);
                    h = "NOTIFICATION_STATION_PINBOARD_REMOVE_SUCCESS";
                    m.station = c.localize.getString(a.StationTitle);
                    break;
                case "songs":
                    if (a = GS.Models.Song.getOneFromCache(b)) {
                        h = "NOTIFICATION_SONG_PINBOARD_REMOVE_SUCCESS";
                        m.song = a.SongName
                    }
                    break;
                case "artists":
                    if (a = GS.Models.Artist.getOneFromCache(b)) {
                        h = "NOTIFICATION_ARTIST_PINBOARD_REMOVE_SUCCESS";
                        m.artist = a.ArtistName
                    }
                    break;
                case "albums":
                    if (a = GS.Models.Album.getOneFromCache(b)) {
                        h = "NOTIFICATION_ALBUM_PINBOARD_REMOVE_SUCCESS";
                        m.album = a.AlbumName
                    }
                    break
            }
            if (g && h) {
                g = new GS.Models.DataString(c.localize.getString(h), m);
                c.publish("gs.notification", {type: "notice",message: g.render()})
            }
        },_removeShortcutFailed: function(a, b, g, h) {
            var m, k, n = {};
            if (g < 0)
                g = 0;
            switch (a) {
                case "playlists":
                case "subscribedPlaylists":
                    if (m = GS.Models.Playlist.getOneFromCache(b)) {
                        k = "NOTIFICATION_PLAYLIST_PINBOARD_REMOVE_FAILED";
                        n.playlist = 
                        m.PlaylistName;
                        c.publish("gs.playlist.view.update", m)
                    }
                    break;
                case "stations":
                    m = GS.Models.Station.getOneFromCache(b);
                    k = "NOTIFICATION_STATION_PINBOARD_REMOVE_FAILED";
                    n.station = c.localize.getString(m.StationTitle);
                    break;
                case "songs":
                    if (m = GS.Models.Song.getOneFromCache(b)) {
                        k = "NOTIFICATION_SONG_PINBOARD_REMOVE_FAILED";
                        n.song = m.SongName
                    }
                    break;
                case "artists":
                    if (m = GS.Models.Artist.getOneFromCache(b)) {
                        k = "NOTIFICATION_ARTIST_PINBOARD_REMOVE_FAILED";
                        n.artist = m.ArtistName
                    }
                    break;
                case "albums":
                    if (m = GS.Models.Album.getOneFromCache(b)) {
                        k = 
                        "NOTIFICATION_ALBUM_PINBOARD_REMOVE_FAILED";
                        n.album = m.AlbumName
                    }
                    break
            }
            if (g != -1) {
                this.sidebar[a].splice(g, 0, b.toString());
                c.publish("gs.auth.pinboard.update", {type: a})
            }
            if (h && k) {
                a = new GS.Models.DataString(c.localize.getString(k), n);
                c.publish("gs.notification", {type: "error",message: a.render()})
            }
        },changePassword: function(a, b, g, h) {
            this.isLoggedIn ? GS.service.changePassword(a, b, this.callback(this._passwordSuccess, g, h), this.callback(this._passwordFailed, h)) : this._passwordFailed(h);
            GS.getGuts().gaTrackEvent("user", 
            "changePassword")
        },_passwordSuccess: function(a, b, g) {
            if (g && g.statusCode === 1)
                c.isFunction(a) && a(g);
            else
                this._passwordFailed(b, g)
        },_passwordFailed: function(a, b) {
            c.isFunction(a) && a(b)
        },updateAccountType: function(a) {
            a = a.toLowerCase();
            switch (a) {
                case "plus":
                    this.IsPremium = 1;
                    this.Flags |= 1;
                    break;
                case "anywhere":
                    this.IsPremium = 1;
                    this.Flags |= 128;
                    break;
                case "lite":
                case "liteEx":
                    this.IsPremium = 1;
                    this.Flags |= 32768;
                    break;
                default:
                    this.IsPremium = 0;
                    this.Flags &= -2;
                    this.Flags &= -129;
                    this.Flags &= -32769;
                    break
            }
            GS.service.getSubscriptionDetails(this.callback(function(b) {
                this.subscription = 
                GS.Models.Subscription.getSubscriptionFromDetails(b, this)
            }));
            c.publish("gs.auth.update");
            GS.getGuts().gaTrackEvent("user", "updateAccount", a)
        },checkVipExpiring: function() {
            this.IsPremium && GS.service.getSubscriptionDetails(this.callback("checkVipExpiringCallback"), this.callback("checkVipExpiringCallback"))
        },checkVipExpiringCallback: function(a) {
            var b = new Date, g;
            if (!(a.fault || a.code)) {
                this.subscription = GS.Models.Subscription.getSubscriptionFromDetails(a, this);
                if (!(this.subscription.recurring || this.subscription.isSpecial()))
                    if (g = 
                    this.subscription.endDate) {
                        a = _.orEqual(GS.store.get("gs.vipExpire.dontPrompt" + this.UserID), 0);
                        if (!(b.getTime() - a < 12096E5)) {
                            a = _.orEqual(GS.store.get("gs.vipExpire.hasSeen" + this.UserID), 0);
                            a = b.getTime() - a;
                            b = g.getTime() - b.getTime();
                            g = Math.max(0, Math.ceil(b / 864E5));
                            g += g == 1 ? " day" : " days";
                            g = b <= 0 ? (new GS.Models.DataString(c.localize.getString("POPUP_VIP_EXPIRES_NO_DAYS"), {vipPackage: this.subscription.getTypeName()})).render() : (new GS.Models.DataString(c.localize.getString("POPUP_VIP_EXPIRES_DAYS_LEFT"), 
                            {daysLeft: g,vipPackage: this.subscription.getTypeName()})).render();
                            this.subscription.daysLeft = g;
                            this.subscription.notCloseable = true;
                            if (a >= 1728E5)
                                if (b < 864E5) {
                                    this.subscription.timeframe = "oneDay";
                                    GS.getLightbox().open("vipExpires", this.subscription)
                                } else if (b < 1728E5) {
                                    this.subscription.timeframe = "twoDays";
                                    GS.getLightbox().open("vipExpires", this.subscription)
                                } else if (b < 12096E5) {
                                    this.subscription.timeframe = "twoWeeks";
                                    GS.getLightbox().open("vipExpires", this.subscription)
                                } else if (b <= 0 && Math.abs(b) <= 6048E5) {
                                    this.subscription.timeframe = 
                                    "expired";
                                    GS.getLightbox().open("vipExpires", this.subscription)
                                }
                            setTimeout(this.callback("checkVipExpiring"), 1728E5)
                        }
                    }
            }
        },isVip: function() {
            return this.subscription.vip
        },getAutoNewPlaylistName: function() {
            var a, b, g, h = [];
            g = this.Name && this.Name.length ? this.Name + "'s Playlist " : "Playlist ";
            _.forEach(this.playlists, function(m) {
                a = m.PlaylistName.indexOf(g);
                if (a != -1)
                    (b = parseInt(m.PlaylistName.substring(a + g.length), 10)) && h.push(b)
            });
            if (h.length) {
                h.sort(_.numSortA);
                b = h[h.length - 1] + 1
            } else
                b = 1;
            return g + b
        },isPlaylistNameAvailable: function(a) {
            var b;
            for (b in this.playlists)
                if (this.playlists.hasOwnProperty(b))
                    if (a === this.playlists[b].PlaylistName)
                        return false;
            return true
        },getPoints: function(a, b) {
            if (this._pointsDirty)
                if (this._pointsPending)
                    this._pointsPending.then(a, b);
                else {
                    this._pointsPending = c.Deferred();
                    this._pointsPending.then(a, b);
                    GS.service.userGetPoints(this.callback("_pointsSuccess"), this.callback("_pointsFail"))
                }
            else
                a(this.Points)
        },_pointsSuccess: function(a) {
            var b = parseInt(a, 10);
            if (isNaN(b)) {
                this._pointsPending.reject(a);
                this._pointsPending = 
                false
            } else {
                var g = this.Points;
                this._pointsDirty = false;
                this.Points = b;
                this._pointsPending.resolve(b);
                this._pointsPending = false;
                g !== b && c.publish("gs.auth.pointsUpdated");
                return a
            }
        },_pointsFail: function(a) {
            this._pointsPending.reject(a);
            this._pointsPending = false;
            return a
        },invalidatePoints: function() {
            this._pointsDirty = true;
            c.publish("gs.auth.pointsUpdated")
        },addPoints: function(a, b) {
            b = _.orEqual(b, false);
            a = parseInt(a, 10);
            if (!isNaN(a)) {
                this._pointsDirty = true;
                this.Points += a;
                c.publish("gs.auth.pointsUpdated");
                b || GS.getNotice().displaySurveyPoints(a)
            }
        },handleLiveRamp: function() {
            var a = GS.store.get("lastLiveRamp" + this.UserID), b = (new Date).valueOf();
            if (this.Email && (!a || b - a > 1296E6)) {
                GS.store.set("lastLiveRamp" + this.UserID, b);
                var g = hex_sha1(c.trim(this.Email.toLowerCase()));
                _.wait(3E4).then(function() {
                    c("iframe#liveRamp").remove();
                    var h = c('<iframe id="liveRamp" name="_rlcdn" width=0 height=0 frameborder=0></iframe>'), m = "http://ei.rlcdn.com/44054.html?s=" + g;
                    h.css("visibility", "hidden");
                    h.bind("load", function() {
                        h.css("visibility", 
                        "visible").unbind("load")
                    });
                    h.attr("src", m);
                    c("body").append(h)
                })
            }
        },isIdle: function() {
            var a = GS.getAd().lastActive.getTime(), b = (new Date).getTime(), g = GS.getAd().maxRotationTime;
            return b - a > g
        }})
})(jQuery);
(function(c) {
    GS.Models.Base.extend("GS.Models.Fanbase", {}, {currentPage: 0,objectID: null,objectType: "",userIDs: [],fansLoaded: false,init: function(a) {
            this._super(a);
            this.userIDs = _.orEqual(a.userIDs, []);
            this.fansLoaded = _.orEqual(a.fansLoaded, false)
        },getFans: function(a, b) {
            if (this.fansLoaded) {
                var g = GS.Models.User.getManyFromCache(this.userIDs);
                c.isFunction(a) && a(g)
            } else
                this.objectType === "playlist" ? GS.service[this.objectType + "GetFans"](this.objectID, this.callback(["cacheAndReturnUsers", a]), b) : GS.service[this.objectType + 
                "GetFans"](this.objectID, this.currentPage, this.callback(["cacheAndReturnUsers", a]), b)
        },cacheAndReturnUsers: function(a) {
            for (var b = GS.Models.User.wrapCollection(a.Users || a.Return.fans || a.Return), g = 0; g < b.length; g++) {
                var h = b[g];
                this.userIDs.indexOf(h.UserID) == -1 && this.userIDs.push(h.UserID)
            }
            if (_.defined(a.hasMore) && a.hasMore)
                this.currentPage++;
            else
                this.fansLoaded = true;
            return b
        }})
})(jQuery);
(function(c) {
    GS.Models.Base.extend("GS.Models.Feed", {QUEUE_ADD_LIMIT: 50}, {user: null,type: null,lastDocumentID: null,lastEventID: null,events: [],pages: [],currentPage: 0,hasMore: false,isLoaded: false,isComplete: false,isDirty: false,isErrored: false,realTimeWaiting: [],lastRequest: 0,cache: {},RATE_LIMIT: 6E4,PAGE_LIMIT: 5,getFeed: function(a, b) {
            this.reset();
            this.isComplete ? a(this.events) : this.fetch({callback: a,errback: b})
        },next: function(a, b) {
            this.fetch({callback: a,errback: b})
        },reset: function() {
            var a = new Date;
            if (!this.isLoaded || 
            a.getTime() > this.lastRequest + this.RATE_LIMIT || this.isDirty) {
                this.events = [];
                this.lastDocumentID = this.lastEventID = 0;
                this.isLoaded = this.hasMore = this.isComplete = this.isDirty = this.isErrored = false;
                this.lastRequest = a.getTime();
                this.cache = {};
                this.pages = [];
                this.currentPage = 0
            }
        },fetch: function() {
            return []
        },onError: function(a) {
            this.isLoaded = this.isErrored = true;
            a && a.errback && a.errback([])
        },filterFollows: function(a) {
            return a.type == GS.Models.FeedEvent.USER_FOLLOWED_TYPE || a.type == GS.Models.FeedEvent.USERS_FOLLOWED_TYPE || 
            a.type == GS.Models.FeedEvent.FAVORITE_USERS_TYPE ? false : true
        },parseEvent: function(a) {
            var b = null;
            try {
                b = GS.Models.FeedEvent.wrap(a)
            } catch (g) {
                console.warn("Feed Parse Error: ", a.activityName, a, g)
            }
            return b
        },parseUser: function(a, b) {
            var g = [], h;
            for (var m in a)
                if (a.hasOwnProperty(m))
                    if (h = parseEvent(m)) {
                        h.user = b;
                        g.push(h)
                    }
            return g
        },getEvents: function(a) {
            a = _.orEqual(a, 0);
            var b = this.events.concat();
            if (a) {
                b = [];
                for (var g = 0; g < this.events.length; g++)
                    if (this.events[g].timestamp > a)
                        b.push(this.events[g]);
                    else
                        break
            }
            return b
        },
        getSongGroups: function(a, b) {
            var g = [], h, m, k, n, o, q = 0, x = {};
            a = _.orEqual(a, 0);
            b = _.orEqual(b, GS.Models.Feed.QUEUE_ADD_LIMIT);
            var v = this.getEvents(a);
            for (k = 0; k < v.length; k++) {
                o = v[k];
                h = o.getSongs();
                if (q <= b && h.length && GS.Models.FeedEvent.ListenTypes[o.activityName]) {
                    m = [];
                    for (n = 0; n < h.length; n++)
                        if (!x[h[n].SongID]) {
                            m.push(h[n].SongID);
                            x[h[n].SongID] = true;
                            q++
                        }
                    g.push({songIDs: m,context: o.getDetailsForFeeds()});
                    if (q > b)
                        break
                }
            }
            return g
        },play: function(a, b, g, h, m) {
            this.isComplete ? this.playSongs(a, b, g, h, m) : this.getFeed(this.callback(function() {
                this.isComplete && 
                this.playSongs(a, b, g, h, m)
            }))
        },playSongs: function(a, b, g, h, m) {
            if (this.isComplete) {
                a = _.orEqual(a, -1);
                b = _.orEqual(b, false);
                g = _.orEqual(g, 0);
                h = _.orEqual(h, GS.Models.Feed.QUEUE_ADD_LIMIT);
                m = _.orEqual(m, false);
                for (var k = this.getSongGroups(g, h), n = this.getDetailsForFeeds(), o = k.length - 1; o >= 0; o--) {
                    g = k[o];
                    h = g.songIDs.reverse();
                    GS.player.addSongsToQueueAt(h, a, b, c.extend({event: g.context}, n), m && o === 0);
                    a = a == GS.player.INDEX_REPLACE ? GS.player.INDEX_DEFAULT : a;
                    if (h.length)
                        b = false
                }
            }
        },getDetailsForFeeds: function() {
            return {user: this.user ? 
                this.user.getDetailsForFeeds() : null,type: GS.player.PLAY_CONTEXT_FEED,feedType: this.type}
        }})
})(jQuery);
(function(c) {
    GS.Models.Base.extend("GS.Models.FeedEvent", {id: "eventID",cache: {},ListenTypes: {},PlaylistTypes: {},SongTypes: {},AlbumTypes: {},ArtistTypes: {},init: function() {
            GS.Models.FeedEvent.setTypes();
            c.subscribe("gs.locale.ready", this.callback(this.updateDaysOfWeek));
            c.subscribe("gs.locale.update", this.callback(this.updateDaysOfWeek));
            this.updateDaysOfWeek()
        },setTypes: function() {
            var a = {};
            a.songPlayed = true;
            a.obsession = true;
            a.playlistPlayed = true;
            a.artistPlayed = true;
            a.albumPlayed = true;
            a.broadcast = true;
            var b = {};
            b.songPlayed = true;
            b.obsession = true;
            b.playlistPlayed = true;
            b.artistPlayed = true;
            b.albumPlayed = true;
            var g = {};
            g.playlistPlayed = true;
            var h = {};
            h.albumPlayed = true;
            var m = {};
            m.artistPlayed = true;
            GS.Models.FeedEvent.ListenTypes = a;
            GS.Models.FeedEvent.SongTypes = b;
            GS.Models.FeedEvent.PlaylistTypes = g;
            GS.Models.FeedEvent.AlbumTypes = h;
            GS.Models.FeedEvent.ArtistTypes = m
        },songPlayed: function(a) {
            var b = {};
            b.user = GS.Models.FeedEvent.getUserLink(a.user);
            b.song = ['<a class="songLink" href="', _.cleanUrl(a.data.songs[0].songName, 
                a.data.songs[0].songID, "song"), '">', _.cleanText(a.data.songs[0].songName), "</a>"].join("");
            b.artist = ['<a href="', _.cleanUrl(a.data.songs[0].artistName, a.data.songs[0].artistID, "artist"), '">', _.cleanText(a.data.songs[0].artistName), "</a>"].join("");
            b.album = ['<a href="', _.cleanUrl(a.data.songs[0].albumName, a.data.songs[0].albumID, "album"), '">', _.cleanText(a.data.songs[0].albumName), "</a>"].join("");
            b.numSongs = a.data.songs.length;
            if (b.numSongs > 2) {
                a.dataKey = "FEED_LISTEN_SONGS_MANY";
                b.numSongs--
            } else if (b.numSongs == 
            2) {
                b.song2 = ['<a class="songLink" data-song-index="1">', _.cleanText(a.data.songs[1].songName), "</a>"].join("");
                a.dataKey = "FEED_LISTEN_SONGS_TWO"
            } else
                a.dataKey = "FEED_LISTEN_SONG";
            return new GS.Models.DataString(c.localize.getString(a.dataKey), b)
        },favoriteSong: function(a) {
            var b = {};
            b.user = GS.Models.FeedEvent.getUserLink(a.user);
            b.song = ['<a class="songLink" href="', _.cleanUrl(a.data.songs[0].songName, a.data.songs[0].songID, "song"), '">', _.cleanText(a.data.songs[0].songName), "</a>"].join("");
            b.artist = ['<a href="', 
                _.cleanUrl(a.data.songs[0].artistName, a.data.songs[0].artistID, "artist"), '">', _.cleanText(a.data.songs[0].artistName), "</a>"].join("");
            b.album = ['<a href="', _.cleanUrl(a.data.songs[0].albumName, a.data.songs[0].albumID, "album"), '">', _.cleanText(a.data.songs[0].albumName), "</a>"].join("");
            b.numSongs = a.data.songs.length;
            if (b.numSongs > 2) {
                a.dataKey = "FEED_FAVORITE_SONGS_MANY";
                b.numSongs--
            } else if (b.numSongs == 2) {
                b.song2 = ['<a class="songLink" data-song-index="1">', _.cleanText(a.data.songs[1].songName), "</a>"].join("");
                a.dataKey = "FEED_FAVORITE_SONGS_TWO"
            } else
                a.dataKey = "FEED_FAVORITE_SONG";
            return new GS.Models.DataString(c.localize.getString(a.dataKey), b)
        },obsession: function(a) {
            var b = {};
            b.user = GS.Models.FeedEvent.getUserLink(a.user);
            b.song = ['<a class="songLink" href="', _.cleanUrl(a.data.songs[0].songName, a.data.songs[0].songID, "song"), '">', _.cleanText(a.data.songs[0].songName), "</a>"].join("");
            b.artist = ['<a href="', _.cleanUrl(a.data.songs[0].artistName, a.data.songs[0].artistID, "artist"), '">', _.cleanText(a.data.songs[0].artistName), 
                "</a>"].join("");
            b.album = ['<a href="', _.cleanUrl(a.data.songs[0].albumName, a.data.songs[0].albumID, "album"), '">', _.cleanText(a.data.songs[0].albumName), "</a>"].join("");
            b.numSongs = a.data.songs.length;
            if (b.numSongs > 2) {
                a.dataKey = "FEED_SONG_OBSESSION_MANY";
                b.numSongs--
            } else if (b.numSongs == 2) {
                b.song2 = ['<a class="songLink" data-song-index="1">', _.cleanText(a.data.songs[1].songName), "</a>"].join("");
                a.dataKey = "FEED_SONG_OBSESSION_TWO"
            } else
                a.dataKey = a.data.songs[0].timestamp.length >= 11 ? "FEED_SONG_OBSESSION_COWBELL" : 
                a.data.songs[0].timestamp.length >= 7 ? "FEED_SONG_OBSESSION_BLEEDING" : a.data.songs[0].timestamp.length >= 5 ? "FEED_SONG_OBSESSION_ADDICT" : "FEED_SONG_OBSESSION";
            return new GS.Models.DataString(c.localize.getString(a.dataKey), b)
        },addSongsToLibrary: function(a) {
            var b = {};
            b.user = GS.Models.FeedEvent.getUserLink(a.user);
            b.song = ['<a class="songLink" href="', _.cleanUrl(a.data.songs[0].songName, a.data.songs[0].songID, "song"), '">', _.cleanText(a.data.songs[0].songName), "</a>"].join("");
            b.artist = ['<a href="', _.cleanUrl(a.data.songs[0].artistName, 
                a.data.songs[0].artistID, "artist"), '">', _.cleanText(a.data.songs[0].artistName), "</a>"].join("");
            b.album = ['<a href="', _.cleanUrl(a.data.songs[0].albumName, a.data.songs[0].albumID, "album"), '">', _.cleanText(a.data.songs[0].albumName), "</a>"].join("");
            b.numSongs = a.data.songs.length;
            if (b.numSongs > 2) {
                a.dataKey = "FEED_ADD_LIBRARY_SONGS_MANY";
                b.numSongs--
            } else if (b.numSongs == 2) {
                b.song2 = ['<a class="songLink" data-song-index="1">', _.cleanText(a.data.songs[1].songName), "</a>"].join("");
                a.dataKey = a.user.Sex == 
                "M" ? "FEED_ADD_LIBRARY_SONGS_TWO_MALE" : a.user.Sex == "F" ? "FEED_ADD_LIBRARY_SONGS_TWO_FEMALE" : "FEED_ADD_LIBRARY_SONGS_TWO_ALIEN"
            } else
                a.dataKey = a.user.Sex == "M" ? "FEED_ADD_LIBRARY_SONG_MALE" : a.user.Sex == "F" ? "FEED_ADD_LIBRARY_SONG_FEMALE" : "FEED_ADD_LIBRARY_SONG_ALIEN";
            return new GS.Models.DataString(c.localize.getString(a.dataKey), b)
        },createPlaylist: function(a) {
            var b = {};
            a.data.playlists[0].owningName = a.user.Name;
            a.data.playlists[0].owningID = a.user.UserID;
            b.user = GS.Models.FeedEvent.getUserLink(a.user);
            b.playlist = 
            ['<a href="', _.cleanUrl(a.data.playlists[0].playlistName, a.data.playlists[0].playlistID, "playlist"), '">', _.cleanText(a.data.playlists[0].playlistName), "</a>"].join("");
            b.numSongs = _.isArray(a.data.songIDs) ? a.data.songIDs.length : 0;
            a.dataKey = b.numSongs && b.numSongs > 1 ? "FEED_PLAYLIST_CREATED" : "FEED_PLAYLIST_CREATED_NO_SONGS";
            return new GS.Models.DataString(c.localize.getString(a.dataKey), b)
        },overwritePlaylist: function(a) {
            var b = {};
            a.data.playlists[0].owningName = a.user.Name;
            a.data.playlists[0].owningID = a.user.UserID;
            b.user = GS.Models.FeedEvent.getUserLink(a.user);
            b.playlist = ['<a href="', _.cleanUrl(a.data.playlists[0].playlistName, a.data.playlists[0].playlistID, "playlist"), '">', _.cleanText(a.data.playlists[0].playlistName), "</a>"].join("");
            b.numSongs = _.isArray(a.data.songIDs) ? a.data.songIDs.length : 0;
            a.dataKey = b.numSongs && b.numSongs > 1 ? "FEED_PLAYLIST_EDITED" : "FEED_PLAYLIST_EDITED_NO_SONGS";
            return new GS.Models.DataString(c.localize.getString(a.dataKey), b)
        },subscribePlaylist: function(a) {
            var b = {}, g = a.data.playlists[0].owningName, 
            h = a.data.playlists[0].subscribingName;
            b.user = GS.Models.FeedEvent.getUserLink(a.user);
            b.playlist = ['<a href="', _.cleanUrl(a.data.playlists[0].playlistName, a.data.playlists[0].playlistID, "playlist"), '">', _.cleanText(a.data.playlists[0].playlistName), "</a>"].join("");
            b.author = ['<a href="', _.cleanUrl(g, a.data.playlists[0].owningUserID, "user"), '">', g, "</a>"].join("");
            b.fan = ['<a href="', _.cleanUrl(h, a.userID, "user"), '">', h, "</a>"].join("");
            a.dataKey = "FEED_PLAYLIST_FOLLOWED";
            return new GS.Models.DataString(c.localize.getString(a.dataKey), 
            b)
        },playlistPlayed: function(a) {
            var b = {};
            b.user = GS.Models.FeedEvent.getUserLink(a.user);
            b.playlist = ['<a href="', _.cleanUrl(a.data.playlists[0].playlistName, a.data.playlists[0].playlistID, "playlist"), '">', _.cleanText(a.data.playlists[0].playlistName), "</a>"].join("");
            a.dataKey = "FEED_LISTEN_PLAYLIST";
            return new GS.Models.DataString(c.localize.getString(a.dataKey), b)
        },playlistAddCollaborator: function(a) {
            var b = {};
            b.user = GS.Models.FeedEvent.getUserLink(a.user);
            b.playlist = ['<a href="', _.cleanUrl(a.data.playlists[0].name, 
                a.data.playlists[0].playlistID, "playlist"), '">', _.cleanText(a.data.playlists[0].name), "</a>"].join("");
            a.dataKey = "FEED_ADD_COLLABORATOR_PLAYLIST";
            return new GS.Models.DataString(c.localize.getString(a.dataKey), b)
        },favoriteArtist: function(a) {
            var b = {};
            b.user = GS.Models.FeedEvent.getUserLink(a.user);
            b.artist = ['<a href="', _.cleanUrl(a.data.artists[0].artistName, a.data.artists[0].artistID, "artist"), '">', _.cleanText(a.data.artists[0].artistName), "</a>"].join("");
            b.numArtists = a.data.artists.length;
            if (b.numArtists > 
            2) {
                a.dataKey = "FEED_FAVORITE_ARTIST_MANY";
                b.artist2 = ['<a href="', _.cleanUrl(a.data.artists[1].artistName, a.data.artists[1].artistID, "artist"), '">', _.cleanText(a.data.artists[1].artistName), "</a>"].join("");
                b.numArtists -= 2
            } else if (b.numArtists == 2) {
                a.dataKey = "FEED_FAVORITE_ARTIST_TWO";
                b.artist2 = ['<a href="', _.cleanUrl(a.data.artists[1].artistName, a.data.artists[1].artistID, "artist"), '">', _.cleanText(a.data.artists[1].artistName), "</a>"].join("")
            } else
                a.dataKey = "FEED_FAVORITE_ARTIST_ONE";
            return null
        },
        addArtistToLibrary: function(a) {
            var b = {};
            b.user = GS.Models.FeedEvent.getUserLink(a.user);
            b.numSongs = a.data.songs.length - 1;
            b.song = ['<a class="songLink" href="', _.cleanUrl(a.data.songs[0].songName, a.data.songs[0].songID, "song"), '">', _.cleanText(a.data.songs[0].songName), "</a>"].join("");
            b.artist = ['<a href="', _.cleanUrl(a.data.songs[0].artistName, a.data.songs[0].artistID, "artist"), '">', _.cleanText(a.data.songs[0].artistName), "</a>"].join("");
            a.dataKey = "FEED_ADD_LIBRARY_ARTIST";
            return new GS.Models.DataString(c.localize.getString(a.dataKey), 
            b)
        },artistPlayed: function(a) {
            var b = {};
            b.user = GS.Models.FeedEvent.getUserLink(a.user);
            b.numSongs = a.data.songs.length;
            b.song = ['<a class="songLink" href="', _.cleanUrl(a.data.songs[0].songName, a.data.songs[0].songID, "song"), '">', _.cleanText(a.data.songs[0].songName), "</a>"].join("");
            b.artist = ['<a href="', _.cleanUrl(a.data.songs[0].artistName, a.data.songs[0].artistID, "artist"), '">', _.cleanText(a.data.songs[0].artistName), "</a>"].join("");
            a.dataKey = "FEED_LISTEN_ARTIST";
            return new GS.Models.DataString(c.localize.getString(a.dataKey), 
            b)
        },albumPlayed: function(a) {
            var b = {};
            b.user = GS.Models.FeedEvent.getUserLink(a.user);
            b.numSongs = a.data.songs.length;
            b.artist = ['<a href="', _.cleanUrl(a.data.songs[0].artistName, a.data.songs[0].artistID, "artist"), '">', _.cleanText(a.data.songs[0].artistName), "</a>"].join("");
            b.album = ['<a href="', _.cleanUrl(a.data.songs[0].albumName, a.data.songs[0].albumID, "album"), '">', _.cleanText(a.data.songs[0].albumName), "</a>"].join("");
            a.dataKey = "FEED_LISTEN_ALBUM";
            return new GS.Models.DataString(c.localize.getString(a.dataKey), 
            b)
        },addAlbumToLibrary: function(a) {
            var b = {};
            b.user = GS.Models.FeedEvent.getUserLink(a.user);
            b.artist = ['<a href="', _.cleanUrl(a.data.songs[0].artistName, a.data.songs[0].artistID, "artist"), '">', _.cleanText(a.data.songs[0].artistName), "</a>"].join("");
            b.album = ['<a href="', _.cleanUrl(a.data.songs[0].albumName, a.data.songs[0].albumID, "album"), '">', _.cleanText(a.data.songs[0].albumName), "</a>"].join("");
            b.numSongs = a.data.songs.length;
            a.dataKey = "FEED_ADD_LIBRARY_ALBUM";
            return new GS.Models.DataString(c.localize.getString(a.dataKey), 
            b)
        },favoriteUser: function(a) {
            var b = {};
            b.user = GS.Models.FeedEvent.getUserLink(a.user);
            b.followed = ['<a href="', a.getUrlByType("user", 0), '">', a.getMetaByType("user", 0), "</a>"].join("");
            b.numUsers = a.data.users.length;
            if (b.numUsers > 2) {
                a.dataKey = "FEED_FAVORITE_USER_MANY";
                b.numUsers--
            } else if (b.numUsers == 2) {
                a.dataKey = "FEED_FAVORITE_USER_TWO";
                b.followed2 = ['<a href="', a.getUrlByType("user", 1), '">', a.getMetaByType("user", 1), "</a>"].join("")
            } else
                a.dataKey = "FEED_FAVORITE_USER_ONE";
            console.warn(a.dataKey, b);
            return new GS.Models.DataString(c.localize.getString(a.dataKey), b)
        },share: function(a) {
            var b = {};
            if (a.data.playlists) {
                var g = a.data.playlists[0].owningName, h = a.data.playlists[0].subscribingName;
                b.user = GS.Models.FeedEvent.getUserLink(a.user);
                b.playlist = ['<a href="', _.cleanUrl(a.data.playlists[0].playlistName, a.data.playlists[0].playlistID, "playlist"), '">', _.cleanText(a.data.playlists[0].playlistName), "</a>"].join("");
                b.author = ['<a href="', _.cleanUrl(g, a.data.playlists[0].userID, "user"), '">', g, "</a>"].join("");
                b.fan = ['<a href="', _.cleanUrl(h, a.userID, "user"), '">', h, "</a>"].join("");
                a.dataKey = "FEED_SHARE_PLAYLIST"
            } else {
                b.user = GS.Models.FeedEvent.getUserLink(a.user);
                b.song = ['<a class="songLink" href="', _.cleanUrl(a.data.songs[0].songName, a.data.songs[0].songID, "song"), '">', _.cleanText(a.data.songs[0].songName), "</a>"].join("");
                b.artist = ['<a href="', _.cleanUrl(a.data.songs[0].artistName, a.data.songs[0].artistID, "artist"), '">', _.cleanText(a.data.songs[0].artistName), "</a>"].join("");
                b.album = ['<a href="', _.cleanUrl(a.data.songs[0].albumName, 
                    a.data.songs[0].albumID, "album"), '">', _.cleanText(a.data.songs[0].albumName), "</a>"].join("");
                b.numSongs = a.data.songs.length;
                if (b.numSongs > 2) {
                    a.dataKey = "FEED_SHARE_SONGS_MANY";
                    b.numSongs--
                } else if (b.numSongs == 2) {
                    b.song2 = ['<a class="songLink" data-song-index="1">', _.cleanText(a.data.songs[1].songName), "</a>"].join("");
                    a.dataKey = "FEED_SHARE_SONGS_TWO"
                } else
                    a.dataKey = "FEED_SHARE_SONG"
            }
            return new GS.Models.DataString(c.localize.getString(a.dataKey), b)
        },broadcast: function(a) {
            var b = {}, g, h = false, m = a.people ? 
            a.people.length : 0;
            b.user = GS.Models.FeedEvent.getUserLink(a.user);
            for (g = 0; g < m; g++)
                if (a.people[g].userID == GS.user.UserID) {
                    h = true;
                    break
                }
            if (a.data.playlists) {
                b.playlist = ['<a href="', _.cleanUrl(a.data.playlists[0].playlistName, a.data.playlists[0].playlistID, "playlist"), '">', _.cleanText(a.data.playlists[0].playlistName), "</a>"].join("");
                if (a.people && a.people.length)
                    if (a.people.length > 2) {
                        b.person = ['<a href="', a.getUrlByType("taggedUser", 0), '">', a.getMetaByType("taggedUser", 0), "</a>"].join("");
                        b.numUsers = 
                        a.people.length - 1;
                        a.dataKey = h ? "FEED_BROADCAST_PLAYLIST_MANY_USERS_AND_YOU" : "FEED_BROADCAST_PLAYLIST_MANY_USERS"
                    } else if (a.people.length == 2) {
                        b.person = ['<a href="', a.getUrlByType("taggedUser", 0), '">', a.getMetaByType("taggedUser", 0), "</a>"].join("");
                        b.person2 = ['<a href="', a.getUrlByType("taggedUser", 1), '">', a.getMetaByType("taggedUser", 1), "</a>"].join("");
                        a.dataKey = "FEED_BROADCAST_PLAYLIST_TWO_USERS"
                    } else {
                        b.person = ['<a href="', a.getUrlByType("taggedUser", 0), '">', a.getMetaByType("taggedUser", 0), "</a>"].join("");
                        a.dataKey = "FEED_BROADCAST_PLAYLIST_ONE_USER"
                    }
                else
                    a.dataKey = "FEED_BROADCAST_PLAYLIST_NO_USERS"
            } else if (a.data.songs) {
                GS.Models.Song.wrap(a.data.songs[0]);
                b.song = ['<a class="songLink" data-songid="', a.data.songs[0].songID, '">', _.cleanText(a.data.songs[0].songName), "</a>"].join("");
                b.artist = ['<a href="', _.cleanUrl(a.data.songs[0].artistName, a.data.songs[0].artistID, "artist"), '">', _.cleanText(a.data.songs[0].artistName), "</a>"].join("");
                b.album = ['<a href="', _.cleanUrl(a.data.songs[0].albumName, a.data.songs[0].albumID, 
                    "album"), '">', _.cleanText(a.data.songs[0].albumName), "</a>"].join("");
                if (a.people && a.people.length)
                    if (a.people.length > 2) {
                        b.person = ['<a href="', a.getUrlByType("taggedUser", 0), '">', a.getMetaByType("taggedUser", 0), "</a>"].join("");
                        b.numUsers = a.people.length - 1;
                        a.dataKey = h ? "FEED_BROADCAST_SONG_MANY_USERS_AND_YOU" : "FEED_BROADCAST_SONG_MANY_USERS"
                    } else if (a.people.length == 2) {
                        b.person = ['<a href="', a.getUrlByType("taggedUser", 0), '">', a.getMetaByType("taggedUser", 0), "</a>"].join("");
                        b.person2 = ['<a href="', 
                            a.getUrlByType("taggedUser", 1), '">', a.getMetaByType("taggedUser", 1), "</a>"].join("");
                        a.dataKey = "FEED_BROADCAST_SONG_TWO_USERS"
                    } else {
                        b.person = ['<a href="', a.getUrlByType("taggedUser", 0), '">', a.getMetaByType("taggedUser", 0), "</a>"].join("");
                        a.dataKey = "FEED_BROADCAST_SONG_ONE_USER"
                    }
                else
                    a.dataKey = "FEED_BROADCAST_SONG_NO_USERS"
            } else if (a.data.artists) {
                b.artist = ['<a href="', _.cleanUrl(a.data.artists[0].artistName, a.data.artists[0].artistID, "artist"), '">', _.cleanText(a.data.artists[0].artistName), "</a>"].join("");
                if (a.people && a.people.length)
                    if (a.people.length > 2) {
                        b.person = ['<a href="', a.getUrlByType("taggedUser", 0), '">', a.getMetaByType("taggedUser", 0), "</a>"].join("");
                        b.numUsers = a.people.length - 1;
                        a.dataKey = h ? "FEED_BROADCAST_ARTIST_MANY_USERS_AND_YOU" : "FEED_BROADCAST_ARTIST_MANY_USERS"
                    } else if (a.people.length == 2) {
                        b.person = ['<a href="', a.getUrlByType("taggedUser", 0), '">', a.getMetaByType("taggedUser", 0), "</a>"].join("");
                        b.person2 = ['<a href="', a.getUrlByType("taggedUser", 1), '">', a.getMetaByType("taggedUser", 1), 
                            "</a>"].join("");
                        a.dataKey = "FEED_BROADCAST_ARTIST_TWO_USERS"
                    } else {
                        b.person = ['<a href="', a.getUrlByType("taggedUser", 0), '">', a.getMetaByType("taggedUser", 0), "</a>"].join("");
                        a.dataKey = "FEED_BROADCAST_ARTIST_ONE_USER"
                    }
                else
                    a.dataKey = "FEED_BROADCAST_ARTIST_NO_USERS"
            } else if (a.data.albums) {
                b.artist = ['<a href="', _.cleanUrl(a.data.albums[0].artistName, a.data.albums[0].artistID, "artist"), '">', _.cleanText(a.data.albums[0].artistName), "</a>"].join("");
                b.album = ['<a href="', _.cleanUrl(a.data.albums[0].albumName, 
                    a.data.albums[0].albumID, "album"), '">', _.cleanText(a.data.albums[0].albumName), "</a>"].join("");
                if (a.people && a.people.length)
                    if (a.people.length > 2) {
                        b.person = ['<a href="', a.getUrlByType("taggedUser", 0), '">', a.getMetaByType("taggedUser", 0), "</a>"].join("");
                        b.numUsers = a.people.length - 1;
                        a.dataKey = h ? "FEED_BROADCAST_ALBUM_MANY_USERS_AND_YOU" : "FEED_BROADCAST_ALBUM_MANY_USERS"
                    } else if (a.people.length == 2) {
                        b.person = ['<a href="', a.getUrlByType("taggedUser", 0), '">', a.getMetaByType("taggedUser", 0), "</a>"].join("");
                        b.person2 = ['<a href="', a.getUrlByType("taggedUser", 1), '">', a.getMetaByType("taggedUser", 1), "</a>"].join("");
                        a.dataKey = "FEED_BROADCAST_ALBUM_TWO_USERS"
                    } else {
                        b.person = ['<a href="', a.getUrlByType("taggedUser", 0), '">', a.getMetaByType("taggedUser", 0), "</a>"].join("");
                        a.dataKey = "FEED_BROADCAST_ALBUM_ONE_USER"
                    }
                else
                    a.dataKey = "FEED_BROADCAST_ALBUM_NO_USERS"
            }
            return new GS.Models.DataString(c.localize.getString(a.dataKey), b)
        },usersAddArtistToLibrary: function(a) {
            var b = {};
            b.user = GS.Models.FeedEvent.getUserLink(a.user);
            b.artist = ['<a href="', _.cleanUrl(a.data.songs[0].artistName, a.data.songs[0].artistID, "artist"), '">', _.cleanText(a.data.songs[0].artistName), "</a>"].join("");
            a.dataKey = a.user.Sex == "M" ? "FEED_USERS_ADD_LIBRARY_ARTIST_MALE" : a.user.Sex == "F" ? "FEED_USERS_ADD_LIBRARY_ARTIST_FEMALE" : "FEED_USERS_ADD_LIBRARY_ARTIST_ALIEN";
            return new GS.Models.DataString(c.localize.getString(a.dataKey), b)
        },usersAddAlbumToLibrary: function(a) {
            var b = {};
            b.user = GS.Models.FeedEvent.getUserLink(a.user);
            b.artist = ['<a href="', _.cleanUrl(a.data.albums[0].artistName, 
                a.data.albums[0].artistID, "artist"), '">', _.cleanText(a.data.albums[0].artistName), "</a>"].join("");
            b.album = ['<a href="', _.cleanUrl(a.data.albums[0].albumName, a.data.albums[0].albumID, "album"), '">', _.cleanText(a.data.albums[0].albumName), "</a>"].join("");
            b.numAlbums = a.data.albums.length;
            a.dataKey = a.user.Sex == "M" ? "FEED_USERS_ADD_LIBRARY_ALBUM_MALE" : a.user.Sex == "F" ? "FEED_USERS_ADD_LIBRARY_ALBUM_FEMALE" : "FEED_USERS_ADD_LIBRARY_ALBUM_ALIEN";
            return new GS.Models.DataString(c.localize.getString(a.dataKey), 
            b)
        },comments: function(a) {
            var b = {}, g = GS.Models.User.getOneFromCache(a.userID);
            b.user = GS.Models.FeedEvent.getUserLink(a.user);
            b.event = '<a href="' + g.toUrl("event/" + a.eventID) + '">event</a>';
            a.dataKey = "FEED_USER_COMMENT_NOTICE";
            return new GS.Models.DataString(c.localize.getString(a.dataKey), b)
        },generic: function(a) {
            var b;
            if (a.genericType == 1)
                b = GS.Models.FeedEvent.playlistAddCollaborator(a);
            return b
        },getUserLink: function(a) {
            return ['<a href="', a.toUrl(), '">', a.Name.length ? a.Name : a.FName, "</a>"].join("")
        },
        wrapUsers: function(a) {
            for (var b = [], g, h = 0; h < a.length; h++) {
                g = a[h];
                b.push(GS.Models.User.wrap({UserID: g.userID,displayName: g.displayName,Picture: g.userPicture}))
            }
            return b
        },updateDaysOfWeek: function() {
            var a = c.localize.getString("WEEK_DAYS");
            if (a && a.length)
                this.daysOfWeek = a.split(",")
        },getEvent: function(a, b, g) {
            var h = this.getOneFromCache(a);
            if (h)
                c.isFunction(b) && b(h);
            else
                GS.service.getUserFeedEvent(a, this.callback(["wrap", b]), g)
        }}, {eventID: null,activityName: null,activity: 0,data: null,timestamp: null,userID: 0,
        user: null,date: null,data: null,dataString: null,dataKey: null,users: null,validate: function() {
            return event.userID && event.data
        },init: function(a) {
            this._super(a);
            if (_.defined(a.userIDFrom)) {
                this.user = GS.Models.User.getOneFromCache(a.userIDFrom);
                if (!this.user && a.displayName)
                    this.user = GS.Models.User.wrap({UserID: a.userIDFrom,displayName: a.displayName,Picture: a.userPicture}, false);
                else if (!this.user)
                    throw "no_user";
            } else
                this.user = GS.Models.User.getOneFromCache(a.userID);
            if (!this.user && a.userID && a.userID == GS.user.UserID)
                this.user = 
                GS.user;
            else if (!this.user && a.data.users && a.data.users.length) {
                this.users = GS.Models.FeedEvent.wrapUsers(a.data.users);
                this.user = this.users[0]
            } else if (!this.user && a.displayName)
                this.user = GS.Models.User.wrap({UserID: a.userID,displayName: a.displayName,Picture: a.userPicture}, false);
            this.date = new Date(a.timestamp * 1E3);
            this.dataString = GS.Models.FeedEvent[a.activityName] ? GS.Models.FeedEvent[a.activityName](this) : null;
            if (!this.dataString || !this.user)
                throw "no_dataString";
        },toHTML: function() {
            return this.dataString ? 
            this.dataString.render() : ""
        },playSongs: function(a, b) {
            b = _.orEqual(b, false);
            if (this.data.songs && this.data.songs.length) {
                var g = [], h = new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_FEED, this);
                GS.Models.Song.wrapCollection(this.data.songs);
                for (var m in this.data.songs)
                    this.data.songs.hasOwnProperty(m) && g.push(this.data.songs[m].songID);
                GS.player.addSongsToQueueAt(g, a, b, h)
            } else
                this.data.playlists && this.data.playlists.playlistID && GS.Models.Playlist.getPlaylist(this.data.playlists.playlistID, this.callback("playPlaylist", 
                {index: a,playOnAdd: b}), null, false)
        },getSongs: function(a) {
            var b = this.data.songs && this.data.songs.length ? GS.Models.Song.wrapCollection(this.data.songs) : [];
            return a ? b.reverse() : b
        },getSongsWithArt: function(a) {
            a = _.orEqual(a, 7);
            var b = [], g = {};
            if (this.data.songs && this.data.songs.length)
                for (var h = 0; h < this.data.songs.length; h++) {
                    if (this.data.songs[h].artFilename && !g[this.data.songs[h].artFilename]) {
                        b.push(h);
                        g[this.data.songs[h].artFilename] = true
                    }
                    if (b.length == a)
                        break
                }
            return b
        },getUrlByType: function(a, b) {
            b = 
            _.orEqual(b, 0);
            try {
                switch (a) {
                    case "album":
                        if (this.data && this.data.songs)
                            return _.cleanUrl(this.data.songs[b].albumName, this.data.songs[b].albumID, "album");
                        else if (this.data && this.data.albums)
                            return _.cleanUrl(this.data.albums[b].albumName, this.data.albums[b].albumID, "album");
                        break;
                    case "artist":
                        if (this.data && this.data.songs)
                            return _.cleanUrl(this.data.songs[b].artistName, this.data.songs[b].artistID, "artist");
                        else if (this.data && this.data.artists)
                            return _.cleanUrl(this.data.artists[b].artistName, this.data.artists[b].artistID, 
                            "artist");
                        else if (this.data && this.data.albums)
                            return _.cleanUrl(this.data.albums[b].artistName, this.data.albums[b].artistID, "artist");
                        break;
                    case "playlist":
                        if (this.data && this.data.playlists)
                            return _.cleanUrl(this.data.playlists[b].playlistName, this.data.playlists[b].playlistID, "playlist");
                        break;
                    case "playlistAuthor":
                        if (this.data && this.data.playlists)
                            return _.cleanUrl(this.data.playlists[b].owningName, this.data.playlists[b].owningUserID, "user");
                        break;
                    case "user":
                        if (this.data && this.data.users)
                            if (this.data.users[b].userName)
                                return _.cleanUrl(this.data.users[b].userName, 
                                this.data.users[b].userID, "user");
                            else if (this.data.users[b].displayName)
                                return _.cleanUrl(this.data.users[b].displayName, this.data.users[b].userID, "user");
                        break;
                    case "taggedUser":
                        if (this.data && this.people)
                            return _.cleanUrl(this.people[b].userName, this.people[b].userID, "user");
                        break;
                    default:
                        return null
                }
            } catch (g) {
                return null
            }
        },getMetaByType: function(a, b) {
            b = _.orEqual(b, 0);
            try {
                switch (a) {
                    case "song":
                        return _.cleanText(this.data.songs[b].songName);
                    case "album":
                        if (this.data.songs && this.data.songs[b])
                            return _.cleanText(this.data.songs[b].albumName);
                        else if (this.data.albums && this.data.albums[b])
                            return _.cleanText(this.data.albums[b].albumName);
                        break;
                    case "artist":
                        if (this.data.songs)
                            return _.cleanText(this.data.songs[b].artistName);
                        else if (this.data.artists)
                            return _.cleanText(this.data.artists[b].artistName);
                        else if (this.data.albums)
                            return _.cleanText(this.data.albums[b].artistName);
                        break;
                    case "playlist":
                        return _.cleanText(this.data.playlists[b].playlistName);
                    case "playlistAuthor":
                        return _.cleanText(this.data.playlists[b].owningName);
                    case "user":
                        if (this.data.users[b].userName)
                            return _.cleanText(this.data.users[b].userName);
                        else if (this.data.users[b].displayName)
                            return _.cleanText(this.data.users[b].displayName);
                        break;
                    case "taggedUser":
                        return _.cleanText(this.people[b].userName)
                }
            } catch (g) {
                return null
            }
            return null
        },getImageURL: function(a, b, g) {
            var h = "", m = "";
            b = _.orEqual(b, 0);
            g = _.orEqual(g, 70);
            switch (a) {
                case "song":
                case "album":
                    m = this.data.songs && this.data.songs[b] && this.data.songs[b].artFilename ? _.cleanText(this.data.songs[b].artFilename) : this.data.albums && this.data.albums[b] && this.data.albums[b].artFilename ? _.cleanText(this.data.albums[b].artFilename) : 
                    "album.png";
                    h = GS.Models.Album.artPath + g + "_" + m;
                    break;
                case "artist":
                    m = this.data.songs && this.data.songs[b] && this.data.songs[b].artFilename ? _.cleanText(this.data.songs[b].artFilename) : this.data.artists && this.data.artists[b] && this.data.artists[b].artFilename ? _.cleanText(this.data.artists[b].artFilename) : "artist.png";
                    h = GS.Models.Artist.artPath + g + "_" + m;
                    break;
                case "playlist":
                    if (this.data.playlists && this.data.playlists[b] && this.data.playlists[b].artFilename) {
                        m = _.cleanText(this.data.playlists[b].artFilename);
                        h = GS.Models.Playlist.artPath + g + "_" + m
                    } else {
                        m = "album.png";
                        h = GS.Models.Album.artPath + g + "_" + m
                    }
                    break;
                case "user":
                    m = this.data.users && this.data.users[b] && this.data.users[b].picture ? _.cleanText(this.data.users[b].picture) : "user.png";
                    h = GS.Models.User.artPath + g + "_" + m;
                    break;
                case "taggedUser":
                    m = this.people && this.people[b] && this.people[b].picture ? _.cleanText(this.people[b].picture) : "user.png";
                    h = GS.Models.User.artPath + g + "_" + m;
                    break
            }
            return h
        },playPlaylist: function(a, b) {
            b && b.PlaylistID && GS.player.playPlaylist(a, 
            b)
        },remove: function(a, b) {
            this.user.UserID == GS.user.UserID && GS.service.hideUserEvent(this.eventID, a, b)
        },getDetailsForFeeds: function() {
            return {user: this.user.getDetailsForFeeds(),eventID: this.eventID,activityName: this.activityName}
        },canComment: function() {
            if (!GS.user.fanbase)
                GS.user.fanbase = GS.Models.Fanbase.wrap({objectID: GS.user.UserID,objectType: "user"});
            if (GS.user.UserID > 0 && (GS.user.UserID == this.user.UserID || GS.user.fanbase.userIDs.indexOf(this.user.UserID) != -1))
                return true;
            return false
        },addComment: function(a, 
        b, g) {
            GS.service.addEventComment(this.eventID, a, this.callback([this.addCommentSuccess, b]), g)
        },addCommentSuccess: function(a) {
            if (!a || !a._id)
                return false;
            this.hasComments = true;
            if (!this.comments)
                this.comments = [];
            this.comments.push(a);
            return a
        },removeComment: function(a) {
            for (var b = 0; b < this.comments.length; b++) {
                var g = this.comments[b];
                if (a == g._id && (GS.user.UserID == g.userID || GS.user.UserID == this.user.UserID)) {
                    GS.service.hideEventComment(a, this.eventID);
                    this.comments.splice(b, 1);
                    return
                }
            }
        },toString: function() {
            return ["Feed. type:", 
                this.activityName, ", usname: ", this.user.UserName].join("")
        }})
})(jQuery);
(function() {
    GS.Models.Feed.extend("GS.Models.ProfileFeed", {}, {type: "profile",fetch: function(c) {
            this.user.UserID > 0 && GS.user.UserID == this.user.UserID ? GS.service.getProfileFeed(this.lastDocumentID, this.lastEventID, this.callback("parseFeed", {lastDocumentID: this.lastDocumentID,lastEventID: this.lastEventID,currentPage: this.currentPage,callback: c.callback,errback: c.errback}), this.callback("onError", c)) : GS.service.getUserProfileFeed(this.user.UserID, this.lastDocumentID, this.lastEventID, this.callback("parseFeed", 
            {lastDocumentID: this.lastDocumentID,lastEventID: this.lastEventID,currentPage: this.currentPage,callback: c.callback,errback: c.errback}), this.callback("onError", c))
        },parseFeed: function(c, a) {
            var b, g = [];
            if (_.isEmpty(a) || !a.events)
                return this.onError(c);
            if (!this.pages[c.currentPage]) {
                for (var h = 0; h < a.events.length; h++)
                    if (a.events[h])
                        if (b = this.parseEvent(a.events[h])) {
                            g.push(b);
                            this.cache[b.eventID] = b
                        }
                this.events = this.events.concat(g);
                this.pages.push(g);
                this.currentPage++;
                this.lastDocumentID = a.lastDocumentID;
                this.lastEventID = a.lastEventID;
                this.isComplete = this.isLoaded = true;
                this.hasMore = a.count && this.currentPage < 10
            }
            c.callback && c.callback(this.pages[c.currentPage]);
            this.isComplete || this.fetch(c)
        }})
})(jQuery);
(function() {
    GS.Models.Feed.extend("GS.Models.CommunityFeed", {}, {type: "community",userIDs: [],fetch: function(c) {
            GS.user.UserID > 0 && GS.user.UserID == this.user.UserID ? GS.service.getCombinedFeed(this.userIDs, this.lastEventID, this.callback("parseFeed", {currentPage: this.currentPage,lastEventID: this.lastEventID,callback: c.callback,errback: c.errback}), this.callback("onError", c)) : GS.service.getUserCombinedFeed(this.user.UserID, this.userIDs, this.lastEventID, this.callback("parseFeed", {currentPage: this.currentPage,
                lastEventID: this.lastEventID,callback: c.callback,errback: c.errback}), this.callback("onError", c))
        },parseFeed: function(c, a) {
            var b, g = [];
            c = _.orEqual(c, {});
            if (_.isEmpty(a) || !a.events)
                return this.onError(c);
            if (!this.pages[c.currentPage]) {
                for (var h = 0; h < a.events.length; h++)
                    if (a.events[h])
                        if (b = this.parseEvent(a.events[h])) {
                            g.push(b);
                            this.cache[b.eventID] = b
                        }
                this.events = this.events.concat(g);
                this.pages.push(g);
                this.currentPage++;
                this.lastEventID = a.lastEventID;
                this.isLoaded = Boolean(this.events.length);
                this.isComplete = 
                true;
                if (this.events.length < 75 && a.count >= 25 && this.pages.length < GS.Models.Feed.PAGE_LIMIT)
                    this.isComplete = false;
                this.hasMore = a.count && this.currentPage < 10
            }
            c.callback && c.callback(this.pages[c.currentPage]);
            this.isComplete || this.fetch(c)
        }})
})(jQuery);
(function() {
    GS.Models.Feed.extend("GS.Models.MentionsFeed", {}, {type: "mentions",fetch: function(c) {
            GS.user.UserID > 0 && GS.user.UserID == this.user.UserID && GS.service.getUserNotifications(this.callback("parseFeed", {currentPage: this.currentPage,callback: c.callback,errback: c.errback}), c.errback)
        },parseFeed: function(c, a) {
            var b, g = [];
            c = _.orEqual(c, {});
            if (!this.pages[c.currentPage]) {
                for (var h = 0; h < a.length; h++)
                    if (a[h])
                        if (b = this.parseEvent(a[h])) {
                            g.push(b);
                            this.cache[b.eventID] = b
                        }
                this.events = this.events.concat(g);
                this.pages.push(g);
                this.currentPage++;
                this.lastEventID = a.lastEventID;
                this.hasMore = Boolean(a.hasMore);
                this.isLoaded = !Boolean(a.hasMore) || this.events.length;
                this.isComplete = true
            }
            c.callback && c.callback(this.pages[c.currentPage]);
            this.isComplete || this.fetch(c)
        }})
})(jQuery);
(function() {
    GS.Models.Feed.extend("GS.Models.NotificationsFeed", {}, {type: "notifications",fetch: function(c) {
            GS.user.UserID > 0 && GS.user.UserID == this.user.UserID && GS.service.getUserNotifications(this.callback("parseFeed", {currentPage: this.currentPage,callback: c.callback,errback: c.errback}), c.errback)
        },parseFeed: function(c, a) {
            var b, g = [];
            c = _.orEqual(c, {});
            if (!this.pages[c.currentPage]) {
                for (var h = 0; h < a.length; h++)
                    if (a[h])
                        if (b = this.parseEvent(a[h])) {
                            g.push(b);
                            this.cache[b.eventID] = b
                        }
                this.events = this.events.concat(g);
                this.pages.push(g);
                this.currentPage++;
                this.lastEventID = a.lastEventID;
                this.hasMore = Boolean(a.hasMore);
                this.isLoaded = !Boolean(a.hasMore) || this.events.length;
                this.isComplete = true
            }
            c.callback && c.callback(this.pages[c.currentPage]);
            this.isComplete || this.fetch(c)
        }})
})(jQuery);
(function() {
    GS.Models.Feed.extend("GS.Models.ArtistFeed", {}, {type: "artist",artist: null,fetch: function(c) {
            GS.service.getArtistProfileFeed(this.artist.ArtistID, this.lastDocumentID, this.lastEventID, this.callback("parseFeed", {artistID: this.artist.ArtistID,lastDocumentID: this.lastDocumentID,lastEventID: this.lastEventID,currentPage: this.currentPage,callback: c.callback,errback: c.errback}), c.errback)
        },parseFeed: function(c, a) {
            var b, g = [];
            c = _.orEqual(c, {});
            if (!this.pages[c.currentPage]) {
                for (var h = 0; h < a.events.length; h++)
                    if (a.events[h])
                        if (b = 
                        this.parseEvent(a.events[h])) {
                            g.push(b);
                            this.cache[b.eventID] = b
                        }
                this.events = this.events.concat(g);
                this.pages.push(g);
                this.currentPage++;
                this.lastDocumentID = a.lastDocumentID;
                this.lastEventID = a.lastEventID;
                this.hasMore = Boolean(a.hasMore);
                this.isLoaded = !Boolean(a.hasMore) || this.events.length;
                this.isComplete = true;
                this.events.length < 25 && a.count >= 25 && ++this.pages.length
            }
            c.callback && c.callback(this.pages[c.currentPage]);
            this.isComplete || this.fetch(c)
        }})
})(jQuery);
(function() {
    GS.Models.Feed.extend("GS.Models.RecentFeed", {interestingFeed: null,init: function() {
            this.interestingFeed = new GS.Models.RecentFeed({})
        }}, {type: "recent",fetch: function(c) {
            c = _.orEqual(c, {});
            c.limit = _.orEqual(c.limit, 50);
            GS.service.getInterestingEvents(c.limit, this.callback("parseFeed", {limit: c.limit,callback: c.callback,errback: c.errback,currentPage: this.currentPage}), c.errback)
        },parseFeed: function(c, a) {
            var b = [], g;
            if (!this.pages[c.currentPage]) {
                for (var h = 0; h < a.length; h++)
                    if (g = this.parseEvent(a[h])) {
                        b.push(g);
                        this.cache[g.eventID] = g
                    }
                this.events = this.events.concat(b);
                this.pages.push(b);
                this.currentPage++;
                this.isComplete = this.isLoaded = true
            }
            c.callback && c.callback(this.pages[c.currentPage]);
            this.isComplete || this.fetch(c)
        }})
})(jQuery);
(function(c) {
    var a;
    GS.Models.Base.extend("GS.Models.Theme", {}, {themeID: null,version: "1.0",title: "Unknown",author: "Grooveshark",location: "default",premium: false,sponsored: false,sections: null,assetLocation: "",clickIDs: null,tracking: null,pageTracking: null,expandableTracking: null,artistNotifTracking: null,videoLBTracking: null,shareTracking: null,shareHeaderTracking: null,adSync: false,misc: null,videos: null,artistIDs: null,isFirstLoad: true,isFirstLoadPageheader: true,screensaver: false,ready: null,removeReady: null,
        onDisplay: null,onAuthChange: null,seenExpiration: null,tooltipHeader: null,tooltipMsg: null,CSS: "css",TOP: "top",BOTTOM: "bottom",CENTER: "center",LEFT: "left",RIGHT: "right",AUTO: "auto",SCALEX: "scalex",SCALEY: "scaley",backgroundImageSize: null,init: function(b) {
            a = this;
            b && this._super(b);
            this.assetLocation = "/themes/" + b.location + "/assets/"
        },bindAssets: function(b) {
            var g, h, m, k, n, o, q = 0, x;
            b = c(b);
            var v = b.attr("id");
            b.children().each(function() {
                var A = c(this);
                A.hasClass("flash") || A.click(a.callback(a.handleClick));
                if (A.hasClass("flash")) {
                    g = 
                    _.orEqual(A.attr("data-flash-wmode"), "opaque");
                    h = _.orEqual(A.attr("data-flash-width"), "100%");
                    m = _.orEqual(A.attr("data-flash-height"), "100%");
                    k = _.orEqual(A.attr("data-flash-src"), null);
                    flashParams = _.orEqual(A.attr("data-flash-params"), "");
                    flashVisualizer = _.orEqual(A.attr("data-flash-visualizer"), null);
                    if (k && A.attr("id")) {
                        x = flashVisualizer ? "visualizerTheme" : v + "-flash-" + q++;
                        A.append('<div id="' + x + '"></div>');
                        swfobject.embedSWF(a.assetLocation + k + "?ver=" + a.version + "&themeID=" + a.themeID + "&currentTarget=#" + 
                        A.attr("id") + flashParams, x, h, m, "9.0.0", null, null, {wmode: g})
                    }
                } else if (A.hasClass("img"))
                    if (o = _.orEqual(A.attr("data-img-src"), null)) {
                        if (A.hasClass("scalable"))
                            try {
                                a.backgroundImageSize = a.getBackgroundImageSize();
                                o = a.backgroundImageSize + o
                            } catch (t) {
                            }
                        n = c(new Image);
                        n.css({visibility: "hidden"}).bind("load", {section: b}, a.onImageLoad).attr("src", gsConfig.assetHost + a.assetLocation + o + "?ver=" + a.version).appendTo(A)
                    }
            })
        },bindAsset: function(b, g) {
            console.warn("asset", b, "section", g);
            var h, m, k, n, o = 0;
            g = c(g);
            var q = 
            g.attr("id"), x = c(b);
            console.warn("element", x);
            x.hasClass("flash") || x.click(a.callback(a.handleClick));
            if (x.hasClass("flash")) {
                h = _.orEqual(x.attr("data-flash-wmode"), "opaque");
                m = _.orEqual(x.attr("data-flash-width"), "100%");
                k = _.orEqual(x.attr("data-flash-height"), "100%");
                n = _.orEqual(x.attr("data-flash-src"), null);
                flashParams = _.orEqual(x.attr("data-flash-params"), "");
                flashVisualizer = _.orEqual(x.attr("data-flash-visualizer"), null);
                if (n && x.attr("id")) {
                    o = flashVisualizer ? "visualizerTheme" : q + "-flash-" + o++;
                    x.append('<div id="' + o + '"></div>');
                    swfobject.embedSWF(a.assetLocation + n + "?ver=" + a.version + "&themeID=" + a.themeID + "&currentTarget=#" + x.attr("id") + flashParams, o, m, k, "9.0.0", null, null, {wmode: h})
                }
            } else if (x.hasClass("img"))
                if (m = _.orEqual(x.attr("data-img-src"), null)) {
                    if (x.hasClass("scalable"))
                        try {
                            a.backgroundImageSize = a.getBackgroundImageSize();
                            m = a.backgroundImageSize + m
                        } catch (v) {
                        }
                    h = c(new Image);
                    h.css({visibility: "hidden"}).bind("load", {section: g}, a.onImageLoad).attr("src", gsConfig.assetHost + a.assetLocation + 
                    m + "?ver=" + a.version).appendTo(x)
                }
        },onImageLoad: function(b) {
            var g = c(this);
            b = b.data.section;
            var h = g.is("[display=none]") || b.is("[display=none]");
            g.parent().andSelf().show();
            var m = !b.is(":visible");
            b.show();
            var k = g[0].width, n = g[0].height;
            h && g.parent().andSelf().hide();
            g.css({visibility: "visible"}).attr({"data-img-width": k,"data-img-height": n});
            m && b.hide();
            a.position(b)
        },position: function(b) {
            var g = GS.page.getActiveController();
            if (!(!g || g.Class.fullName !== "GS.Controllers.Page.HomeController")) {
                b = c(b);
                var h, m, k, n, o, q, x, v, A, t, w, E, I, D, G, H, B, L, F = c(b).height(), K = c(b).width();
                b.children(".img").each(function() {
                    h = c(this);
                    m = h.find("img");
                    k = _.orEqual(parseInt(m.attr("data-img-width")), 0);
                    n = _.orEqual(parseInt(m.attr("data-img-height")), 0);
                    if (k && n) {
                        B = _.orEqual(h.attr("data-img-top"), 0);
                        L = _.orEqual(h.attr("data-img-bottom"), 0);
                        G = _.orEqual(h.attr("data-img-left"), 0);
                        H = _.orEqual(h.attr("data-img-right"), 0);
                        q = K - G - H;
                        o = F - B - L;
                        A = parseInt(_.orEqual(h.attr("data-img-min-width"), 0));
                        x = parseInt(_.orEqual(h.attr("data-img-min-height"), 
                        0));
                        v = parseInt(_.orEqual(h.attr("data-img-max-height"), o));
                        maxWidth = parseInt(_.orEqual(h.attr("data-img-max-width"), q));
                        t = h.attr("data-img-proportional") === "false" ? false : true;
                        switch (h.attr("data-img-scale")) {
                            case "scalex":
                                m.width(Math.min(Math.max(A, q), maxWidth));
                                t ? m.height(Math.round(m.width() / k * n)) : m.height(Math.min(Math.max(x, Math.round(o), v)));
                                break;
                            case "scaley":
                                m.height(Math.min(Math.max(x, o), v));
                                t ? m.width(Math.round(m.height() / n * k)) : m.width(Math.min(Math.max(A, Math.round(q), maxWidth)));
                                break;
                            case "fit":
                                w = Math.min(q / k, o / n);
                                m.width(Math.round(w * k));
                                m.height(Math.round(w * n));
                                break;
                            case "auto":
                            default:
                                if (t) {
                                    w = Math.max(q / k, o / n);
                                    m.width(Math.round(w * k));
                                    m.height(Math.round(w * n))
                                } else {
                                    m.width(Math.round(q / k * k));
                                    m.height(Math.round(o / n * n))
                                }
                                break
                        }
                        E = _.orEqual(h.attr("data-pos-x"), a.CENTER);
                        I = _.orEqual(h.attr("data-pos-y"), a.CENTER);
                        switch (E) {
                            case a.LEFT:
                                D = isNaN(G) ? G : G + "px";
                                m.css(a.LEFT, D);
                                break;
                            case a.RIGHT:
                                D = isNaN(H) ? H : H + "px";
                                m.css(a.RIGHT, D);
                                break;
                            case a.CENTER:
                                m.css(a.LEFT, Math.round((q - m.width()) / 
                                2) + "px");
                                break
                        }
                        switch (I) {
                            case a.TOP:
                                D = isNaN(B) ? B : B + "px";
                                m.css(a.TOP, D);
                                break;
                            case a.BOTTOM:
                                D = isNaN(L) ? L : L + "px";
                                m.css(a.BOTTOM, D);
                                break;
                            case a.CENTER:
                                m.css(a.TOP, Math.round((o - m.height()) / 2) + "px");
                                break
                        }
                    }
                });
                if (a.backgroundImageSize) {
                    b = a.getBackgroundImageSize();
                    if (b != a.backgroundImageSize) {
                        a.backgroundImageSize = b;
                        GS.theme.renderSection("#theme_home")
                    }
                }
            }
        },getBackgroundImageSize: function() {
            if (a.backgroundImageSize == "l_")
                return "l_";
            var b = c("#theme_home").width();
            c("#theme_home").height();
            if (b >= 1366)
                return "l_";
            else if (b >= 1024)
                return "m_";
            else if (a.backgroundImageSize != "m_")
                return "s_";
            return a.backgroundImageSize
        },handleClick: function(b) {
            var g = c(b.currentTarget), h;
            GS.theme.setLastDFPAction();
            switch (g.attr("data-click-action")) {
                case "playSong":
                    (b = g.attr("data-song-id")) && c.publish("gs.song.play", {songID: b,playOnAdd: true,getFeedback: true});
                    break;
                case "playAlbum":
                    b = g.attr("data-album-id");
                    verified = g.attr("data-album-verified") ? Boolean(parseInt(g.attr("data-album-verified"))) : true;
                    h = g.attr("data-album-shuffle") == 
                    "true";
                    b && c.publish("gs.album.play", {albumID: b,playOnAdd: true,getFeedback: true,shuffle: h,verified: verified});
                    break;
                case "playPlaylist":
                    b = g.attr("data-playlist-id");
                    h = g.attr("data-playlist-shuffle") == "true";
                    var m = g.attr("data-radio-enabled") == "true";
                    b && c.publish("gs.playlist.play", {playlistID: b,playOnAdd: true,getFeedback: true,shuffle: h});
                    m && setTimeout(function() {
                        GS.player.setAutoplay(true)
                    }, 5E3);
                    break;
                case "playStation":
                    b = g.attr("data-station-id");
                    h = g.attr("data-station-name");
                    if (b && h) {
                        GS.Models.Station.extraStations[b] = 
                        h;
                        c.publish("gs.station.play", {tagID: b,stationName: h})
                    }
                    break;
                case "playVideo":
                    b = new GS.Models.Video({src: g.attr("data-video-src"),swf: g.attr("data-video-swf"),title: _.orEqual(g.attr("data-video-title"), null),author: _.orEqual(g.attr("data-video-author"), null),tracking: _.orEqual(g.attr("data-video-tracking"), null),originalWidth: _.orEqual(g.attr("data-video-originalWidth"), null),originalHeight: _.orEqual(g.attr("data-video-originalHeight"), null)});
                    b.swf.length && GS.getLightbox().open("video", {video: b});
                    break;
                case "playVideos":
                    if (a.videos && a.videos.length) {
                        b = _.defined(b.index) ? b.index % a.videos.length : 0;
                        GS.getLightbox().open("video", {video: a.videos[b],videos: a.videos,index: b})
                    }
                    break;
                case "promotion":
                    GS.getLightbox().open("promotion", {theme: a});
                    break;
                case "openLightbox":
                    (b = g.attr("data-lightbox-name")) && GS.getLightbox().open(b);
                    break;
                case "expandable":
                    b = g.attr("data-expandable-id");
                    h = g.attr("data-expandable-height");
                    c(b).animate({height: h});
                    if (c.isArray(a.expandableTracking)) {
                        var k = (new Date).valueOf(), 
                        n = c("body"), o;
                        _.forEach(a.expandableTracking, function(q) {
                            q += q.indexOf("?") != -1 ? "&" + k : "?" + k;
                            o = new Image;
                            n.append(c(o).load(function(x) {
                                c(x.target).remove()
                            }).css("visibility", "hidden").attr("src", q))
                        })
                    }
                    break;
                case "collapse":
                    b = g.attr("data-expandable-id");
                    c(b).height(0);
                    break;
                default:
                    break
            }
            g.attr("data-click-id") && GS.service.logThemeOutboundLinkClick(a.themeID, g.attr("data-click-id"))
        }})
})(jQuery);
(function() {
    GS.Models.Base.extend("GS.Models.Event", {defaults: {EventID: 0,City: "",EventName: "",StartTime: "",TicketsURL: "",VenueName: "",ArtistName: "",searchText: ""}}, {init: function(c) {
            this._super(c);
            this.TicketsURL.match("utm_source") || (this.TicketsURL += "?utm_source=1&utm_medium=partner");
            this.searchText = [c.ArtistName, c.EventName, c.City, c.VenueName].join(" ").toLowerCase();
            if (!this.ArtistName) {
                this.ArtistName = this.EventName;
                c = this.ArtistName.lastIndexOf(" at ");
                if (c !== -1)
                    this.ArtistName = this.ArtistName.substring(0, 
                    c)
            }
        }})
})(jQuery);
(function(c) {
    GS.Models.Base.extend("GS.Models.UserSettings", {NOTIF_EMAIL_USER_FOLLOW: 1,NOTIF_EMAIL_INVITE_SIGNUP: 2,NOTIF_EMAIL_PLAYLIST_SUBSCRIBE: 16,NOTIF_EMAIL_NEW_FEATURE: 4096,NOTIF_CIVICSCIENCE: 32768,NOTIF_EMAIL_KINESIS: 65536,RSS_LISTENS: 2,RSS_FAVORITES: 1}, {UserID: 0,local: {restoreQueue: 0,lowerQuality: 0,noPrefetch: 0,playPauseFade: 0,crossfadeAmount: 5E3,crossfadeEnabled: 0,tooltips: 0,persistShuffle: 1,lastShuffle: 0,persistPinboard: 0,disablePlayerShortcuts: 0},FName: "",Email: "",Country: "",Zip: "",Sex: "",
        TSDOB: "",FeedsDisabled: 0,NotificationEmailPrefs: 0,emailNotifications: {userFollow: true,inviteSignup: true,playlistSubscribe: true,newFeature: true,civicScience: true,kinesis: true},rssFeeds: {listens: true,favorites: true},_hasLoadedSettings: false,init: function(a) {
            this._super(a);
            a = GS.store.get("player.restoreQueue");
            if (!_.defined(a)) {
                a = GS.store.get("player.restoreQueue" + this.UserID);
                if (_.defined(a))
                    try {
                        GS.store.set("player.restoreQueue", a)
                    } catch (b) {
                    }
            }
            this.local.restoreQueue = _.orEqual(a, 0);
            this.local.lowerQuality = 
            _.orEqual(GS.store.get("player.lowerQuality" + this.UserID), 0);
            this.local.noPrefetch = _.orEqual(GS.store.get("player.noPrefetch" + this.UserID), 0);
            this.local.playPauseFade = _.orEqual(GS.store.get("player.playPauseFade" + this.UserID), 0);
            this.local.crossfadeAmount = _.orEqual(GS.store.get("player.crossfadeAmount" + this.UserID), 5E3);
            this.local.crossfadeEnabled = _.orEqual(GS.store.get("player.crossfadeEnabled" + this.UserID), 0);
            this.local.lastShuffle = _.orEqual(GS.store.get("player.lastShuffle" + this.UserID), 0);
            this.local.persistShuffle = 
            _.orEqual(GS.store.get("player.persistShuffle" + this.UserID), 1);
            this.local.tooltips = _.orEqual(GS.store.get("user.tooltips" + this.UserID), 0);
            this.local.themeFlags = _.orEqual(GS.store.get("user.themeFlags" + this.UserID), 0);
            this.local.persistPinboard = _.orEqual(GS.store.get("user.persistPinboard" + this.UserID), 0);
            this.local.disablePlayerShortcuts = _.orEqual(GS.store.get("user.disablePlayerShortcuts" + this.UserID), 0);
            this.applyUserSettings(this.local);
            if (this.UserID <= 0)
                this._hasLoadedSettings = true
        },applyUserSettings: function(a) {
            if (a.disablePlayerShortcuts)
                c(document).unbind(".playerShortcut");
            else
                GS.player && GS.player.addShortcuts()
        },getUserSettings: function(a, b) {
            if (this.UserID)
                if (this._hasLoadedSettings)
                    c.isFunction(a) && a(this);
                else
                    GS.service.getUserSettings(this.callback(this._onSettingsSuccess, a), this.callback(this._onSettingsFailed, b))
        },_onSettingsSuccess: function(a, b) {
            if (b.hasOwnProperty("userInfo")) {
                c.extend(this, b.userInfo);
                if (this.hasOwnProperty("LName") && this.hasOwnProperty("FName")) {
                    var g = this.LName, h = this.FName;
                    this.LName = c.trim(this.LName);
                    this.FName = c.trim(this.FName);
                    if (this.LName) {
                        this.FName += 
                        " " + this.LName;
                        this.FName = c.trim(this.FName)
                    }
                    delete this.LName;
                    var m = {};
                    if (this.FName !== h)
                        m.FName = this.FName;
                    if (g)
                        m.LName = "";
                    _.isEmpty(m) || GS.service.changeUserInfoEx(m)
                }
                this.NotificationEmailPrefs = parseInt(this.NotificationEmailPrefs, 10);
                this.FeedsDisabled = parseInt(this.FeedsDisabled, 10);
                this._updateBitmaskProps()
            }
            this._hasLoadedSettings = true;
            c.isFunction(a) && a(this)
        },_onSettingsFailed: function(a) {
            c.isFunction(a) && a(this)
        },_updateBitmaskProps: function() {
            this.emailNotifications = {userFollow: !(this.NotificationEmailPrefs & 
                GS.Models.UserSettings.NOTIF_EMAIL_USER_FOLLOW),inviteSignup: !(this.NotificationEmailPrefs & GS.Models.UserSettings.NOTIF_EMAIL_INVITE_SIGNUP),playlistSubscribe: !(this.NotificationEmailPrefs & GS.Models.UserSettings.NOTIF_EMAIL_PLAYLIST_SUBSCRIBE),newFeature: !(this.NotificationEmailPrefs & GS.Models.UserSettings.NOTIF_EMAIL_NEW_FEATURE),civicScience: !(this.NotificationEmailPrefs & GS.Models.UserSettings.NOTIF_CIVICSCIENCE),kinesis: !(this.NotificationEmailPrefs & GS.Models.UserSettings.NOTIF_EMAIL_KINESIS)};
            this.rssFeeds = {listens: !(this.FeedsDisabled & GS.Models.UserSettings.RSS_LISTENS),favorites: !(this.FeedsDisabled & GS.Models.UserSettings.RSS_FAVORITES)}
        },updateProfile: function(a, b, g) {
            a = c.extend({}, {FName: this.FName,Email: this.Email,Country: this.Country,Zip: this.Zip,Sex: this.Sex,TSDOB: this.TSDOB,PageName: GS.user.PathName}, a);
            if (this.UserID < 1)
                this._saveProfileFailed({statusCode: -1});
            else {
                a.PageName === GS.user.PathName && delete a.PageName;
                var h;
                for (h in a)
                    a.hasOwnProperty(h) && a[h] == this[h] && delete a[h];
                if (_.isEmpty(a))
                    this._saveProfileSuccess({statusCode: 1});
                else if ((a.hasOwnProperty("Email") || a.hasOwnProperty("PageName")) && !_.defined(a.password))
                    GS.getLightbox().open("confirmPasswordProfile", {params: a,callback: b,errback: g});
                else {
                    h = a.password;
                    delete a.password;
                    GS.service.changeUserInfoEx(a, h, this.callback(this._saveProfileSuccess, a, b, g), this.callback(this._saveProfileFailed, g))
                }
            }
        },_saveProfileSuccess: function(a, b, g, h) {
            if (h && h.statusCode === 1) {
                c.extend(this, a);
                if (a.hasOwnProperty("PageName")) {
                    GS.router.deleteCachedPageName(GS.user.PathName);
                    a.PageName !== "" && GS.router.cachePageName(a.PageName, "user", GS.user.UserID);
                    GS.user.PathName = a.PageName;
                    c.publish("gs.auth.user.pathName")
                }
                c.isFunction(b) && b(h)
            } else
                this._saveProfileFailed(g, h)
        },_saveProfileFailed: function(a, b) {
            c.isFunction(a) && a(b)
        },changeNotificationSettings: function(a, b, g) {
            a = c.extend({}, this.emailNotifications, a);
            a = (a.userFollow ? 0 : GS.Models.UserSettings.NOTIF_EMAIL_USER_FOLLOW) | (a.inviteSignup ? 0 : GS.Models.UserSettings.NOTIF_EMAIL_INVITE_SIGNUP) | (a.playlistSubscribe ? 0 : GS.Models.UserSettings.NOTIF_EMAIL_PLAYLIST_SUBSCRIBE) | 
            (a.newFeature ? 0 : GS.Models.UserSettings.NOTIF_EMAIL_NEW_FEATURE) | (a.civicScience ? 0 : GS.Models.UserSettings.NOTIF_CIVICSCIENCE) | (a.kinesis ? 0 : GS.Models.UserSettings.NOTIF_EMAIL_KINESIS);
            if (this.UserID < 1)
                c.isFunction(g) && g("Not logged in");
            else
                a === this.NotificationEmailPrefs ? this._notificationsSuccess(a, b, g, {statusCode: 1}) : GS.service.changeNotificationSettings(a, this.callback(this._notificationsSuccess, a, b, g), this.callback(this._notificationsFailed, g))
        },_notificationsSuccess: function(a, b, g, h) {
            if (h && h.statusCode === 
            1) {
                this.NotificationEmailPrefs = a;
                this._updateBitmaskProps();
                c.isFunction(b) && b(h)
            } else
                this._notificationsFailed(g, h)
        },_notificationsFailed: function(a, b) {
            c.isFunction(a) && a(b)
        },changeRSSSettings: function(a, b, g) {
            a = c.extend({}, this.rssFeeds, a);
            a = (a.listens ? 0 : GS.Models.UserSettings.RSS_LISTENS) | (a.favorites ? 0 : GS.Models.UserSettings.RSS_FAVORITES);
            if (this.UserID < 1)
                c.isFunction(g) && g("Not logged in");
            else
                a === this.FeedsDisabled ? this._rssSuccess(a, b, g, {statusCode: 1}) : GS.service.changeFeedSettings(a, this.callback(this._notificationsSuccess, 
                a, b, g), this.callback(this._notificationsFailed, g))
        },_rssSuccess: function(a, b, g, h) {
            if (h && h.statusCode === 1) {
                this.FeedsDisabled = a;
                this._updateBitmaskProps();
                c.isFunction(b) && b(h)
            } else
                this._rssFailed(g, h)
        },_rssFailed: function(a, b) {
            c.isFunction(a) && a(b)
        },changeLocalSettings: function(a, b) {
            c.extend(this.local, a);
            GS.store.set("player.restoreQueue", this.local.restoreQueue);
            GS.store.set("player.lowerQuality" + this.UserID, this.local.lowerQuality);
            GS.store.set("player.noPrefetch" + this.UserID, this.local.noPrefetch);
            GS.store.set("player.playPauseFade" + this.UserID, this.local.playPauseFade);
            GS.store.set("player.crossfadeAmount" + this.UserID, this.local.crossfadeAmount);
            GS.store.set("player.crossfadeEnabled" + this.UserID, this.local.crossfadeEnabled);
            GS.store.set("player.lastShuffle" + this.UserID, this.local.lastShuffle);
            GS.store.set("player.persistShuffle" + this.UserID, this.local.persistShuffle);
            GS.store.set("user.tooltips" + this.UserID, this.local.tooltips);
            GS.store.set("user.themeFlags" + this.UserID, this.local.themeFlags);
            GS.store.set("user.persistPinboard" + this.UserID, this.local.persistPinboard);
            GS.store.set("user.disablePlayerShortcuts" + this.UserID, this.local.disablePlayerShortcuts);
            this.applyUserSettings(this.local);
            c.publish("gs.settings.local.update", this.local);
            c.isFunction(b) && b(this)
        }})
})(jQuery);
(function(c) {
    var a;
    GS.Models.Base.extend("GS.Models.Video", {id: "VideoID",artPath: "http://images.grooveshark.com/static/featured/",defaults: {title: "",author: "",type: "iframe",swf: "/webincludes/flash/videoplayer.swf",src: "",VideoID: "",VimeoID: ""},wrapYoutube: function(b, g) {
            if (!b.thumbnail)
                var h = b.Thumbnails && b.Thumbnails.length && b.Thumbnails[0] ? b.Thumbnails[0].url : "";
            g = g || b.Title || b.title || b.Video;
            return this.wrap(c.extend(true, {}, b, {title: g,duration: _.millisToMinutesSeconds((b.duration || b.Duration) * 
                1E3),type: "youtube",thumbnail: h,width: _.orEqual(b.Width, 480),height: _.orEqual(b.Height, 385),author: _.orEqual(b.Author, "")}))
        },exploreItemRenderer: function(b) {
            var g = "" + ('<a class="featuredVideoName name ellipsis" data-videoid="' + b.VideoID + '" data-videogroup="' + b.set + '">' + b.title + "</a>"), h = ['<img height="120" src="', b.getImageURL(120), '"/>'].join(""), m = ['<a href="', b.uri, '">', b.attributor, "</a>"].join("");
            m = c("<span></span>").localeDataString("BY_ARTIST", {artist: m});
            var k = b.set ? '<span class="group">in ' + 
            b.set + "</span>" : "";
            return ['<div  class="tooltip" data-tip-type="video" data-videoid="', b.VideoID, '" data-cachePrefix="', b.cachePrefix, '"><a class="videoImage insetBorder height120">', h, '<span class="videoPlayBtn" data-videoid="', b.VideoID, '" data-videogroup="' + b.set + '"></span></a>', '<div class="meta">', g, '<span class="by ellipsis">', m.render(), "</span>", k, "</div></div>"].join("")
        },searchItemRenderer: function(b) {
            var g = ['<a class="name ellipsis" title="', b.title, '">' + b.title + "</a>"].join(""), h = ['<img height="90" src="', 
                b.thumbnail, '"/>'].join("");
            return ['<a class="videoImage insetBorder height120" title="', b.title, '">', h, '<span class="videoPlayBtn" data-videoid="', b.VideoID, '" data-videogroup="' + b.set + '"></span></a>', '<div class="meta">', g, "</div></div>"].join("")
        }}, {title: "",author: "",type: "flash",swf: "/webincludes/flash/videoplayer.swf",src: "",thumb: null,thumbnail: null,thumbTracking: null,originalWidth: null,originalHeight: null,id: "",width: 480,height: 385,flashvars: {version: gsConfig.coreVersion},params: {allowscriptaccess: "always",
            allowfullscreen: true},attributes: {name: "videoPlayer"},object: null,init: function(b) {
            a = this;
            if (b) {
                this._super(b);
                this.type = _.orEqual(b.embedType, b.type);
                this.VideoID = _.orEqualEx(b.vimeoID, b.VimeoID, b.videoID, b.VideoID)
            }
        },embed: function(b, g) {
            if (this.type == "flash") {
                g = _.orEqual(g, a.refreshWindow);
                object = swfobject.embedSWF(this.swf, b, this.width, this.height, "9.0.0", null, this.flashvars, this.params, this.attributes, g)
            } else if (this.type == "iframe" || this.type == "vimeo")
                return GS.getVimeo().attachPlayer(this.VideoID, 
                this.width, this.height, b, g);
            else
                this.type == "youtube" && GS.getYoutube().attachPlayer(this.VideoID, this.width, this.height, b, g)
        },refreshWindow: function() {
            setTimeout(function() {
                c(window).resize()
            }, 500)
        },getImageURL: function(b) {
            b = _.orEqual(b, 70);
            if (this.Picture)
                return GS.Models.Video.artPath + b + "_" + this.Picture;
            return GS.Models.Video.artPath + b + "_artist.png"
        }})
})(jQuery);
(function(c) {
    function a(n, o, q, x) {
        var v = {};
        v.method = n;
        v.format = "jsonp";
        v.data = JSON.stringify(o);
        c.ajax({contentType: "application/javascript",type: "GET",dataType: "jsonp",url: "https://surveys.grooveshark.com/panel/api.pro",data: v,error: function(A, t, w) {
                console.log("Survey AJAX error occured: " + w + " Status: " + t);
                if (c.isFunction(x)) {
                    A = {};
                    A.message = t;
                    A.callback = q;
                    c.isFunction(x) && x(A)
                }
            },success: function(A) {
                if (A.success)
                    c.isFunction(q) && q(A);
                else {
                    console.log("Survey error occured: " + JSON.stringify(A));
                    if (c.isFunction(x)) {
                        var t = 
                        {};
                        t.errno = A.errno;
                        t.message = A.error;
                        t.callback = q;
                        c.isFunction(x) && x(t)
                    }
                }
            }})
    }
    var b = false, g = false, h = false, m = false, k = null;
    GS.Models.Base.extend("GS.Models.Surveys", {panelID: 9,numPointsForPlus: 300,numPointsForAnywhere: 500,init: function() {
            c.subscribe("gs.player.ready", function() {
                g = true;
                GS.Models.Surveys.askOptInCivicScience(6E5);
                GS.Models.Surveys.setupAvailableNotif(18E4)
            });
            c.subscribe("gs.app.ready", function() {
                b = true;
                GS.Models.Surveys.askOptInCivicScience(6E5);
                GS.Models.Surveys.setupAvailableNotif(18E4)
            });
            c.subscribe("gs.auth.update", function() {
                GS.Models.Surveys.askOptInCivicScience(6E5);
                GS.Models.Surveys.setupAvailableNotif(18E4);
                GS.user.Flags & GS.Models.User.FLAG_CLEARVOICE && (GS.user.Flags & GS.Models.User.FLAG_KINESIS) == 0 && GS.user.getPoints(function(n) {
                    GS.getLightbox().open("surveysConvert", {points: n})
                })
            });
            c.subscribe("gs.state.active", function() {
                GS.Models.Surveys.askOptInCivicScience(45E3);
                GS.Models.Surveys.setupAvailableNotif(0)
            })
        },askOptInCivicScience: function(n) {
            !b || !g || GS.user.subscription.isPremium() || 
            GS.user.settings.getUserSettings(function(o) {
                if (!((GS.user.isLoggedIn ? !o.emailNotifications.civicScience : GS.store.get("civicscience.optOut")) || GS.getNotice().isSurveyNotifOpen())) {
                    var q = GS.store.get("civicscience.10" + GS.user.UserID);
                    if (!_.defined(q)) {
                        q = Math.floor(Math.random() * 10) == 0 ? 2 : 1;
                        GS.store.set("civicscience.10" + GS.user.UserID, q)
                    }
                    if (q == 1) {
                        if (GS.player.player.getNumVisitedDays() >= 5 && GS.player.player.getNumPlayedSongs >= 60)
                            GS.Models.Surveys.userHasKinesis() || m || (m = setTimeout(function() {
                                m = false;
                                if (!GS.user.isIdle()) {
                                    GS.getNotice().displaySurveyInvitationV2();
                                    GS.getGuts().logEvent("kinesis.ctaV2.seen", {userID: GS.user.UserID,timestamp: (new Date).getTime()})
                                }
                            }, n))
                    } else if (q == 2)
                        if (GS.store.get("civicscience.hasSeenInvitation" + GS.user.UserID))
                            GS.Models.Surveys.setupCivicScience(n);
                        else
                            h || (h = setTimeout(function() {
                                var x = window.location.hash.toString();
                                x = x.replace(/^#!\/|^#\/|^\/|^#!|^#/, "");
                                if (!GS.user.subscription.isPremium() && x.indexOf("signup") !== 0 && (!GS.page.activePage || GS.page.activePage.type != 
                                "surveys")) {
                                    h = false;
                                    x = GS.user.isIdle();
                                    var v = GS.user.isLoggedIn ? !o.emailNotifications.civicScience : GS.store.get("civicscience.optOut");
                                    if (!(x || v)) {
                                        x = {text: c.localize.getString("SURVEY_CIVICSCIENCE_OPTIN"),id: "optInCivicScience",name: "GS",type: "radio",answers: [{text: c.localize.getString("SURVEY_CIVICSCIENCE_OPTIN_SURE"),id: 0}, {text: c.localize.getString("SURVEY_CIVICSCIENCE_OPTIN_NO"),id: 1}]};
                                        GS.getNotice().displaySurveyOptIn({question: x,callback: function() {
                                                GS.Models.Surveys.setupCivicScience(0)
                                            }})
                                    }
                                }
                            }, 
                            n))
                }
            })
        },setupCivicScience: function(n) {
            var o = {};
            o.answeredList = [];
            o.answeredIndex = 0;
            o.session = new civicscience.iqapi.Session(473, false);
            o.askQuestion = function(q) {
                if (q == null) {
                    var x = new Date;
                    if (GS.store.get("civicscience.polltroll" + GS.user.UserID) != x.toDateString()) {
                        GS.getNotice().displaySurveyInvitation();
                        GS.store.set("civicscience.polltroll" + GS.user.UserID, x.toDateString())
                    }
                } else {
                    x = {text: q.getText(),id: q.getId(),name: "CivicScience",type: "radio"};
                    q = q.getOptions();
                    var v = [];
                    _.forEach(q, function(A) {
                        v.push({text: A.getText(),
                            id: A.getId(),option: A})
                    });
                    x.answers = v;
                    o.question = x;
                    GS.getNotice().displaySurveyQuestion({question: x})
                }
            };
            o.handleCommit = function() {
                o.handleResults()
            };
            o.handleResults = function() {
                o.answeredList = o.session.getAnsweredQuestions();
                var q = o.answeredList[o.answeredIndex];
                if (o.question.id == 484 || o.question.id == 7078)
                    if (GS.store) {
                        var x = GS.store.get("adhelper");
                        x || (x = {ageRange: null,gender: null});
                        var v = q.getSelectedOption();
                        if (o.question.id == 484)
                            x.gender = v.getId();
                        else if (o.question.id == 7078)
                            x.ageRange = v.getId();
                        GS.store.set("adhelper", x)
                    }
                q.getResults(o.showResults);
                GS.getGuts().logEvent("civicscience.questionAnswered", {userID: GS.user.UserID,questionNum: o.answeredIndex,timestamp: (new Date).getTime()});
                o.answeredIndex++
            };
            o.showResults = function(q, x) {
                if (x) {
                    var v = {};
                    v.questionText = q.getText();
                    v.numOfTotalResponses = x.getTotal();
                    var A = x.getCommittedOption(), t = q.getOptions(), w = [];
                    A.id = A.getId();
                    _.forEach(t, function(D) {
                        var G = x.getCountForOption(D), H = 0;
                        if (v.numOfTotalResponses != 0) {
                            H = Math.round(100 * G / v.numOfTotalResponses);
                            w.push({text: D.getText(),id: D.getId(),percent: H,selected: A.id == D.getId() ? true : false})
                        }
                    });
                    v.answers = w;
                    t = w[0].percent;
                    var E = w[0];
                    A = w[0];
                    for (var I = 0; I < w.length - 1; I++) {
                        if (w[I + 1].selected)
                            A = w[I + 1];
                        if (t < w[I + 1].percent) {
                            t = w[I + 1].percent;
                            E = w[I + 1]
                        }
                    }
                    v.selectedAnswer = A;
                    v.mostPopular = E;
                    GS.getNotice().displaySurveyResult({responses: v,callback: function() {
                            o.session.getNextUnansweredQuestion(o.askQuestion)
                        }})
                }
            };
            if (GS.user.userPrivacyTokens && GS.user.userPrivacyTokens.authenticated) {
                o.session.setExternalUserId(GS.user.userPrivacyTokens.authenticated);
                GS.user.civicScience = o;
                GS.Models.Surveys.initCivicScienceNotifTracking(o, n)
            }
        },initCivicScienceNotifTracking: function(n, o) {
            h || (h = setTimeout(function() {
                h = false;
                var q = window.location.hash.toString();
                q = q.replace(/^#!\/|^#\/|^\/|^#!|^#/, "");
                if (!GS.user.subscription.isPremium() && q.indexOf("signup") !== 0 && (!GS.page.activePage || GS.page.activePage.type != "surveys")) {
                    q = GS.user.isIdle();
                    !(GS.user.isLoggedIn ? !GS.user.settings.emailNotifications.civicScience : GS.store.get("civicscience.optOut")) && !q && n.session.getNextUnansweredQuestion(n.askQuestion)
                }
            }, 
            o))
        },changeCivicScienceSettings: function(n) {
            if (n)
                if (GS.user.isLoggedIn)
                    GS.user.settings.changeNotificationSettings({civicScience: false}, function() {
                        c.publish("gs.notification", {type: "notice",message: c.localize.getString("SURVEY_CIVICSCIENCE_OPTOUT")});
                        GS.getGuts().logEvent("civicscience.optOut", {userID: GS.user.UserID,timestamp: (new Date).getTime()})
                    });
                else {
                    GS.store.set("civicscience.optOut", true);
                    c.publish("gs.notification", {type: "notice",message: c.localize.getString("SURVEY_CIVICSCIENCE_OPTOUT")});
                    GS.getGuts().logEvent("civicscience.optOut", {userID: GS.user.UserID,timestamp: (new Date).getTime()})
                }
        },userHasKinesis: function() {
            return GS.user.Flags & GS.Models.User.FLAG_KINESIS
        },changeKinesisFlag: function(n) {
            GS.user.Flags = n ? GS.user.Flags ^ GS.Models.User.FLAG_KINESIS : GS.user.Flags | GS.Models.User.FLAG_KINESIS
        },setupAvailableNotif: function(n) {
            if (b && GS.user.isLoggedIn && GS.Models.Surveys.userHasKinesis() && !GS.store.get("kinesis.notifications" + GS.user.UserID))
                k || (k = setTimeout(this.callback(function() {
                    if (GS.Models.Surveys.userHasKinesis() && 
                    !GS.user.isIdle()) {
                        if (GS.user.surveys && GS.user.surveys.availableSurveys && GS.user.surveys.completedSurveys)
                            return;
                        GS.Models.Surveys.initKinesis("notif", GS.Models.Surveys.displaySurveyAvailableNotif)
                    }
                    k = null
                }), n))
        },displaySurveyAvailableNotif: function(n) {
            var o = GS.store.get("kinesis.seenSurveysNotifLast" + GS.user.UserID);
            if (!((new Date).getTime() - o < 864E5)) {
                var q = GS.store.get("kinesis.seenSurveysV2" + GS.user.UserID);
                n.getAvailableSurveys("all", function(x) {
                    if (x.success) {
                        n.availableSurveys = x.surveys;
                        n.getAllProfileSurveysStatus(function() {
                            var v = 
                            n.availableSurveys, A = [], t = false;
                            if (q)
                                for (var w = 0; w < v.length; w++) {
                                    t = false;
                                    for (var E = 0; E < q.length; E++)
                                        if (v[w].projectid == q[E]) {
                                            t = true;
                                            break
                                        }
                                    t || A.push(v[w])
                                }
                            else
                                A = v;
                            A.length && n.getCompletedSurveys("all", function(I) {
                                if (I.success) {
                                    n.completedSurveys = I.surveys;
                                    I = n.completedSurveys;
                                    temp = A;
                                    A = [];
                                    for (var D = 0; D < temp.length; D++) {
                                        t = false;
                                        for (var G = 0; G < I.length; G++)
                                            if (temp[D].projectid == I[G].projectid) {
                                                t = true;
                                                break
                                            }
                                        t || A.push(temp[D])
                                    }
                                    if (A.length) {
                                        A.sort(function(H, B) {
                                            return B.points - H.points
                                        });
                                        GS.getNotice().displaySurveyAvailable(A[0].points);
                                        GS.getGuts().logEvent("surveysAvailableNotif", {points: A[0].points});
                                        GS.store.set("kinesis.seenSurveysNotifLast" + GS.user.UserID, (new Date).getTime())
                                    }
                                }
                            })
                        })
                    }
                })
            }
        },removeKinesisFromUser: function(n, o) {
            GS.service.removeKinesisFromUser(n, o)
        },addKinesisToUser: function(n, o) {
            GS.service.addKinesisToUser(n, o)
        },_addKinesisToUser: function(n, o) {
            GS.service.addKinesisToUser(this.callback("createPanelistCallback", n, o), this.callback("createPanelistErrback"))
        },getKinesisUserPassword: function(n, o) {
            GS.service.getKinesisUserPassword(n, 
            o)
        },_getKinesisUserPasswordCallback: function(n, o) {
            n.password = o;
            n.username = GS.user.UserID + "@gsuser.com";
            GS.Models.Surveys.loginPanelist(n.username, n.password, this.callback("_loginPanelistCallback", n), this.callback("_loginPanelistErrback", n))
        },_getKinesisUserPasswordErrback: function(n) {
            GS.Models.Surveys.wrapSurveysObject(n)
        },initKinesis: function(n, o) {
            var q = GS.Models.Surveys.createPanelistObject(n);
            q.finalCallback = o;
            GS.user.isLoggedIn && q.hasKinesis ? GS.Models.Surveys.getKinesisUserPassword(this.callback("_getKinesisUserPasswordCallback", 
            q), this.callback("_getKinesisUserPasswordErrback", q)) : GS.Models.Surveys.wrapSurveysObject(q)
        },createPanelistObject: function(n) {
            var o = {};
            n = _.orEqual(n, "login");
            o.hasKinesis = GS.Models.Surveys.userHasKinesis();
            o.panelistid = null;
            o.seskey = null;
            o.availableSurveys = [];
            o.completedSurveys = [];
            o.finalCallback = null;
            o.from = n;
            return o
        },loginPanelist: function(n, o, q, x) {
            a("portal.auth.login", {panelid: GS.Models.Surveys.panelID,portalid: "1",username: n,password: o}, q, x)
        },_loginPanelistCallback: function(n, o) {
            if (o.seskey) {
                n.seskey = 
                o.seskey;
                n.panelistid = o.panelistid;
                GS.Models.Surveys.wrapSurveysObject(n)
            } else
                this._loginPanelistErrback(n, o)
        },_loginPanelistErrback: function(n, o) {
            if (o.errno == 40010) {
                n.from = "create";
                GS.Models.Surveys.initCreateRoute(n, this.callback("createConfirm", n), this.callback("createPanelistErrback", n))
            } else {
                var q = n.finalCallback || o.originalCallback;
                n = this.createPanelistObject("login");
                n.finalCallback = q;
                GS.Models.Surveys.wrapSurveysObject(n)
            }
        },initCreateRoute: function(n, o, q) {
            n = _.orEqual(n, GS.Models.Surveys.createPanelistObject("create"));
            GS.Models.Surveys.createPanelist(n, o, q)
        },createPanelist: function(n, o, q) {
            var x = GS.user.Sex;
            x = x == "M" ? 1 : x == "F" ? 2 : null;
            a("portal.panelist.create", {panelid: GS.Models.Surveys.panelID,datapoints: [{label: "email",answer: n.username}, {label: "password",answer: n.password}, {label: "gender",answer: x}, {label: "zip",answer: GS.user.Zip}, {label: "dma",answer: gsConfig.country.DMA}, {label: "dob",answer: GS.user.TSDOB}]}, o, q)
        },createConfirm: function(n, o) {
            a("portal.panelist.confirm", {panelid: GS.Models.Surveys.panelID,panelistid: o.panelistid,
                verification: o.verification}, this.callback("_addKinesisToUser", n), this.callback("createPanelistErrback"))
        },createPanelistCallback: function(n, o) {
            if (o.seskey) {
                n.seskey = o.seskey;
                n.panelistid = o.panelistid;
                GS.Models.Surveys.wrapSurveysObject(n)
            } else
                o.success ? GS.Models.Surveys.loginPanelist(n.username, n.password, this.callback("_loginPanelistCallback", n), this.callback("_loginPanelistErrback", n)) : this.createPanelistErrback(n, o)
        },createPanelistErrback: function(n, o) {
            GS.Models.Surveys.publishGeneralError(o);
            n && c.isFunction(n.finalCallback) && n.finalCallback(n)
        },wrapSurveysObject: function(n) {
            GS.user.surveys = GS.Models.Surveys.wrap(n)
        },publishGeneralError: function(n) {
            c.publish("gs.notification", {type: "error",message: "Oops! Something went wrong. Please <a href='http://help.grooveshark.com/customer/portal/topics/31006-surveys/articles' target='_blank'>contact our friendly support team </a> with the error number " + n.errno + " for assistance."})
        }}, {seskey: null,username: null,password: null,panelistid: null,from: null,
        hasKinesis: false,availableSurveys: [],completedSurveys: [],profiles: [],init: function(n) {
            this._super(n);
            this.hasKinesis = n.hasKinesis;
            this.seskey = n.seskey;
            this.from = n.from;
            this.username = n.username;
            this.password = n.password;
            this.panelistid = n.panelistid;
            this.profiles = _.orEqual(n.profiles, []);
            this.availableSurveys = _.orEqual(n.availableSurveys, []);
            this.completedSurveys = _.orEqual(n.completedSurveys, []);
            c.isFunction(n.finalCallback) && n.finalCallback(this)
        },handleInvalidSession: function(n, o, q, x, v) {
            if (v.errno == 
            30100 && o.seskey)
                GS.Models.Surveys.loginPanelist(this.username, this.password, this.callback(function(A) {
                    if (A.seskey) {
                        this.seskey = A.seskey;
                        this.panelistID = A.panelistid;
                        o.seskey = A.seskey;
                        a(n, o, q, x)
                    } else
                        c.isFunction(x) && x()
                }), x);
            else
                c.isFunction(x) && x(v)
        },logoutPanelist: function(n, o) {
            a("portal.auth.logout", {seskey: this.seskey}, n, o)
        },updatePanelist: function(n, o, q) {
            n = {seskey: this.seskey,datapoints: n};
            a("portal.panelist.update", n, o, this.callback("handleInvalidSession", "portal.panelist.update", n, o, q))
        },
        validateSeskey: function(n, o) {
            a("portal.auth.validate", {seskey: this.seskey}, n, o)
        },getPanelistInfo: function(n, o, q) {
            n = {seskey: this.seskey,datapoints: n};
            a("portal.panelist.read", n, o, this.callback("handleInvalidSession", "portal.panelist.read", n, o, q))
        },getAvailableSurveys: function(n, o, q) {
            n = {seskey: this.seskey,limit: n};
            a("portal.survey.available", n, o, this.callback("handleInvalidSession", "portal.survey.available", n, o, q))
        },getCompletedSurveys: function(n, o, q) {
            n = {seskey: this.seskey,limit: n};
            a("portal.survey.completed", 
            n, o, this.callback("handleInvalidSession", "portal.survey.completed", n, o, q))
        },getAllSurveys: function(n, o, q) {
            o = _.orEqual(o, 5);
            --o > 0 && c.isFunction(q) ? this.getAvailableSurveys("all", this.callback(function(x) {
                this.availableSurveys = c.isArray(x.surveys) ? x.surveys : [];
                this.getCompletedSurveys("all", this.callback(function(v) {
                    this.completedSurveys = c.isArray(v.surveys) ? v.surveys : [];
                    this.availableSurveys.length + this.completedSurveys.length == 0 ? setTimeout(this.callback(function() {
                        this.getAllSurveys("all", o, q)
                    }), 
                    3E3) : q(this)
                }))
            })) : q(this)
        },getAllProfileSurveysStatus: function(n, o) {
            this.profiles = [];
            this.getPanelistInfo(["profile1", "profile2", "profile3", "profile4", "profile5", "profile6", "profile7", "profile8", "profile9", "profile10", "profile11", "profile12", "profile13", "profile14", "profile15"], this.callback(function(q) {
                if (q.success)
                    for (var x = 0; x < q.values.length; x++) {
                        var v = q.values[x].label;
                        v = v.length == 8 ? v.substring(7, 8) : v.substring(7, 9);
                        if (q.values[x].answer) {
                            for (var A = [], t = 0; t < this.availableSurveys.length; t++)
                                if (this.availableSurveys[t].subject.substring(0, 
                                15) !== "Profile Survey:")
                                    A.push(this.availableSurveys[t]);
                                else {
                                    var w;
                                    if (this.availableSurveys[t].body.length == 22)
                                        w = this.availableSurveys[t].body.substring(20, 21);
                                    else if (this.availableSurveys[t].body.length == 23)
                                        w = this.availableSurveys[t].body.substring(20, 22);
                                    w === v ? this.profiles.push(this.availableSurveys[t]) : A.push(this.availableSurveys[t])
                                }
                            this.availableSurveys = A
                        }
                    }
                n()
            }), o)
        },getEverything: function(n) {
            this.getAvailableSurveys("all", this.callback(function(o) {
                this.availableSurveys = c.isArray(o.surveys) ? 
                o.surveys : [];
                this.getAllProfileSurveysStatus(this.callback(function() {
                    this.getCompletedSurveys("all", this.callback(function(q) {
                        this.completedSurveys = c.isArray(q.surveys) ? q.surveys : [];
                        if (c.isFunction(n))
                            this.availableSurveys.length + this.completedSurveys.length == 0 && this.from == "create" ? this.getAllSurveys("all", 24, n) : n(this)
                    }))
                }))
            }))
        }})
})(jQuery);
(function() {
    GS.Models.Base.extend("GS.Models.Visualizer", {}, {title: "",author: "",swf: "/webincludes/flash/visualizerplayer.swf",src: "",thumb: null,width: 480,height: 270,flashvars: {version: gsConfig.coreVersion},params: {allowscriptaccess: "always",allowfullscreen: true,wmode: "window"},attributes: {name: "visualizerPlayer"},object: null,init: function(c) {
            c && this._super(c)
        },embed: function(c) {
            object = swfobject.embedSWF(this.swf, c, this.width, this.height, "9.0.0", null, this.flashvars, this.params, this.attributes)
        }})
})(jQuery);
(function() {
    GS.Models.Base.extend("GS.Models.Promotion", {promotions: {1: {title: "Can't Wait to Get It On Playlists",view: "trojan"},557: {title: "Samsung Note Valentines",view: "samsung",query: "romance love valentine"}},submitPlaylistForCampaign: function(c, a, b, g) {
            GS.service.submitPlaylistForCampaign(c, a, b, g)
        },submitSongVoteForCampaign: function(c, a, b, g) {
            GS.service.submitSongVoteForCampaign(c, a, b, g)
        }}, {campaignID: 0,title: null,view: null,query: null,playlists: null,init: function(c) {
            this.campaignID = c;
            this.title = 
            GS.Models.Promotion.promotions[this.campaignID].title;
            this.view = GS.Models.Promotion.promotions[this.campaignID].view;
            this.query = GS.Models.Promotion.promotions[this.campaignID].query
        },getPlaylistsForCampaign: function(c, a) {
            this.query ? this.getQueryPlaylistsForCampaign(this.query, c, a) : GS.service.getPlaylistsForCampaign(this.campaignID, this.callback(["savePlaylists", c]), a)
        },getQueryPlaylistsForCampaign: function(c, a, b) {
            GS.service.getResultsFromSearch(c, "Playlists", false, this.callback([function(g) {
                    return this.playlists = 
                    GS.Models.Playlist.wrapCollection(g.result)
                }, a]), b)
        },savePlaylists: function(c) {
            return this.playlists = GS.Models.Playlist.wrapCollection(c)
        }})
})(jQuery);
(function(c) {
    c.Model.extend("GS.Models.Feature", {TYPE_ACTIVATE: "ACTIVATE",TYPE_PASSIVE: "PASSIVE",TYPE_PLUGIN: "PLUGIN",Features: {},Activated: {},Plugins: {},init: function() {
            GS.Models.Feature.Plugins.sharkZapper = new GS.Models.Feature({})
        },register: function(a, b) {
            GS.Models.Feature.Features[a] = new GS.Models.Feature(b)
        }}, {FeatureID: "",TextKey: "",Author: "Grooveshark",URL: "",IsPremium: true,Type: "PASSIVE",IsLoaded: false,LoadOnActivate: false,ActivateCallback: null,IsActiveCallback: null,init: function(a) {
            this._super(a)
        },
        activate: function(a) {
            if ((GS.user.subscription.isPremium() || !this.IsPremium) && this.ActivateCallback) {
                this.ActivateCallback();
                a && a()
            } else
                this.ActivateCallback && GS.getLightbox().open("vipOnlyFeature", {callback: this.callback(this.activate, a)})
        },isActive: function() {
            return this.IsActiveCallback ? this.IsActiveCallback() : false
        },getImageURL: function(a) {
            a = _.orEqual(a, "s");
            return gsConfig.assetHost + "/features/" + this.FeatureID + "/icon_" + a + ".png"
        },getButtonKey: function() {
            return this.Type + (this.isActive() ? "_BUTTON_OFF" : 
            "_BUTTON_ON")
        }})
})(jQuery);
(function(c) {
    GS.Models.Base.extend("GS.Models.Tag", {id: "TagID",GENRE_TAGS: {},getGenreTags: function() {
            _.isEmpty(this.GENRE_TAGS) && c.getJSON("gs/models/tags_with_ids.json", this.callback(function(a) {
                this.GENRE_TAGS = a
            }));
            return this.GENRE_TAGS
        },init: function() {
        }}, {})
})(jQuery);
(function(c) {
    var a = {canListen: 1,noAds: 2,mobile: 4,playerBonuses: 8,desktop: 16,email: 32}, b = {month: 3,year: 30}, g = {plus: {month: 6,year: 60},anywhere: {month: 9,year: 90},lite: {month: 2,year: 20},liteEx: {month: 4,year: 40}};
    GS.Models.Base.extend("GS.Models.Subscription", {ID_LITE: 21,ID_PLUS: 6,ID_ANYWHERE: 8,LENGTH_WEEK: 2,LENGTH_MONTH: 3,LENGTH_6_MONTH: 7,LENGTH_YEAR: 9,LENGTH_LIFETIME: 11,standardizeType: function(h) {
            var m = {};
            h = parseInt(h, 10);
            switch (h) {
                case 1:
                case 3:
                case 4:
                    m.type = GS.Models.Subscription.ID_ANYWHERE;
                    m.length = 
                    GS.Models.Subscription.LENGTH_MONTH;
                    m.special = true;
                    break;
                case 2:
                    m.type = GS.Models.Subscription.ID_ANYWHERE;
                    m.length = GS.Models.Subscription.LENGTH_YEAR;
                    m.special = true;
                    break;
                case 5:
                    m.type = GS.Models.Subscription.ID_ANYWHERE;
                    m.length = GS.Models.Subscription.LENGTH_MONTH;
                    m.special = true;
                    break;
                case 6:
                case 15:
                case 20:
                    m.type = GS.Models.Subscription.ID_PLUS;
                    m.length = GS.Models.Subscription.LENGTH_MONTH;
                    break;
                case 7:
                case 16:
                case 19:
                    m.type = GS.Models.Subscription.ID_PLUS;
                    m.length = GS.Models.Subscription.LENGTH_YEAR;
                    break;
                case 8:
                case 10:
                case 11:
                case 13:
                case 14:
                case 17:
                    m.type = GS.Models.Subscription.ID_ANYWHERE;
                    m.length = GS.Models.Subscription.LENGTH_MONTH;
                    break;
                case 9:
                case 18:
                    m.type = GS.Models.Subscription.ID_ANYWHERE;
                    m.length = GS.Models.Subscription.LENGTH_YEAR;
                    break;
                case 12:
                    m.type = GS.Models.Subscription.ID_ANYWHERE;
                    m.length = GS.Models.Subscription.LENGTH_WEEK;
                    break;
                case 21:
                    m.type = GS.Models.Subscription.ID_LITE;
                    m.length = GS.Models.Subscription.LENGTH_MONTH;
                    break;
                case 22:
                    m.type = GS.Models.Subscription.ID_LITE;
                    m.length = 
                    GS.Models.Subscription.LENGTH_YEAR;
                    break;
                case 97:
                    m.type = GS.Models.Subscription.ID_LITE;
                    m.length = GS.Models.Subscription.LENGTH_LIFETIME;
                    break;
                case 98:
                    m.type = GS.Models.Subscription.ID_PLUS;
                    m.length = GS.Models.Subscription.LENGTH_LIFETIME;
                    break;
                case 99:
                    m.type = GS.Models.Subscription.ID_ANYWHERE;
                    m.length = GS.Models.Subscription.LENGTH_LIFETIME;
                    break
            }
            return m
        },getSubscriptionFromDetails: function(h, m) {
            var k = h.bVip === 1 || h.bVip === "1";
            if ((h === false || !h.paymentType) && m && m.IsPremium)
                return GS.user.Flags & GS.Models.User.FLAG_ANYWHERE ? 
                new GS.Models.Subscription({SubscriptionTypeID: 99,vip: k,isLoaded: true}) : GS.user.Flags & GS.Models.User.FLAG_PLUS ? new GS.Models.Subscription({SubscriptionTypeID: 98,vip: k,isLoaded: true}) : GS.user.Flags & GS.Models.User.FLAG_LITE ? new GS.Models.Subscription({SubscriptionTypeID: 97,vip: k,isLoaded: true}) : new GS.Models.Subscription({SubscriptionTypeID: 99,vip: k,isLoaded: true});
            else if (!h || !h.bActive || h.bActive == "0")
                return new GS.Models.Subscription({SubscriptionTypeID: 0,vip: k,isLoaded: true});
            k = {vip: k,isLoaded: true};
            k.SubscriptionTypeID = h.subscriptionTypeID;
            k.recurring = h.bRecurring;
            if (h.bVip === "1" || h.bVip === 1)
                if (m && m.IsPremium)
                    k.type = GS.Models.Subscription.ID_ANYWHERE;
            k.paymentMethod = _.orEqual(h.paymentType, "UNKNOWN");
            k.billingAmount = parseFloat(h.amount).toFixed(2);
            if (h.dateUnsubscribed) {
                var n = h.dateUnsubscribed.split("-");
                if (n.length > 1)
                    k.unsubscriptionDate = new Date(parseInt(n[0], 10), parseInt(n[1], 10) - 1, parseInt(n[2], 10))
            }
            if ((h.dateSubscriptionEnd || h.dateEnd || h.dateSubcriptionEnd) && !k.recurring)
                try {
                    var o = _.orEqual(h.dateSubscriptionEnd, 
                    h.dateSubcriptionEnd, h.dateEnd, "").split("-");
                    if (o.length > 1)
                        k.endDate = new Date(parseInt(o[0], 10), parseInt(o[1], 10) - 1, parseInt(o[2], 10))
                } catch (q) {
                    k.endDate = -1
                }
            else if (k.unsubscriptionDate)
                k.endDate = k.unsubscriptionDate;
            if ((h.dateNextBill || h.dateNextCheck) && k.recurring && h.dateStart != h.dateNextCheck)
                try {
                    var x = _.orEqual(h.dateNextBill, h.dateNextCheck, "").split("-");
                    if (x.length > 1)
                        k.nextBillDate = new Date(parseInt(x[0], 10), parseInt(x[1], 10) - 1, parseInt(x[2], 10))
                } catch (v) {
                    k.nextBillDate = -1
                }
            else if (h.dateStart == 
            h.dateNextCheck)
                k.nextBillDate = k.endDate;
            if (h.period == "MONTH")
                k.length = GS.Models.Subscription.LENGTH_MONTH;
            else if (h.period == "YEAR")
                k.length = GS.Models.Subscription.LENGTH_YEAR;
            else if (h.period == "WEEK")
                k.length = GS.Models.Subscription.LENGTH_WEEK;
            if (m && (m.Flags & GS.Models.User.FLAG_ANYWHERE) > 0)
                k.type = GS.Models.Subscription.ID_ANYWHERE;
            else if (m && (m.Flags & GS.Models.User.FLAG_PLUS) > 0)
                k.type = GS.Models.Subscription.ID_PLUS;
            else if (m && (m.Flags & GS.Models.User.FLAG_LITE) > 0)
                k.type = GS.Models.Subscription.ID_LITE;
            return new GS.Models.Subscription(k)
        },getFeatures: function(h) {
            switch (h) {
                case GS.Models.Subscription.ID_LITE:
                    return a.canListen | a.email;
                case GS.Models.Subscription.ID_PLUS:
                    return a.canListen | a.noAds | a.playerBonuses | a.desktop | a.email;
                case GS.Models.Subscription.ID_ANYWHERE:
                    return a.canListen | a.noAds | a.mobile | a.playerBonuses | a.desktop | a.email
            }
            return 0
        }}, {SubscriptionTypeID: 0,type: 0,length: 0,recurring: false,billingAmount: 0,paymentMethod: null,endDate: null,nextBillDate: null,unsubscriptionDate: null,isLoaded: false,
        features: 0,listenConst: 0,vip: false,init: function(h) {
            this._super(h);
            h || (h = {});
            if (this.SubscriptionTypeID = _.orEqual(h.SubscriptionTypeID, 0)) {
                var m = GS.Models.Subscription.standardizeType(h.SubscriptionTypeID);
                h = c.extend({}, m, h)
            }
            this.type = _.orEqual(h.type, 0);
            this.length = _.orEqual(h.length, 0);
            this.billingAmount = _.orEqual(h.billingAmount, 0);
            this.recurring = _.orEqual(h.recurring, false);
            this.features = GS.Models.Subscription.getFeatures(this.type);
            this.endDate = _.orEqual(h.endDate, null);
            this.nextBillDate = _.orEqual(h.nextBillDate, 
            null);
            this.unsubscriptionDate = _.orEqual(h.unsubscriptionDate, null);
            this.paymentMethod = _.orEqual(h.paymentMethod, null);
            this.vip = _.orEqual(h.vip, false);
            this.isLoaded = h.isLoaded ? true : false
        },isActive: function() {
            if (this.endDate && this.endDate < new Date)
                return false;
            return true
        },getTypeName: function() {
            switch (this.type) {
                case GS.Models.Subscription.ID_LITE:
                    return "Grooveshark";
                case GS.Models.Subscription.ID_PLUS:
                    return c.localize.getString("GROOVESHARK_PLUS");
                case GS.Models.Subscription.ID_ANYWHERE:
                    return c.localize.getString("GROOVESHARK_ANYWHERE")
            }
            return ""
        },
        getTypeString: function() {
            switch (this.type) {
                case GS.Models.Subscription.ID_LITE:
                    return "lite";
                case GS.Models.Subscription.ID_PLUS:
                    return "plus";
                case GS.Models.Subscription.ID_ANYWHERE:
                    return "anywhere"
            }
            return ""
        },hasSubscription: function() {
            return this.type > 0
        },isPremium: function() {
            return !(this.type == GS.Models.Subscription.ID_LITE || this.type == 0)
        },isPlus: function() {
            return this.type == GS.Models.Subscription.ID_PLUS
        },isAnywhere: function() {
            return this.type == GS.Models.Subscription.ID_ANYWHERE
        },isLite: function() {
            return this.type == 
            GS.Models.Subscription.ID_LITE
        },isSpecial: function() {
            return this.length == GS.Models.Subscription.LENGTH_LIFETIME
        },canHideAds: function() {
            return (this.features & a.noAds) > 0
        },canUsePlayerBonuses: function() {
            return this.isAnywhere() || this.isPlus()
        },canListenUninterrupted: function() {
            return (this.features & a.canListen) > 0
        },canDirectEmail: function() {
            return (this.features & a.email) > 0
        },canUseDesktop: function() {
            return (this.features & a.desktop) > 0
        },getNextBillDate: function() {
            if (this.nextBillDate > 0)
                return this.nextBillDate.format("F j, Y");
            return null
        },getEndDate: function() {
            if (this.endDate > 0)
                return this.endDate.format("F j, Y");
            return null
        },getNewPricing: function() {
            var h = c.extend({}, g);
            if (this.vip)
                h.anywhere = b;
            return h
        },canUpgradeToLite: function() {
            return !(this.type > 0 || this.length == GS.Models.Subscription.LENGTH_LIFETIME || this.recurring || this.vip)
        },canUpgradeToPlus: function() {
            return !(this.type > 0 || this.length == GS.Models.Subscription.LENGTH_LIFETIME || this.recurring || this.vip)
        },canUpgradeToAnywhere: function() {
            return !(this.type > 0 || this.length == 
            GS.Models.Subscription.LENGTH_LIFETIME || this.recurring)
        },canExtend: function() {
            return !(this.length == GS.Models.Subscription.LENGTH_LIFETIME || this.recurring)
        }})
})(jQuery);
$.extend($.View.EJS.Helpers.prototype, {localeTag: function(c, a, b, g) {
        b = b || {};
        b["data-translate-text"] = a;
        a = $.localize.getString(a);
        if (g)
            a = $("<span></span>").dataString(a, g).render();
        return [this.tag(c, b), a, this.tagEnd(c)].join("")
    },tag: function(c, a, b) {
        var g = ["<" + c];
        _.forEach(a, function(h, m) {
            g.push(" " + m + '="' + h + '"')
        });
        g.push(b || ">");
        return g.join("")
    },tagEnd: function(c) {
        return ["</", c, ">"].join("")
    }});
jQuery.Controller.extend("GS.Controllers.BaseController", {setup: function() {
        this._super.apply(this, arguments);
        this.preSetup && this.preSetup()
    },init: function() {
        this._super();
        if (this.onWindow && !this.isGSSingleton)
            new this($(window));
        else
            this.onElement && !this.isGSSingleton && new this($(this.onElement));
        this.shortName !== "BaseController" && GS.ClassLoader.register(this.fullName, this)
    },instance: function() {
        if (this.isGSSingleton)
            return new this(this.onElement && $(this.onElement) || this.onWindow && window || document.documentElement);
        if (this.onDocument)
            return $(document.documentElement).controller(this._shortName);
        if (this.onWindow)
            return $(window).controller(this._shortName);
        if (this.onElement)
            return $(this.onElement).controller(this._shortName);
        if (this.hasActiveElement)
            return $(this.hasActiveElement).controller(this._shortName);
        throw "BaseController. controller, " + this._shortName + ", is improperly embedded on page";
    },singletonCallback: function(c, a, b) {
        c = "get" + _.ucwords(c);
        var g = arguments;
        return function() {
            var h = GS[c](), m = jQuery.makeArray(g).slice(2);
            m.push.apply(m, arguments);
            if (!b && h.onUpdateSubscription && !h.loaded) {
                var k;
                k = $.subscribe(h.onUpdateSubscription, h.callback(function() {
                    h.loaded = true;
                    $.unsubscribe(k);
                    h[a].apply(h, m)
                }));
                return null
            }
            return h[a].apply(h, m)
        }
    },viewBundles: {},bundleVersions: {}}, {init: function() {
        this.subscribe("gs.app.ready", this.callback(this.appReady))
    },appReady: function() {
    },destroy: function() {
        if ($.isArray(this.subscriptions))
            for (; this.subscriptions.length; )
                $.unsubscribe(this.subscriptions.pop());
        this._super()
    },subscribe: function(c, 
    a, b) {
        b = _.orEqual(b, true);
        if (!_.defined(this.subscriptions))
            this.subscriptions = [];
        if (b) {
            c = $.subscribe(c, a);
            this.subscriptions.push(c);
            return c
        } else
            return $.subscribe(c, a)
    },view: function(c, a, b, g) {
        var h = ["gs", "views"];
        if (c.match(/^themes/))
            h = [c];
        else if (c.match(/^\//))
            h.push(c.replace(/^\//, ""));
        else {
            h.push(this.Class._shortName);
            h.push(c)
        }
        h = "/" + h.join("/");
        h += $.View.ext;
        var m = h.replace(/[\/\.]/g, "_").replace(/_+/g, "_").replace(/^_/, ""), k = GS.Controllers.BaseController.viewBundles[m], n = GS.Controllers.BaseController.bundleVersions[k] || 
        "", o = "", q = true;
        a = _.orEqual(a, this);
        b = this.calculateHelpers.call(this, b);
        if ($.View.preCached[m] || !k)
            return $.View(h, a, b);
        g = _.orEqual(g, 0);
        if (!(g >= 3)) {
            if (g > 0)
                q = false;
            m = {contentType: "application/json",dataType: "json",type: "GET",url: "/gs/views/" + k + ".json?" + n,async: false,cache: q,success: this.callback(function(x) {
                    if (x) {
                        _.forEach(x, function(v, A) {
                            $.View.preCached[A] = v
                        });
                        o = $.View(h, a, b)
                    } else {
                        g++;
                        setTimeout(this.callback(function() {
                            this.view(c, a, b, g)
                        }), g * 100)
                    }
                }),error: this.callback(function() {
                    g++;
                    setTimeout(this.callback(function() {
                        this.view(c, 
                        a, b, g)
                    }), g * 100)
                })};
            if (window.gsConfig && window.gsConfig.viewsJSONP) {
                m.url = gsConfig.assetHost + "/gs/views/" + k + ".json?" + n;
                m.dataType = "jsonp";
                m.jsonp = false;
                m.jsonpCallback = window.gsConfig.viewsJSONP + k
            }
            $.ajax(m);
            return o
        }
    }});
GS.Controllers.BaseController.extend("GS.Controllers.AirbridgeController", {onDocument: true}, {isDesktop: false,_bridge: null,oldWindowOpen: null,init: function() {
        if (window.parentSandboxBridge) {
            this.isDesktop = true;
            this._bridge = window.parentSandboxBridge;
            window.childSandboxBridge = this;
            window.console.error = this._bridge.consoleError;
            GS.store.set = this._bridge.storeSet;
            GS.store.get = this._bridge.storeGet;
            GS.store.remove = this._bridge.storeRemove;
            GS.store.clear = this._bridge.storeClear;
            gsConfig.assetHost = "http://" + 
            window.location.host;
            this.subscribe("gs.player.playstatus", this.callback(this._onPlayStatus));
            this.subscribe("gs.player.song.change", this.callback(this._onSongChange));
            this.subscribe("gs.player.queue.change", this.callback(this._onQueueChange));
            this.subscribe("gs.auth.favorites.songs.add", this.callback(this._onFavLibChanged));
            this.subscribe("gs.auth.favorites.songs.remove", this.callback(this._onFavLibChanged));
            this.subscribe("gs.auth.library.add", this.callback(this._onFavLibChanged));
            this.subscribe("gs.auth.library.remove", 
            this.callback(this._onFavLibChanged));
            var c = this;
            $("body").delegate('a[target="_blank"]', "click", function(a) {
                if (!$(a.target).closest("a").hasClass("airNoFollow")) {
                    a.preventDefault();
                    a = $(a.target).closest("a").attr("href");
                    c._bridge.consoleWarn(a);
                    a && c._bridge.navigateToUrl(a, "_blank");
                    return false
                }
            });
            this.oldWindowOpen = window.open;
            window.open = function(a, b, g) {
                g = _.orEqual(g, "width=800,height=600");
                return b == "_blank" ? c._bridge.navigateToUrl(a, b) : c.oldWindowOpen.call(window, a, b, g)
            }
        }
        this._super()
    },_lastStatus: null,
    _onPlayStatus: function(c) {
        if (c && this._lastStatus)
            if (c.status === this._lastStatus.status)
                if (!c.activeSong && !this._lastStatus.activeSong) {
                    this._lastStatus = c;
                    return
                } else if (c.activeSong && this._lastStatus.activeSong)
                    if (c.activeSong.SongID == this._lastStatus.activeSong.SongID && c.activeSong.autoplayVote == this._lastStatus.activeSong.autoplayVote) {
                        this._lastStatus = c;
                        return
                    }
        this._lastStatus = c;
        this._bridge && this._bridge.playerChange()
    },_onQueueChange: function() {
        this._bridge && this._bridge.playerChange()
    },_onSongChange: function(c) {
        if (!this._lastStatus || 
        this._lastStatus.activeSong && this._lastStatus.activeSong.SongID === c.SongID && this._lastStatus.activeSong.autoplayVote !== c.autoplayVote) {
            if (this._lastStatus)
                this._lastStatus.activeSong.autoplayVote = c.autoplayVote;
            this._bridge && this._bridge.playerChange()
        }
    },_onFavLibChanged: function(c) {
        if (c && GS.player.queue && GS.player.queue.activeSong && parseInt(c.SongID, 10) == parseInt(GS.player.queue.activeSong.SongID, 10)) {
            GS.player.queue.activeSong.isFavorite = c.isFavorite;
            GS.player.queue.activeSong.fromLibrary = c.fromLibrary;
            this._bridge && this._bridge.playerChange()
        }
    },appReady: function() {
        this._bridge && this._bridge.ready()
    },getDesktopPreferences: function() {
        return this._bridge ? this._bridge.getDesktopPreferences() : null
    },setDesktopPreferences: function(c) {
        this._bridge && this._bridge.setDesktopPreferences(c)
    },displayNotification: function(c, a) {
        $.publish("gs.notification", {type: c,message: $.localize.getString(a)})
    },getQueueStatus: function() {
        var c = GS.player.getCurrentQueue(true);
        c || (c = {});
        if (c.activeSong) {
            c.activeSong.url = "http://grooveshark.com/" + 
            c.activeSong.toUrl().replace("#!/", "");
            c.activeSong.imageUrl = c.activeSong.getImageURL()
        }
        c.playStatus = GS.player.lastStatus;
        return c
    },setHash: function(c) {
        GS.router.setHash(c)
    },safeToClose: function() {
        return window.onbeforeunload()
    },addSongsToQueueAt: function() {
        return GS.player.addSongsToQueueAt.apply(GS.player, arguments)
    },playSong: function() {
        return GS.player.playSong.apply(GS.player, arguments)
    },pauseSong: function() {
        return GS.player.pauseSong.apply(GS.player, arguments)
    },resumeSong: function() {
        return GS.player.resumeSong.apply(GS.player, 
        arguments)
    },stopSong: function() {
        return GS.player.stopSong.apply(GS.player, arguments)
    },previousSong: function() {
        return GS.player.previousSong.apply(GS.player, arguments)
    },nextSong: function() {
        return GS.player.nextSong.apply(GS.player, arguments)
    },flagSong: function() {
        return GS.player.flagSong.apply(GS.player, arguments)
    },voteSong: function() {
        return GS.player.voteSong.apply(GS.player, arguments)
    },getIsMuted: function() {
        return GS.player.getIsMuted.apply(GS.player, arguments)
    },setIsMuted: function() {
        return GS.player.setIsMuted.apply(GS.player, 
        arguments)
    },getVolume: function() {
        return GS.player.getVolume.apply(GS.player, arguments)
    },setVolume: function() {
        return GS.player.setVolume.apply(GS.player, arguments)
    },getShuffle: function() {
        return GS.player.getShuffle.apply(GS.player, arguments)
    },setShuffle: function() {
        return GS.player.setShuffle.apply(GS.player, arguments)
    },setAutoplay: function() {
        return GS.player.setAutoplay.apply(GS.player, arguments)
    },clearQueue: function() {
        return GS.player.clearQueue.apply(GS.player, arguments)
    },getRepeat: function() {
        return GS.player.getRepeat.apply(GS.player, 
        arguments)
    },setRepeat: function() {
        return GS.player.setRepeat.apply(GS.player, arguments)
    },addPlaylist: function(c, a, b) {
        GS.Models.Playlist.getPlaylist(c, function(g) {
            g.play(a, b)
        }, null, false)
    },addSongFromToken: function(c, a, b) {
        GS.Models.Song.getSongFromToken(c, function(g) {
            GS.player.addSongsToQueueAt([g.SongID], a, b)
        }, null)
    },favoriteSong: function(c) {
        GS.user.addToSongFavorites(c)
    },unfavoriteSong: function(c) {
        GS.user.removeFromSongFavorites(c)
    },addSongToLibrary: function(c) {
        GS.user.addToLibrary([c])
    },removeSongFromLibrary: function(c) {
        GS.user.removeFromLibrary(c)
    },
    executeProtocol: function(c) {
        GS.Controllers.ApiController.instance().executeProtocol(c)
    }});
(function() {
    function c() {
        this.requests = [];
        this.pendingRequest = null
    }
    function a() {
        L = {}
    }
    function b(r) {
        var s = [].slice.call(arguments, 1), u = (new Date).valueOf(), y = new this;
        this.apply(y, s);
        s = 6E5;
        if (r) {
            if (typeof r == "number")
                s = r;
            var C = y.getCacheKey(), J = L[C];
            if (_.defined(J) && (!J.isResolved() || u - J.lastResolution < s))
                y = J;
            else
                L[C] = y
        }
        return y
    }
    function g(r, s, u, y, C) {
        function J() {
            M.isPending = false;
            M.lastResolution = (new Date).valueOf()
        }
        this.method = _.orEqual(r, "");
        this.parameters = _.orEqual(s, {});
        this.options = _.orEqual(u, 
        {});
        this.useHTTPS = _.orEqual(y, false);
        this.useSWF = _.orEqual(C, false);
        this.overrideHeaders = {};
        this.type = "normal";
        this.isPending = this.failedAuth = false;
        this.numRetries = 0;
        this.lastFault = null;
        this.lastResolution = 0;
        this.successFilters = [];
        this.faultFilters = [];
        this._dfd = $.Deferred();
        var M = this;
        this.promise().then(J, J)
    }
    function h(r, s, u) {
        g.call(this, r, s);
        this.httpMethod = _.orEqual(u, "POST");
        this.type = "facebook"
    }
    function m(r) {
        g.call(this, null, r);
        this.type = "lastfm"
    }
    function k(r, s, u) {
        g.call(this, null, s);
        this.httpMethod = 
        _.orEqual(u, "POST");
        this.type = "flattr";
        this.url = r
    }
    function n() {
        var r = String(Math.floor(Math.random() * 1E4));
        return !GS.service.outgoingSWFCalls[r] ? r : n()
    }
    function o(r, s) {
        var u;
        if ($.isFunction(GS.service.swfProxy)) {
            u = n();
            GS.service.outgoingSWFCalls[u] = r;
            GS.service.swfProxy(r.getSWFable(), s, u)
        } else {
            r.isPending = false;
            GS.service.callsPendingSWF.push(r)
        }
    }
    function q() {
        for (var r = "", s = 0; s < 6; s++)
            r += Math.floor(Math.random() * 16).toString(16);
        return r != GS.service.lastRandomizer ? r : q()
    }
    function x(r) {
        r = _.orEqual(r, 
        {});
        var s = {client: GS.service.client,clientRevision: GS.service.clientRevision,privacy: GS.service.privacy,country: GS.service.country,uuid: GS.service.uuID};
        if (GS.service.sessionID)
            s.session = GS.service.sessionID;
        return $.extend(s, r)
    }
    function v(r, s) {
        _.defined(r) || (r = {fault: {message: "Empty Result",code: GS.service.faultCodes.EMPTY_RESULT}});
        if (r.header) {
            var u = r.header, y = u.session;
            if (y && y != GS.service.sessionID) {
                GS.service.sessionID = y;
                GS.service.tokenPending = false;
                w()
            }
            if (u.expiredClient) {
                GS.service.clientExpired = 
                true;
                GS.player && GS.player.expireSWFService();
                A()
            }
            u = u.secondsUntilDowntime;
            if (u < 0)
                _.wait(5E3).then(I);
            else if (u > 0) {
                u = Math.floor(u / 60);
                y = (new Date).valueOf();
                if (u <= 60)
                    if (GS.service.lastDowntimeNotification == 0 || u > 30 && y - GS.service.lastDowntimeNotification > 36E5 || u <= 30 && u > 15 && y - GS.service.lastDowntimeNotification > 18E5 || u <= 15 && u > 10 && y - GS.service.lastDowntimeNotification > 9E5 || u <= 10 && u > 5 && y - GS.service.lastDowntimeNotification > 6E5 || u <= 5 && y - GS.service.lastDowntimeNotification > 3E5) {
                        GS.service.lastDowntimeNotification = 
                        y;
                        u = new GS.Models.DataString($.localize.getString("NOTIFICATION_MAINTENANCE_WARNING"), {min: u});
                        $.publish("gs.notification", {type: "info",message: u})
                    }
            }
        }
        r.fault ? t(r.fault, s) : s.resolve(r.hasOwnProperty("result") ? r.result : r)
    }
    function A() {
        GS.getLightbox().open({type: "invalidClient",notCloseable: true,view: {header: "POPUP_INVALID_CLIENT_TITLE",message: "POPUP_INVALID_CLIENT_MSG",buttonsRight: [{label: "POPUP_INVALID_CLIENT_SUBMIT",className: "submit"}]},callbacks: {".submit": function(r) {
                    r.stopImmediatePropagation();
                    window.location.reload(true)
                }}})
    }
    function t(r, s) {
        if (r && _.defined(r.code)) {
            console.log("HANDLE FAULT CODE", r.code, s.method);
            if (r.code == GS.service.faultCodes.INVALID_TOKEN) {
                var u = (new Date).valueOf();
                if ((!GS.service.lastTokenFailed || u - GS.service.lastTokenFailed >= 3E5) && s.numRetries === 0) {
                    GS.service.lastTokenFailed = false;
                    s.isPending = false;
                    s.numRetries++;
                    GS.service.callsPendingToken.push(s);
                    w();
                    return
                } else
                    $.publish("gs.notification", {type: "error",message: $.localize.getString("SERVICE_ERROR_COMMUNICATING"),
                        uniqueInstance: "errorCommunicating"})
            } else if (r.code == GS.service.faultCodes.HTTP_TIMEOUT || r.code == GS.service.faultCodes.EMPTY_RESULT) {
                s.lastFault = r;
                s.retry(100 + s.numRetries * 100);
                return
            } else if (r.code == GS.service.faultCodes.MAINTENANCE)
                _.wait(5E3).then(I);
            else if (r.code == GS.service.faultCodes.INVALID_CLIENT)
                A();
            else if (r.code == GS.service.faultCodes.INVALID_SESSION)
                GS.getLightbox().open({type: "sessionBad",notCloseable: true,view: {header: "POPUP_SESSION_BAD_TITLE",message: "POPUP_SESSION_BAD_MSG",buttonsLeft: [{label: "POPUP_REFRESH_GROOVESHARK",
                                className: "submit"}]},callbacks: {".submit": function(y) {
                            y.stopImmediatePropagation();
                            window.location.reload(true)
                        }}});
            else if (gsConfig.runMode == "dev" && r.code == GS.service.faultCodes.HTTP_ERROR && s.method == "getCommunicationToken")
                window.location = "https://" + window.location.host + window.location.hash
        }
        s.reject(r)
    }
    function w() {
        if (!GS.service.tokenPending) {
            GS.service.currentToken = null;
            GS.service.tokenExpires = 0;
            GS.service.tokenPending = true;
            if (GS.service.sessionID) {
                var r = hex_md5(GS.service.sessionID);
                r = F(false, 
                "getCommunicationToken", {secretKey: r}, {}, true);
                r.promise().then(E, function() {
                    var s = new Date;
                    GS.service.tokenPending = false;
                    for (GS.service.lastTokenFailed = s.valueOf(); GS.service.callsPendingToken.length; ) {
                        s = GS.service.callsPendingToken.shift();
                        s.reject({message: $.localize.getString("SERVICE_CREATE_TOKEN_FAIL"),code: GS.service.faultCodes.INVALID_TOKEN})
                    }
                })
            } else
                r = F(false, "initiateSession");
            r.send()
        }
    }
    function E(r) {
        var s = new Date;
        GS.service.lastTokenFailed = false;
        GS.service.currentToken = r;
        GS.service.tokenPending = 
        false;
        for (GS.service.tokenExpires = 15E5 + s.valueOf(); GS.service.callsPendingToken.length; ) {
            r = GS.service.callsPendingToken.shift();
            r.send()
        }
        $.publish("gs.cowbell.ready")
    }
    function I() {
        if (!GS.service.downForMaintenance) {
            GS.service.downForMaintenance = true;
            GS.getLightbox().open({type: "maintenance",notCloseable: true,view: {header: "POPUP_MAINT_TITLE",message: "POPUP_MAINT_MESSAGE",buttonsLeft: [{label: "POPUP_MAINT_TWITTER",href: "http://twitter.com/sharkjanitor"}]}});
            D()
        }
    }
    function D() {
        var r = F(false, "getServiceStatus");
        r.promise().then(G, H);
        r.send()
    }
    function G(r) {
        if (r.status == 1) {
            GS.service.downForMaintenance = false;
            GS.getLightbox().close()
        } else
            _.wait(2E4).then(D)
    }
    function H() {
        _.wait(2E4).then(D)
    }
    c.prototype.queue = function(r) {
        function s() {
            if (this.requests.length) {
                this.pendingRequest = this.requests.shift();
                var u = this, y = function() {
                    u.pendingRequest = null;
                    s.call(u)
                };
                this.pendingRequest.promise().then(y, y);
                this.pendingRequest.send()
            }
        }
        this.requests.push(r);
        this.pendingRequest || s.call(this)
    };
    var B = function(r, s) {
        return r[r.length - 
        1] === s ? {} : r[r.length - 1]
    }, L = {};
    g.createRequest = function() {
        return b.apply(this, arguments)
    };
    var F = function() {
        return b.apply(g, arguments)
    };
    g.prototype.promise = function() {
        return this._dfd.promise()
    };
    g.prototype.isResolved = function() {
        return this._dfd.isResolved()
    };
    g.prototype.isRejected = function() {
        return this._dfd.isRejected()
    };
    g.prototype.resolve = function(r) {
        for (var s = 0; s < this.successFilters.length; s++)
            if ($.isFunction(this.successFilters[s]))
                r = this.successFilters[s](r);
        this.lastResolution = (new Date).valueOf();
        this._dfd.resolve(r)
    };
    g.prototype.resolveWith = function(r, s) {
        for (var u = 0; u < this.successFilters.length; u++)
            if ($.isFunction(this.successFilters[u]))
                s = this.successFilters[u](s);
        this.lastResolution = (new Date).valueOf();
        this._dfd.resolveWith(r, s)
    };
    g.prototype.reject = function(r) {
        for (var s = 0; s < this.faultFilters.length; s++)
            if ($.isFunction(this.faultFilters[s]))
                r = this.faultFilters[s](r);
        this._dfd.reject(r)
    };
    g.prototype.rejectWith = function(r, s) {
        for (var u = 0; u < this.faultFilters.length; u++)
            if ($.isFunction(this.faultFilters[u]))
                s = 
                this.faultFilters[u](s);
        this._dfd.rejectWith(r, s)
    };
    g.prototype.getSWFable = function() {
        return {type: this.type,method: this.method,parameters: this.parameters,useHTTPS: this.useHTTPS,overrideHeaders: this.overrideHeaders,overrideKey: K}
    };
    g.prototype.cacheKeyProps = ["method", "parameters", "type"];
    g.prototype.getCacheKey = function() {
        var r, s, u = "";
        for (r in this.cacheKeyProps)
            if (this.cacheKeyProps.hasOwnProperty(r)) {
                s = this[this.cacheKeyProps[r]];
                u += s instanceof String ? s : JSON.stringify(s)
            }
        return hex_md5(u)
    };
    g.prototype.send = 
    function(r) {
        r && r.length == 2 && this.promise().then(r[0], r[1]);
        GS.service = GS.service || GS.Controllers.ServiceController.instance();
        var s = this;
        r = true;
        var u = (new Date).valueOf();
        if (!(this.isPending || this.isResolved()))
            if (GS.service.clientExpired)
                this.reject({message: $.localize.getString("POPUP_INVALID_CLIENT_MSG"),code: GS.service.faultCodes.INVALID_CLIENT});
            else {
                this.isPending = true;
                if (this.numRetries >= 3)
                    this.reject(this.lastFault);
                else {
                    if (this.numRetries > 0)
                        r = false;
                    if (this.type == "facebook" || this.type == "lastfm" || 
                    this.type == "flattr")
                        o(this, {});
                    else if (GS.service.tokenExpires > u || ["getCommunicationToken", "initiateSession", "getServiceStatus"].indexOf(this.method) != -1)
                        if (GS.service.downForMaintenance && this.method != "getServiceStatus")
                            this.reject({message: $.localize.getString("SERVICE_DOWN_MAINTENANCE"),code: GS.service.faultCodes.MAINTENANCE});
                        else {
                            u = "http://" + GS.service.hostname + "/" + GS.service.defaultEndpoint + "?" + this.method;
                            var y = {header: x(this.overrideHeaders),method: this.method,parameters: this.parameters};
                            if (GS.service.currentToken) {
                                GS.service.lastRandomizer = 
                                q();
                                var C = GS.service.revToken;
                                if (GS.service.revToken != K)
                                    C = K;
                                C = hex_sha1(this.method + ":" + GS.service.currentToken + ":" + C + ":" + GS.service.lastRandomizer);
                                y.header.token = GS.service.lastRandomizer + C
                            }
                            this.useSWF || this.useHTTPS ? o(this, y.header) : $.ajax($.extend({}, this.options, {contentType: "application/json",dataType: "json",type: "POST",data: JSON.stringify(y),cache: r,url: u,success: function(J) {
                                    v(J, s)
                                },error: function(J, M, O) {
                                    console.warn("ajax error: status: " + M + ", error: " + O, J, this);
                                    J = {};
                                    switch (M) {
                                        case "parsererror":
                                            J.code = 
                                            GS.service.faultCodes.PARSE_ERROR;
                                            J.message = $.localize.getString("SERVICE_PARSE_JSON");
                                            break;
                                        case "timeout":
                                            J.code = GS.service.faultCodes.HTTP_TIMEOUT;
                                            J.message = $.localize.getString("SERVICE_REQUEST_TIMEOUT");
                                            break;
                                        case "error":
                                        case "notmodified":
                                        default:
                                            J.code = GS.service.faultCodes.HTTP_ERROR;
                                            J.message = $.localize.getString("SERVICE_HTTP_ERROR");
                                            break
                                    }
                                    t(J, s)
                                }}))
                        }
                    else {
                        this.isPending = false;
                        GS.service.callsPendingToken.push(this);
                        w()
                    }
                }
            }
    };
    g.prototype.retry = function(r) {
        var s = this;
        this.isPending = false;
        this.numRetries++;
        _.wait(r).then(function() {
            s.send()
        })
    };
    g.prototype.queue = function(r) {
        if (!_.defined(g.prototype.queues))
            g.prototype.queues = {};
        var s = g.prototype.queues[r];
        _.defined(s) || (s = g.prototype.queues[r] = new c);
        s.queue(this)
    };
    h.createRequest = function() {
        return b.apply(this, arguments)
    };
    h.prototype = $.extend(h.prototype, g.prototype);
    h.prototype.getSWFable = function() {
        return {type: this.type,method: this.method,parameters: this.parameters,httpMethod: this.httpMethod}
    };
    m.createRequest = function() {
        return b.apply(this, arguments)
    };
    m.prototype = $.extend(m.prototype, g.prototype);
    m.prototype.getSWFable = function() {
        return {type: this.type,parameters: this.parameters}
    };
    k.createRequest = function() {
        return b.apply(this, arguments)
    };
    k.prototype = $.extend(k.prototype, g.prototype);
    k.prototype.getSWFable = function() {
        return {type: this.type,url: this.url,parameters: this.parameters,httpMethod: this.httpMethod}
    };
    var K = "grahamCrackersRYummy", N;
    $.Class.extend("GS.Controllers.ServiceController", {configDefaults: {hostname: window.location.host,sessionID: null,
            client: "htmlshark",clientRevision: "20120312",revToken: "reallyHotSauce",country: null,privacy: 0,uuID: "",defaultEndpoint: "more.php"},instance: function() {
            N || (N = new GS.Controllers.ServiceController({hostname: window.location.host,sessionID: gsConfig.sessionID,country: gsConfig.country,privacy: gsConfig.user.Privacy,uuID: gsConfig.uuid,defaultEndpoint: gsConfig.endpoint}));
            return N
        }}, {faultCodes: {INVALID_CLIENT: 1024,RATE_LIMITED: 512,INVALID_TOKEN: 256,INVALID_SESSION: 16,MAINTENANCE: 10,MUST_BE_LOGGED_IN: 8,HTTP_TIMEOUT: 6,
            PARSE_ERROR: 4,HTTP_ERROR: 2,EMPTY_RESULT: -256},init: function(r) {
            $.extend(this, GS.Controllers.ServiceController.configDefaults, r);
            this.currentToken = null;
            this.tokenExpires = 0;
            this.lastTokenFailed = this.tokenPending = false;
            this.lastRandomizer = null;
            this.downForMaintenance = false;
            this.lastDowntimeNotification = 0;
            this.clientExpired = false;
            this.callsPendingToken = [];
            this.callsPendingSWF = [];
            this.outgoingSWFCalls = {};
            this.swfProxy = null;
            this.sessionID || F(false, "initiateSession", {}, {async: false}).send();
            $.subscribe("gs.auth.update", 
            a)
        },verifyControllerKey: function(r) {
            if (r != K) {
                K = r;
                return false
            }
            return true
        },serviceExists: function() {
            return true
        },swfReady: function() {
            for (var r; this.callsPendingSWF.length; ) {
                r = this.callsPendingSWF.shift();
                r.send()
            }
            return true
        },swfBadHost: function() {
            GS.getLightbox().open({type: "badHost",notCloseable: true,view: {header: "POPUP_BAD_HOST_TITLE",message: "POPUP_BAD_HOST_MSG",buttonsLeft: [{href: "http://www.grooveshark.com",labelHTML: "http://www.grooveshark.com"}]}})
        },swfSuccess: function(r, s) {
            var u = this.outgoingSWFCalls[s];
            u && v(r, u);
            delete this.outgoingSWFCalls[s]
        },swfFault: function(r, s) {
            var u = this.outgoingSWFCalls[s];
            u && t(r, u);
            delete this.outgoingSWFCalls[s]
        },swfNeedsToken: function() {
            w()
        },onChatData: function(r) {
            if (r.data && r.data.data)
                r = r.data.data;
            else if (r.data)
                r = r.data;
            if (r)
                switch (r.messageType) {
                    case "userPointsAwarded":
                        r.awardedPoints && GS.user && GS.user.addPoints(r.awardedPoints);
                        break;
                    case "apiMethodCall":
                        if (r.method && window.Grooveshark) {
                            if (!$.isArray(r.parameters))
                                r.parameters = [];
                            var s = Grooveshark[r.method];
                            $.isFunction(s) && 
                            s.apply(Grooveshark, r.parameters)
                        }
                        break;
                    case "userRemote":
                        console.warn("userRemote", r);
                        var u = GS.getParty();
                        u.enabled && u.updateQueueFromBroadcast(r);
                        break;
                    case "feedEvent":
                        r.data && $.publish("gs.user.feedEvent", r.data);
                        break;
                    case "playlist":
                        s = r.data.playlistID;
                        u = GS.getParty();
                        u.enabled && u.playlist.PlaylistID == s && u.updateQueueFromBroadcast(r);
                        (u = GS.Models.Playlist.getOneFromCache(s)) && u.updateFromBroadcast(r);
                        GS.page.activePage && GS.page.activePage.playlist && GS.page.activePage.playlist.PlaylistID == s && 
                        $.isFunction(GS.page.activePage.updateFromBroadcast) && GS.page.activePage.updateFromBroadcast(r);
                        break;
                    case "removedFromCollaborativePlaylist":
                        if (r.playlist && r.playlist.PlaylistID)
                            if (GS.user.PageNameData && GS.user.PageNameData.CollabPlaylists && GS.user.PageNameData.CollabPlaylists[r.playlist.PlaylistID]) {
                                delete GS.user.PageNameData.CollabPlaylists[r.playlist.PlaylistID];
                                GS.user._updateCollabPlaylists();
                                (s = GS.Models.Playlist.getOneFromCache(r.playlist.PlaylistID)) && delete s.Collaborators[GS.user.UserID];
                                GS.page.activePage && GS.page.activePage.playlist && GS.page.activePage.playlist.PlaylistID == r.playlist.PlaylistID && $.publish("gs.playlist.view.update", s)
                            }
                        break;
                    case "addedToCollaborativePlaylist":
                        if (r.playlist && r.playlist.PlaylistID)
                            if (GS.user.PageNameData && GS.user.PageNameData.CollabPlaylists) {
                                r.playlist.songsLoaded = false;
                                GS.user.PageNameData.CollabPlaylists[r.playlist.PlaylistID] = r.playlist;
                                GS.user._updateCollabPlaylists();
                                if (s = GS.Models.Playlist.getOneFromCache(r.playlist.PlaylistID)) {
                                    s.Collaborative = 
                                    true;
                                    s.Collaborators[GS.user.UserID] = GS.user
                                }
                                GS.page.activePage && GS.page.activePage.playlist && GS.page.activePage.playlist.PlaylistID == r.playlist.PlaylistID && $.publish("gs.playlist.view.update", s)
                            }
                        break;
                    case "flattrData":
                        $.publish("gs.player.flattr", r);
                        break;
                    default:
                        console.log("unhandled chat data:", r)
                }
        },onChatError: function(r) {
            console.log("Got chat error, event:", r)
        },httpsFormSubmit: function(r, s, u) {
            var y = $("#httpsForm");
            $("#httpsIframe");
            var C = [];
            y.html("");
            y.attr("action", r);
            y.attr("method", "post");
            y.attr("target", "httpsIframe");
            y.attr("enctype", "multipart/form-data");
            _.forEach(s, function(J, M) {
                C.push('<input type="hidden" name="' + M + '" value="' + J + '" />')
            });
            y.append(C.join(""));
            window.setupBridge = GS.airbridge && GS.airbridge.isDesktop ? function() {
                var J = {};
                J[u] = window[u];
                document.getElementById("httpsIframe").contentWindow.parentSandboxBridge = J
            } : function() {
            };
            y.submit()
        },isFirstVisit: function(r) {
            F(false, "isFirstVisit", {}, {}, false, true).send([r, null])
        },makeFacebookRequest: function(r, s, u, y, C) {
            h.createRequest(false, 
            r, s, u).send([y, C])
        },makeLastfmRequest: function(r, s, u) {
            m.createRequest(false, r).send([s, u])
        },makeFlattrRequest: function(r, s, u, y, C) {
            r = k.createRequest(false, r, s, u);
            r.promise().then(y, C);
            r.send()
        },rapleafPersonalize: function(r, s, u) {
            var y = B(arguments, u);
            y = F(false, "personalize", {redirectURL: r}, y, false, true);
            y.type = "rapleaf";
            y.send([s, u])
        },rapleafDirect: function(r, s, u) {
            var y = B(arguments, u);
            y = F(false, "direct", {email: r}, y, false, true);
            y.type = "rapleaf";
            y.send([s, u])
        },getAlbumByID: function(r, s, u) {
            var y = B(arguments, 
            u);
            F(true, "getAlbumByID", {albumID: r}, y).send([s, u])
        },getArtistByID: function(r, s, u) {
            var y = B(arguments, u);
            F(true, "getArtistByID", {artistID: r}, y).send([s, u])
        },getPlaylistByID: function(r, s, u) {
            var y = B(arguments, u);
            F(true, "getPlaylistByID", {playlistID: r}, y).send([s, u])
        },getQueueSongListFromSongIDs: function(r, s, u) {
            var y = B(arguments, u);
            F(true, "getQueueSongListFromSongIDs", {songIDs: r}, y).send([s, u])
        },getSongFromToken: function(r, s, u) {
            var y = B(arguments, u);
            F(true, "getSongFromToken", {token: r,country: this.country}, 
            y).send([s, u])
        },getTokenForSong: function(r, s, u) {
            var y = B(arguments, u);
            F(true, "getTokenForSong", {songID: r,country: this.country}, y).send([s, u])
        },getUserByID: function(r, s, u) {
            var y = B(arguments, u);
            F(true, "getUserByID", {userID: r}, y).send([s, u])
        },albumGetSongs: function(r, s, u, y, C) {
            s = _.orEqual(s, true);
            u = _.orEqual(u, 0);
            var J = B(arguments, C);
            F(true, "albumGetSongs", {albumID: r,isVerified: s,offset: u}, J).send([y, C])
        },albumGetAllSongs: function(r, s, u) {
            var y = B(arguments, u);
            F(true, "albumGetAllSongs", {albumID: r}, y).send([s, 
                u])
        },artistGetAllSongs: function(r, s, u) {
            var y = B(arguments, u);
            F(true, "artistGetAllSongs", {artistID: r}, y).send([s, u])
        },artistGetArtAttribution: function(r, s, u) {
            var y = B(arguments, u);
            F(true, "artistGetArtAttribution", {artistID: r}, y).send([s, u])
        },playlistGetSongs: function(r, s, u) {
            var y = B(arguments, u);
            F(true, "playlistGetSongs", {playlistID: r}, y).send([s, u])
        },getArtistRecentListeners: function(r, s, u) {
            req = g.createRequest(true, "getArtistRecentListeners", {artistID: r}, arguments[arguments.length - 1] === u ? {} : arguments[arguments.length - 
            1]);
            req.send([s, u])
        },getAlbumRecentListeners: function(r, s, u) {
            req = g.createRequest(true, "getAlbumRecentListeners", {albumID: r}, arguments[arguments.length - 1] === u ? {} : arguments[arguments.length - 1]);
            req.send([s, u])
        },getSongRecentListeners: function(r, s, u) {
            req = g.createRequest(true, "getSongRecentListeners", {songID: r}, arguments[arguments.length - 1] === u ? {} : arguments[arguments.length - 1]);
            req.send([s, u])
        },popularGetSongs: function(r, s, u) {
            var y = B(arguments, u);
            ({daily: true,weekly: true,monthly: true})[r] || (r = "daily");
            F(true, "popularGetSongs", {type: r}, y).send([s, u])
        },featuredGetCurrentFeatured: function(r, s, u) {
            var y = B(arguments, u);
            F(true, "featuredGetCurrentFeatured", {date: r}, y).send([s, u])
        },getArtistsForTagRadio: function(r, s, u) {
            var y = B(arguments, u);
            F(true, "getArtistsForTagRadio", {tagID: r}, y).send([s, u])
        },albumGetFans: function(r, s, u, y) {
            var C = B(arguments, y);
            F(true, "albumGetFans", {albumID: r,offset: s}, C).send([u, y])
        },artistGetFans: function(r, s, u, y) {
            var C = B(arguments, y);
            F(true, "artistGetFans", {artistID: r,offset: s}, C).send([u, 
                y])
        },playlistGetFans: function(r, s, u) {
            var y = B(arguments, u);
            F(true, "playlistGetFans", {playlistID: r}, y).send([s, u])
        },songGetFans: function(r, s, u, y) {
            var C = B(arguments, y);
            F(true, "songGetFans", {songID: r,offset: s}, C).send([u, y])
        },userGetFans: function(r, s, u, y) {
            var C = B(arguments, y);
            F(true, "userGetFans", {userID: r,offset: s}, C).send([u, y])
        },authenticateUser: function(r, s, u, y, C) {
            var J = B(arguments, C);
            F(false, "authenticateUser", {username: r,password: s,savePassword: u}, J, true, true).send([y, C])
        },authenticateFacebookUser: function(r, 
        s, u, y, C, J, M) {
            var O = B(arguments, M);
            F(false, "authenticateFacebookUser", {facebookUserID: r,sessionKey: s,accessToken1: u,accessToken3: y,accessTokenEx: C}, O, true, true).send([J, M])
        },authenticateGoogleUser: function(r, s) {
            var u = B(arguments, s);
            F(false, "authenticateGoogleUser", {}, u, true, true).send([r, s])
        },authenticateTwitterUser: function(r, s, u, y, C) {
            req = g.createRequest(false, "authenticateTwitterUser", {twitterUserID: r,oauthToken: s,oauthSecret: u}, arguments[arguments.length - 1] === C ? {} : arguments[arguments.length - 1], 
            true, false);
            req.send([y, C])
        },reportUserChange: function(r, s, u, y) {
            var C = B(arguments, y), J = {userID: r.UserID,email: r.Email,username: r.FName,userTrackingID: r.userTrackingID,picture: r.Picture,privacy: _.defined(s) ? s : r.Privacy,isPremium: r.IsPremium};
            F(false, "reportUserChange", J, C, false, true).send([u, y])
        },logoutUser: function(r, s) {
            var u = B(arguments, s);
            F(false, "logoutUser", {}, u).send([r, s])
        },userForgotPassword: function(r, s, u) {
            var y = B(arguments, u);
            F(false, "userForgotPassword", {usernameOrEmail: r}, y, true).send([s, 
                u])
        },resetPassword: function(r, s, u, y, C) {
            var J = B(arguments, C);
            F(false, "resetPassword", {usernameOrEmail: r,secretResetCode: s,newPassword: u}, J, true).send([y, C])
        },changePassword: function(r, s, u, y) {
            var C = B(arguments, y);
            F(false, "changePassword", {oldPassword: r,newPassword: s}, C, true, true).send([u, y])
        },registerUser: function(r, s, u, y, C, J, M, O, P, Q, S, R) {
            var T = B(arguments, R);
            F(false, "registerUser", {username: r,password: s,firstName: u,lastName: y,emailAddress: C,sex: J,birthDate: M,flags: O,inviteID: P,savePassword: Q}, T, true, 
            true).send([S, R])
        },userDisableAccount: function(r, s, u, y, C, J) {
            var M = B(arguments, J);
            F(false, "userDisableAccount", {password: r,reason: s,details: u,contact: y}, M, true, true).send([C, J])
        },getIsUsernameEmailAvailable: function(r, s, u, y) {
            var C = B(arguments, y);
            F(false, "getIsUsernameEmailAvailable", {username: r,emailAddress: s}, C).send([u, y])
        },getUserByInviteID: function(r, s, u) {
            var y = B(arguments, u);
            F(true, "getUserByInviteID", {inviteID: r}, y, true).send([s, u])
        },sendInvites: function(r, s, u) {
            var y = B(arguments, u);
            F(false, "sendInvites", 
            {emailAddresses: r}, y).send([s, u])
        },getUserSettings: function(r, s) {
            var u = B(arguments, s);
            F(false, "getUserSettings", {}, u).send([r, s])
        },getUserTopArtists: function(r, s, u) {
            var y = B(arguments, u);
            F(true, "getUserTopArtists", {userID: r}, y).send([s, u])
        },changeUserInfoEx: function(r, s, u, y) {
            var C = B(arguments, y);
            F(false, "changeUserInfoEx", {shitToChange: r,password: s}, C, true).send([u, y])
        },changeNotificationSettings: function(r, s, u) {
            var y = B(arguments, u);
            F(false, "changeNotificationSettings", {newValue: r}, y).send([s, u])
        },
        changePrivacySettings: function(r, s, u) {
            var y = B(arguments, u);
            F(false, "changePrivacySettings", {newValue: r}, y).send([s, u])
        },changeFeedSettings: function(r, s, u) {
            var y = B(arguments, u);
            F(false, "changeFeedSettings", {newValue: r}, y).send([s, u])
        },getSubscriptionDetails: function(r, s) {
            var u = B(arguments, s);
            F(false, "getSubscriptionDetails", {}, u, true, true).send([r, s])
        },userGetSongsInLibrary: function(r, s, u, y, C) {
            s = _.orEqual(s, 0);
            var J = B(arguments, C);
            F(u, "userGetSongsInLibrary", {userID: r,page: s}, J).send([y, C])
        },userGetLibraryTSModified: function(r, 
        s, u) {
            var y = B(arguments, u);
            F(false, "userGetLibraryTSModified", {userID: r}, y).send([s, u])
        },userAddSongsToLibrary: function(r, s, u) {
            var y = B(arguments, u);
            y = F(false, "userAddSongsToLibrary", {songs: r}, y);
            y.promise().then(s, u);
            y.queue("library")
        },userRemoveSongsFromLibrary: function(r, s, u, y, C, J) {
            var M = B(arguments, J);
            M = F(false, "userRemoveSongsFromLibrary", {userID: r,songIDs: s,albumIDs: u,artistIDs: y}, M);
            M.promise().then(C, J);
            M.queue("library")
        },getFavorites: function(r, s, u, y, C) {
            s = s || "Songs";
            var J = B(arguments, C);
            F(u, "getFavorites", {userID: r,ofWhat: s}, J).send([y, C])
        },favorite: function(r, s, u, y, C) {
            var J = B(arguments, C);
            J = F(false, "favorite", {what: r,ID: s,details: u}, J);
            J.promise().then(y, C);
            J.queue("library")
        },unfavorite: function(r, s, u, y) {
            var C = B(arguments, y);
            C = F(false, "unfavorite", {what: r,ID: s}, C);
            C.promise().then(u, y);
            C.queue("library")
        },getUserSidebar: function(r, s) {
            var u = B(arguments, s);
            F(false, "getUserSidebar", {}, u).send([r, s])
        },addShortcutToUserSidebar: function(r, s, u, y, C) {
            var J = B(arguments, C);
            J = F(false, "addShortcutToUserSidebar", 
            {what: r,id: s,name: u}, J);
            J.promise().then(y, C);
            J.queue("library")
        },removeShortcutFromUserSidebar: function(r, s, u, y) {
            var C = B(arguments, y);
            C = F(false, "removeShortcutFromUserSidebar", {what: r,id: s}, C);
            C.promise().then(u, y);
            C.queue("library")
        },userGetPlaylists: function(r, s, u, y) {
            var C = B(arguments, y);
            F(s, "userGetPlaylists", {userID: r}, C).send([u, y])
        },createPlaylist: function(r, s, u, y, C) {
            var J = B(arguments, C);
            F(false, "createPlaylist", {playlistName: r,songIDs: s,playlistAbout: u}, J).send([y, C])
        },deletePlaylist: function(r, 
        s, u, y) {
            var C = B(arguments, y);
            C = F(false, "deletePlaylist", {playlistID: r,name: s}, C);
            C.promise().then(u, y);
            C.queue("playlist")
        },playlistUndelete: function(r, s, u) {
            var y = B(arguments, u);
            y = F(false, "playlistUndelete", {playlistID: r}, y);
            y.promise().then(s, u);
            y.queue("playlist")
        },overwritePlaylist: function(r, s, u, y, C, J) {
            var M = B(arguments, J);
            M = F(false, "overwritePlaylist", {playlistID: r,playlistName: s,songIDs: u,songs: y}, M);
            M.promise().then(C, J);
            M.queue("playlist")
        },playlistAddSongToExisting: function(r, s, u, y, C) {
            var J = 
            B(arguments, C);
            J = F(false, "playlistAddSongToExisting", {playlistID: r,songID: s,song: u}, J);
            J.promise().then(y, C);
            J.queue("playlist")
        },renamePlaylist: function(r, s, u, y, C) {
            var J = B(arguments, C);
            J = F(false, "renamePlaylist", {playlistID: r,playlistName: s,broadcast: u}, J);
            J.promise().then(y, C);
            J.queue("playlist")
        },setPlaylistAbout: function(r, s, u, y, C) {
            var J = B(arguments, C);
            J = F(false, "setPlaylistAbout", {playlistID: r,about: s,broadcast: u}, J);
            J.promise().then(y, C);
            J.queue("playlist")
        },playlistSetCollaboration: function(r, 
        s, u, y) {
            var C = B(arguments, y);
            C = F(false, "playlistSetCollaboration", {playlistID: r,enabled: s}, C);
            C.promise().then(u, y);
            C.queue("playlist")
        },playlistSetUserPermissions: function(r, s, u, y, C) {
            var J = B(arguments, C);
            J = F(false, "playlistSetUserPermissions", {playlistID: r,userID: s,permissions: u}, J);
            J.promise().then(y, C);
            J.queue("playlist")
        },tagRadioGetAllSongs: function(r, s, u) {
            var y = B(arguments, u);
            F(true, "tagRadioGetAllSongs", {tagID: r}, y).send([s, u])
        },getResultsFromSearch: function(r, s, u, y, C) {
            var J = B(arguments, C);
            J = F(true, "getResultsFromSearch", {query: r,type: s,guts: GS.guts ? GS.getGuts().shouldLog : 0,ppOverride: u}, J);
            s === "Artists" && J.successFilters.push(function(M) {
                if ($.isArray(M.result))
                    M.result = _.map(M.result, function(O) {
                        O.hasOwnProperty("AlbumID") && delete O.AlbumID;
                        O.hasOwnProperty("AlbumName") && delete O.AlbumName;
                        O.hasOwnProperty("SongName") && delete O.SongName;
                        return O
                    });
                return M
            });
            J.send([y, C])
        },getSearchSuggestion: function(r, s, u) {
            var y = B(arguments, u);
            F(true, "getSearchSuggestion", {query: r}, y).send([s, u])
        },
        getAutocomplete: function(r, s, u, y) {
            var C = B(arguments, y);
            F(true, "getAutocomplete", {query: r,type: s}, C).send([u, y])
        },getProfileFeed: function(r, s, u, y) {
            var C = B(arguments, y);
            F(1E4, "getProfileFeed", {lastDocumentID: r,lastEventID: s}, C).send([u, y])
        },getUserProfileFeed: function(r, s, u, y, C) {
            var J = B(arguments, C);
            F(1E4, "getUserProfileFeed", {userID: r,lastDocumentID: s,lastEventID: u}, J).send([y, C])
        },getCombinedFeed: function(r, s, u, y) {
            var C = B(arguments, y);
            F(1E4, "getCombinedFeed", {excludeUsers: r,lastEventID: s}, C).send([u, 
                y])
        },getUserCombinedFeed: function(r, s, u, y, C) {
            var J = B(arguments, C);
            F(3E4, "getUserCombinedFeed", {userID: r,excludeUsers: s,lastEventID: u}, J).send([y, C])
        },getUserFeedEvent: function(r, s, u) {
            var y = B(arguments, u);
            F(3E4, "getUserFeedEvent", {eventID: r}, y).send([s, u])
        },getInterestingEvents: function(r, s, u) {
            var y = B(arguments, u);
            F(3E4, "getInterestingEvents", {limit: r}, y).send([s, u])
        },getArtistProfileFeed: function(r, s, u, y, C) {
            var J = B(arguments, C);
            F(false, "getArtistProfileFeed", {artistID: r,lastDocumentID: s,lastEventID: u}, 
            J).send([y, C])
        },hideUserEvent: function(r, s, u) {
            var y = B(arguments, u);
            F(true, "hideUserEvent", {eventID: r}, y).send([s, u])
        },changeFollowFlags: function(r, s, u) {
            var y = B(arguments, u);
            F(false, "changeFollowFlags", {userIDsFlags: r}, y).send([s, u])
        },sendFeedBroadcast: function(r, s, u, y, C, J) {
            var M = B(arguments, J);
            F(false, "sendFeedBroadcast", {what: r,ID: s,people: u,message: y}, M).send([C, J])
        },addEventComment: function(r, s, u, y) {
            var C = B(arguments, y);
            F(false, "addEventComment", {eventID: r,comment: s}, C).send([u, y])
        },hideEventComment: function(r, 
        s, u, y) {
            var C = B(arguments, y);
            F(false, "hideEventComment", {eventID: s,commentID: r}, C).send([u, y])
        },getUserNotifications: function(r, s) {
            var u = B(arguments, s);
            F(6E4, "getUserNotifications", {}, u).send([r, s])
        },feedsBanArtist: function(r, s, u) {
            var y = B(arguments, u);
            F(false, "feedsBanArtist", {artistID: r}, y).send([s, u])
        },feedsUnbanArtist: function(r, s, u) {
            var y = B(arguments, u);
            F(false, "feedsUnbanArtist", {artistID: r}, y).send([s, u])
        },feedsGetBannedArtists: function(r, s) {
            var u = B(arguments, s);
            F(false, "feedsGetBannedArtists", 
            {}, u).send([r, s])
        },feedsRemoveEventFromProfile: function(r, s, u, y) {
            var C = B(arguments, y);
            F(false, "feedsRemoveEventFromProfile", {type: r,time: s}, C).send([u, y])
        },logTargetedThemeImpression: function(r, s, u) {
            var y = B(arguments, u);
            F(false, "logTargetedThemeImpression", {themeID: r}, y).send([s, u])
        },logThemeOutboundLinkClick: function(r, s, u, y) {
            var C = B(arguments, y);
            F(false, "logThemeOutboundLinkClick", {themeID: r,linkID: s}, C).send([u, y])
        },provideSongFeedbackMessage: function(r, s, u, y) {
            var C = B(arguments, y);
            F(false, "provideSongFeedbackMessage", 
            {songID: r,message: s}, C).send([u, y])
        },provideSongFeedbackVote: function(r, s, u, y, C) {
            var J = B(arguments, C);
            F(false, "provideSongFeedbackVote", {songID: r,vote: s,artistID: u}, J).send([y, C])
        },sendShare: function(r, s, u, y, C, J, M, O) {
            var P = B(arguments, O);
            P = F(false, "sendShare", {what: r,ID: s,people: u,country: this.country,override: y,message: C}, P);
            if (J)
                P.overrideHeaders.privacy = 1;
            P.send([M, O]);
            GS.getGuts().logEvent("itemSharePerformed", {type: r,id: s})
        },getContactInfoForFollowers: function(r, s) {
            var u = B(arguments, s);
            F(false, 
            "getContactInfoForFollowers", {}, u).send([r, s])
        },getSongkickEventsFromArtists: function(r, s, u, y) {
            var C = B(arguments, y);
            F(true, "getSongkickEventsFromArtists", {artistIDs: r,names: s}, C).send([u, y])
        },getGoogleAuthToken: function(r, s, u, y) {
            var C = "EscapeMG-Grooveshark-" + this.clientRevision, J = B(arguments, y);
            F(false, "getGoogleAuthToken", {Email: r,Passwd: s,source: C}, J, true).send([u, y])
        },getGoogleContacts: function(r, s, u) {
            var y = B(arguments, u);
            req = F(false, "getGoogleContacts", {authToken: r}, y, false, true);
            req.send([s, 
                u])
        },getDetailsForBroadcast: function(r, s, u) {
            var y = B(arguments, u);
            F(true, "getDetailsForBroadcast", {songID: r}, y).send([s, u])
        },broadcastSong: function(r, s, u, y, C, J, M, O, P) {
            var Q = B(arguments, P);
            F(false, "broadcastSong", {songID: r,message: s,username: u,password: y,saveCredentials: C,service: J,song: M}, Q, true).send([O, P])
        },getUserFacebookData: function(r, s) {
            var u = B(arguments, s);
            F(false, "getUserFacebookDataEx", {}, u, true).send([r, s])
        },saveUserFacebookData: function(r, s, u, y, C, J, M, O) {
            var P = B(arguments, O);
            F(false, "saveUserFacebookDataEx", 
            {facebookUserID: r,sessionKey: s,accessToken1: u,accessToken3: y,flags: C,accessTokenEx: J}, P, true, true).send([M, O])
        },updateUserFacebookData: function(r, s, u, y, C, J, M, O) {
            var P = B(arguments, O);
            F(false, "updateUserFacebookData", {facebookUserID: r,sessionKey: s,accessToken1: u,accessToken3: y,flags: C,accessTokenEx: J}, P, true, true).send([M, O])
        },removeUserFacebookData: function(r, s, u) {
            var y = B(arguments, u);
            F(false, "removeUserFacebookData", {facebookUserID: r}, y).send([s, u])
        },getUserGoogleData: function(r, s) {
            var u = B(arguments, 
            s);
            F(false, "getUserGoogleData", {}, u, true, true).send([r, s])
        },saveUserGoogleData: function(r, s) {
            var u = B(arguments, s);
            F(false, "saveUserGoogleData", {}, u).send([r, s])
        },updateUserGoogleData: function(r, s) {
            req = g.createRequest(false, "updateUserGoogleData", {}, arguments[arguments.length - 1] === s ? {} : arguments[arguments.length - 1]);
            req.send([r, s])
        },removeUserGoogleData: function(r, s, u) {
            var y = B(arguments, u);
            F(false, "removeUserGoogleData", {googleID: r}, y).send([s, u])
        },getUserTwitterData: function(r, s) {
            req = g.createRequest(false, 
            "getUserTwitterData", {}, arguments[arguments.length - 1] === s ? {} : arguments[arguments.length - 1], true, true);
            req.send([r, s])
        },saveUserTwitterData: function(r, s, u, y, C) {
            req = g.createRequest(false, "saveUserTwitterData", {twitterUserID: r,oauthToken: s,oauthSecret: u}, arguments[arguments.length - 1] === C ? {} : arguments[arguments.length - 1]);
            req.send([y, C])
        },updateUserTwitterData: function(r, s, u, y, C) {
            req = g.createRequest(false, "updateUserTwitterData", {twitterUserID: r,oauthToken: s,oauthSecret: u}, arguments[arguments.length - 
            1] === C ? {} : arguments[arguments.length - 1]);
            req.send([y, C])
        },removeUserTwitterData: function(r, s, u) {
            req = g.createRequest(false, "removeUserTwitterData", {twitterUserID: r}, arguments[arguments.length - 1] === u ? {} : arguments[arguments.length - 1]);
            req.send([s, u])
        },postTwitterStatus: function(r, s, u, y, C) {
            req = g.createRequest(false, "postTwitterStatus", {message: r,oauthToken: s,oauthSecret: u}, arguments[arguments.length - 1] === C ? {} : arguments[arguments.length - 1]);
            req.send([y, C])
        },getTwitterFriends: function(r, s, u, y, C) {
            req = g.createRequest(false, 
            "getTwitterFriends", {twitterUserID: r,oauthToken: s,oauthSecret: u}, arguments[arguments.length - 1] === C ? {} : arguments[arguments.length - 1]);
            req.send([y, C])
        },getTwitterFollowers: function(r, s, u, y, C) {
            req = g.createRequest(false, "getTwitterFollowers", {twitterUserID: r,oauthToken: s,oauthSecret: u}, arguments[arguments.length - 1] === C ? {} : arguments[arguments.length - 1]);
            req.send([y, C])
        },getUsernameSuggestions: function(r, s, u, y, C) {
            var J = B(arguments, C);
            F(true, "getUsernameSuggestions", {baseUsername: r,fullName: s,idOrRand: u}, 
            J).send([y, C])
        },registerFacebookUser: function(r, s, u, y, C, J, M, O, P, Q, S, R, T, V, U) {
            var W = B(arguments, U);
            F(false, "registerFacebookUser", {username: r,firstName: s,emailAddress: u,sex: y,birthDate: C,flags: J,inviteID: M,facebookUserID: O,sessionKey: P,accessToken1: Q,accessToken3: S,accessTokenEx: R,facebookFlags: T}, W, true, true).send([V, U])
        },getGroovesharkUsersFromFacebookUserIDs: function(r, s, u) {
            var y = B(arguments, u);
            F(false, "getGroovesharkUsersFromFacebookUserIDs", {facebookUserIDs: r}, y).send([s, u])
        },getGroovesharkUsersFromTwitterUserIDs: function(r, 
        s, u) {
            req = g.createRequest(false, "getGroovesharkUsersFromTwitterUserIDs", {twitterUserIDs: r}, arguments[arguments.length - 1] === u ? {} : arguments[arguments.length - 1]);
            req.send([s, u])
        },registerGoogleUser: function(r, s, u, y, C, J, M, O, P) {
            var Q = B(arguments, P);
            F(false, "registerGoogleUser", {username: r,firstName: s,emailAddress: u,sex: y,birthDate: C,flags: J,inviteID: M}, Q, true, true).send([O, P])
        },registerTwitterUser: function(r, s, u, y, C, J, M, O, P, Q, S, R) {
            req = g.createRequest(false, "registerTwitterUser", {username: r,firstName: s,
                emailAddress: u,sex: y,birthDate: C,flags: J,inviteID: M,twitterUserID: O,oauthToken: P,oauthSecret: Q}, arguments[arguments.length - 1] === R ? {} : arguments[arguments.length - 1], true, true);
            req.send([S, R])
        },updateLastfmService: function(r, s, u, y, C, J, M) {
            var O = B(arguments, M);
            F(false, "updateLastfmService", {session: r,token: s,username: u,flagsAdd: y,flagsRemove: C}, O).send([J, M])
        },saveLastfmService: function(r, s, u, y, C, J) {
            var M = B(arguments, J);
            F(false, "saveLastfmService", {session: r,token: s,username: u,flags: y}, M).send([C, J])
        },
        getLastfmService: function(r, s) {
            var u = B(arguments, s);
            F(false, "getLastfmService", {}, u).send([r, s])
        },removeLastfmService: function(r, s, u) {
            var y = B(arguments, u);
            F(false, "removeLastfmService", {lastfmUsername: r}, y).send([s, u])
        },saveUserFlattrData: function(r, s, u, y, C) {
            var J = B(arguments, C);
            F(false, "saveUserFlattrData", {accessToken: r,flattrUsername: s,flags: u}, J, true).send([y, C])
        },updateUserFlattrData: function(r, s, u, y, C) {
            var J = B(arguments, C);
            F(false, "updateUserFlattrData", {accessToken: r,flattrUsername: s,flags: u}, 
            J, true).send([y, C])
        },getUserFlattrData: function(r, s) {
            var u = B(arguments, s);
            F(false, "getUserFlattrData", {}, u, true).send([r, s])
        },removeUserFlattrData: function(r, s) {
            var u = B(arguments, s);
            F(false, "removeUserFlattrData", {}, u).send([r, s])
        },getAffiliateDownloadURLs: function(r, s, u, y) {
            var C = B(arguments, y);
            F(false, "getAffiliateDownloadURLs", {songName: r,artistName: s}, C).send([u, y])
        },getServiceStatus: function(r, s) {
            var u = B(arguments, s);
            F(false, "getServiceStatus", {}, u).send([r, s])
        },provideVIPFeedback: function(r, 
        s, u, y, C) {
            var J = B(arguments, C);
            F(false, "provideVIPFeedback", {fromAddress: r,message: s,type: u}, J).send([y, C])
        },artistGetSimilarArtists: function(r, s, u) {
            var y = B(arguments, u);
            F(true, "artistGetSimilarArtists", {artistID: r}, y).send([s, u])
        },getThemeFromDFP: function(r, s, u) {
            var y = B(arguments, u);
            y = F(false, "getThemeFromDFP", {paramString: r}, y, false, true);
            y.type = "dfp";
            y.send([s, u])
        },getNotificationFromDFP: function(r, s, u) {
            var y = B(arguments, u);
            y = F(false, "getNotificationFromDFP", {paramString: r}, y, false, true);
            y.type = 
            "dfp";
            y.send([s, u])
        },getVideoFromDFP: function(r, s, u) {
            var y = B(arguments, u);
            y = F(false, "getVideoFromDFP", {paramString: r}, y, false, true);
            y.type = "dfp";
            y.send([s, u])
        },getItemByPageName: function(r, s, u) {
            var y = B(arguments, u);
            F(true, "getItemByPageName", {name: r}, y).send([s, u])
        },getPageNameByIDType: function(r, s, u, y) {
            var C = B(arguments, y);
            C = F(true, "getPageNameByIDType", {id: r,type: s}, C);
            C.promise().then(u, y);
            C.promise().then(function(J) {
                J.name && window.GS && GS.router && GS.router.cachePageName(J.name, s, r)
            });
            C.send()
        },
        getPageInfoByIDType: function(r, s, u, y) {
            var C = B(arguments, y);
            C = F(true, "getPageInfoByIDType", {id: r,type: s}, C);
            C.promise().then(u, y);
            C.promise().then(function(J) {
                J.Name && window.GS && GS.router && GS.router.cachePageName(J.Name, s, r)
            });
            C.send()
        },userCollaborativePlaylistChanged: function(r, s, u) {
            var y = B(arguments, u);
            F(true, "userCollaborativePlaylistChanged", {playlist: r}, y).send([s, u])
        },userGetPoints: function(r, s) {
            var u = B(arguments, s);
            F(false, "userGetPoints", {}, u).send([r, s])
        },getClearvoiceMemberInfo: function(r, 
        s, u) {
            var y = B(arguments, u), C = {};
            if (r)
                C.guid = r;
            F(false, "getClearvoiceMemberInfo", C, y, true).send([s, u])
        },getUserIDByClearvoiceEmail: function(r, s, u) {
            var y = B(arguments, u);
            F(false, "getUserIDByClearvoiceEmail", {email: r}, y, true).send([s, u])
        },saveClearvoiceMemberInfo: function(r, s, u, y, C, J) {
            var M = B(arguments, J);
            F(false, "saveClearvoiceMemberInfo", {guid: r,fName: s,lName: u,email: y}, M, true).send([C, J])
        },addClearvoiceAnswers: function(r, s, u) {
            var y = B(arguments, u);
            F(false, "addClearvoiceAnswers", {questionsAndAnswers: r}, 
            y, true).send([s, u])
        },removeClearvoiceFromUser: function(r, s, u) {
            var y = B(arguments, u);
            F(false, "removeClearvoiceFromUser", {givePoints: r}, y).send([s, u])
        },getUserSurveys: function(r, s, u) {
            var y = B(arguments, u);
            F(false, "getUserSurveys", {userID: r}, y).send([s, u])
        },getAvailableSurveys: function(r, s) {
            var u = B(arguments, s);
            F(false, "getAvailableSurveys", {}, u).send([r, s])
        },saveUserAnswers: function(r, s, u, y, C, J) {
            var M = B(arguments, J);
            F(false, "saveUserAnswers", {surveyID: r,userID: s,questionsAndAnswers: u,finalize: y}, M, true, 
            true).send([C, J])
        },finalizeUserSurvey: function(r, s, u, y) {
            var C = B(arguments, y);
            F(false, "finalizeUserSurvey", {surveyID: r,userID: s}, C, true, true).send([u, y])
        },addKinesisToUser: function(r, s) {
            var u = B(arguments, s);
            F(false, "addKinesisToUser", {}, u).send([r, s])
        },removeKinesisFromUser: function(r, s) {
            var u = B(arguments, s);
            F(false, "removeKinesisFromUser", {}, u).send([r, s])
        },getKinesisUserPassword: function(r, s) {
            var u = B(arguments, s);
            F(false, "getKinesisUserPassword", {}, u).send([r, s])
        },submitPlaylistForCampaign: function(r, 
        s, u, y) {
            var C = B(arguments, y);
            (new g("submitPlaylistForCampaign", {playlistID: r,campaignID: s}, C, false)).send([u, y])
        },submitSongVoteForCampaign: function(r, s, u, y) {
            var C = B(arguments, y);
            (new g("submitSongVoteForCampaign", {songID: r,campaignID: s}, C, false)).send([u, y])
        },getPlaylistsForCampaign: function(r, s, u) {
            var y = B(arguments, u);
            (new g("getPlaylistsForCampaign", {campaignID: r}, y, false)).send([s, u])
        },getSubscriptionHistory: function(r, s) {
            var u = B(arguments, s);
            F(true, "getSubscriptionHistory", {}, u, true, true).send([r, 
                s])
        },getPartyHash: function(r, s) {
            var u = B(arguments, s);
            u = F(false, "getPartyHash", {}, u);
            u.promise().then(r, s);
            u.queue("playlist")
        },suggestFlattr: function(r, s, u, y, C) {
            var J = B(arguments, C);
            F(false, "suggestFlattr", {urls: r,delay: s,reverse: u}, J, false, true).send([y, C])
        },reportBadAd: function(r, s, u, y, C, J) {
            var M = B(arguments, J);
            F(false, "reportBadAd", {placement: r,desc: s,info: u,type: y}, M).send([C, J])
        }})
})();
GS.Controllers.BaseController.extend("GS.Controllers.AuthController", {onWindow: true}, {init: function() {
        GS.service = GS.service || GS.Controllers.ServiceController.instance();
        if (!gsConfig.user.UserID)
            gsConfig.user.UserID = -1;
        this._handleLoginChange(GS.Models.AuthUser.wrap(gsConfig.user));
        this._super();
        this.subscribe("gs.auth.update", this.callback(this._onAuthUpdate))
    },appReady: function() {
        if (GS.user.UserID > 0 && GS.user.TSDOB !== "" && GS.user.UserID != 42) {
            var c = new Date, a = GS.user.TSDOB.split("-"), b = parseInt(a[1], 
            10) - 1;
            a = parseInt(a[2], 10);
            c.getMonth() == b && c.getDate() == a && GS.getNotice().displayPerAnum()
        }
    },login: function(c, a, b, g, h) {
        GS.service.authenticateUser(c, a, b, this.callback(this._loginSuccess, "normal", g, h), this.callback(this._loginFailed, "normal", h))
    },loginViaFacebook: function() {
        GS.getLightbox().close();
        GS.getLightbox().open("forget", {message: "",title: "POPUP_RESET_PASSWORD_TITLE_FACEBOOK_FAIL",facebookBroken: true})
    },loginViaTwitter: function(c, a) {
        GS.getTwitter().login(this.callback(this._loginSuccess, "twitter", 
        c, a), this.callback(this._loginFailed, "twitter", a))
    },loginViaGoogle: function(c, a) {
        GS.getGoogle().login(this.callback(this._loginSuccess, "google", c, a), this.callback(this._loginFailed, "google", a))
    },_loginSuccess: function(c, a, b, g) {
        if (g && g.userID === 0 || !g)
            return this._loginFailed(c, b, g);
        g.authType = c;
        c = {};
        if (window.GS && GS.Controllers.PageController.activePageName === "SurveysController")
            c.doNotReset = true;
        this._updateUser(c, {User: g});
        if (GS.airbridge && GS.airbridge.isDesktop && !GS.user.subscription.canUseDesktop() || 
        gsConfig.isPreview && parseInt(g.isPremium, 10) !== 1 && parseInt(g.userID, 10) % 5 != 0) {
            if ($.isFunction(b)) {
                g.error = "POPUP_SIGNUP_LOGIN_FORM_PREMIUM_REQUIRED_ERROR";
                b(g)
            }
        } else
            $.isFunction(a) && a(g);
        return g
    },_loginFailed: function(c, a, b) {
        b || (b = {});
        b.authType = c;
        $.isFunction(a) && a(b);
        return b
    },logout: function(c) {
        GS.service.logoutUser(this.callback(this._logoutSuccess, c), this.callback(this._logoutFailed))
    },_logoutSuccess: function(c) {
        GS.user.clearData();
        GS.getGuts().logEvent("logout", {});
        GS.getGuts().endContext("userID");
        GS.router.setHash("/");
        this._handleLoginChange(GS.Models.AuthUser.wrap({userTrackingID: GS.user.userTrackingID}));
        $.isFunction(c) && c()
    },_logoutFailed: function() {
    },signup: function(c, a, b, g, h, m, k, n, o, q) {
        var x = this._getInviteCode();
        GS.service.registerUser(c, a, b, "", g, h, m, k, x, n, this.callback(this._signupSuccess, "normal", x, g, o, q), this.callback(this._signupFailed, "normal", q))
    },signupViaFacebook: function(c, a, b, g, h, m, k, n, o) {
        var q = this._getInviteCode();
        k.accessToken1 ? GS.service.registerFacebookUser(c, a, b, g, h, 
        m, q, k.facebookUserID, k.sessionKey, k.accessToken1, k.accessToken3, null, k.flags, this.callback(this._signupSuccess, "facebook", q, b, n, o), this.callback(this._signupFailed, "facebook", o)) : GS.service.registerFacebookUser(c, a, b, g, h, m, q, k.facebookUserID, "", "", "", k.accessTokenEx, k.flags, this.callback(this._signupSuccess, "facebook", q, b, n, o), this.callback(this._signupFailed, "facebook", o))
    },signupViaGoogle: function(c, a, b, g, h, m, k, n) {
        var o = this._getInviteCode();
        GS.service.registerGoogleUser(c, a, b, g, h, m, o, this.callback(this._signupSuccess, 
        "google", o, b, k, n), this.callback(this._signupFailed, "google", n))
    },signupViaTwitter: function(c, a, b, g, h, m, k, n, o) {
        var q = this._getInviteCode();
        GS.service.registerTwitterUser(c, a, b, g, h, m, q, k.twitterUserID, k.oauthToken, k.oauthSecret, this.callback(this._signupSuccess, "twitter", q, b, n, o), this.callback(this._signupFailed, "twitter", o))
    },_signupSuccess: function(c, a, b, g, h, m) {
        if (m && m.userID === 0 || !m)
            return this._signupFailed(c, h, m);
        m.authType = c;
        m.Email = b;
        if (a) {
            GS.store.set("lastInviteCode", null);
            gsConfig.inviteCode = 
            null;
            GS.service.getUserByInviteID(a, this.callback(this._getInviterSuccess))
        }
        m.doNotReset = true;
        GS.service.getUserByID(m.userID, this.callback(this._updateUser, m));
        $.isFunction(g) && g(m);
        return m
    },_signupFailed: function(c, a, b) {
        b || (b = {});
        b.authType = c;
        $.isFunction(a) && a(b);
        return b
    },_getInviteCode: function() {
        var c = "", a = new Date, b = GS.store.get("lastInviteCode");
        if (b)
            if (b.expires && b.expires > a.valueOf())
                c = b.inviteCode;
            else
                GS.store.remove("lastInviteCode");
        else if (gsConfig.inviteCode)
            c = gsConfig.inviteCode;
        return c
    },_getInviterSuccess: function(c) {
        var a = GS.Models.User.wrap(c);
        GS.getLightbox().open({type: "followInviter",view: {header: "POPUP_FOLLOW_INVITER_TITLE",messageHTML: (new GS.Models.DataString($.localize.getString("POPUP_FOLLOW_INVITER_MESSAGE"), {user: a.Name})).render(),buttonsLeft: [{label: "POPUP_FOLLOW_INVITER_CANCEL",className: "close"}],buttonsRight: [{label: "POPUP_FOLLOW_INVITER_FOLLOW",className: "submit"}]},callbacks: {".submit": function() {
                    GS.user.addToUserFavorites(a.UserID)
                }}})
    },_updateUser: function(c, 
    a) {
        a.User.UserID = c.userID;
        c.doNotReset || GS.router.setHash("/");
        var b = $.extend({}, c, a.User);
        this._handleLoginChange(GS.Models.AuthUser.wrapFromService(b), c);
        $("#notifications li.survey").remove()
    },_handleLoginChange: function(c, a) {
        var b = GS.user;
        GS.user = c;
        GS.service.reportUserChange(GS.user);
        GS.user.UserID > 0 && !GS.Models.User.getOneFromCache(GS.user.UserID) && GS.Models.User.wrap(GS.user);
        if (b && b.isDirty) {
            var g = {};
            _.forEach(b.playlists, function(m) {
                var k = [], n = m.PlaylistID;
                _.forEach(m.songs, function(o) {
                    k.push(o.SongID)
                });
                GS.user.createPlaylist(m.PlaylistName, k, m.Description, function() {
                    g[n] = m.PlaylistID
                }, null, false)
            });
            var h = _.map(b.library.songs, function(m) {
                return m.SongID
            });
            GS.user.addToLibrary(h, false);
            _.forEach(b.favorites.artists, function(m) {
                GS.user.addToArtistFavorites(m.ArtistID, false)
            });
            _.forEach(b.favorites.playlists, function(m) {
                GS.user.addToPlaylistFavorites(m.PlaylistID, false)
            });
            _.forEach(b.favorites.songs, function(m) {
                GS.user.addToSongFavorites(m.SongID, false)
            });
            _.forEach(b.favorites.users, function(m) {
                GS.user.addToUserFavorites(m.UserID, 
                false)
            });
            _.forEach(b.sidebar.stations, function(m) {
                b.defaultStations.indexOf(m) == -1 && GS.user.addToShortcuts("station", m, "", false)
            });
            _.forEach(b.sidebar.playlists, function(m) {
                if (m < 0)
                    m = g[m];
                (m = GS.Models.Playlist.getOneFromCache(m)) && GS.user.addToShortcuts("playlist", m.PlaylistID, m.PlaylistName, false)
            });
            _.forEach(b.sidebar.subscribedPlaylists, function(m) {
                (m = GS.Models.Playlist.getOneFromCache(m)) && GS.user.addToShortcuts("playlist", m.PlaylistID, m.PlaylistName, false)
            });
            _.forEach(b.sidebar.songs, function(m) {
                (m = 
                GS.Models.Song.getOneFromCache(m)) && GS.user.addToShortcuts("song", m.SongID, m.SongName, false)
            });
            _.forEach(b.sidebar.artists, function(m) {
                (m = GS.Models.Artist.getOneFromCache(m)) && GS.user.addToShortcuts("artist", m.ArtistID, m.ArtistName, false)
            });
            _.forEach(b.sidebar.albums, function(m) {
                (m = GS.Models.Album.getOneFromCache(m)) && GS.user.addToShortcuts("album", m.AlbumID, m.AlbumName, false)
            })
        }
        GS.service.reportUserChange(GS.user);
        $.publish("gs.auth.update", a);
        if (!GS.user.subscription.canUseDesktop() && GS.Controllers.AirbridgeController.instance().isDesktop || 
        gsConfig.isPreview && !GS.user.subscription.isPremium() && GS.user.UserID % 5 != 0) {
            if (h = GS.getLightbox ? GS.getLightbox() : null)
                $("#lightbox_wrapper .lbcontainer.gs_lightbox_login:visible").length || h.open("login", {premiumRequired: true,showPreview: true,notCloseable: true});
            else
                gsConfig.lightboxOnInit = {type: "login",defaults: {premiumRequired: true,showPreview: true,notCloseable: true}};
            GS.player && GS.player.pauseNextSong()
        }
        GS.user.isLoggedIn || $.publish("gs.auth.library.update");
        if (GS.getGuts && GS.user && GS.user.UserID > 
        0) {
            h = _.browserDetect();
            GS.getGuts().logEvent("login", {userID: GS.user.UserID,browser: h.browser,browserVersion: h.version,os: navigator.platform,ip: gsConfig.remoteAddr});
            GS.getGuts().beginContext({userID: GS.user.UserID})
        }
    },_onAuthUpdate: function() {
        $.isFunction(this.vipUpdateCallback) && GS.user.subscription.isPremium() && this.vipUpdateCallback();
        this.vipUpdateCallback = null;
        $.isFunction(this.authUpdateCallback) && this.authUpdateCallback();
        this.authUpdateCallback = null
    }});
jQuery.Controller.extend("GS.Controllers.ThemeController", {_instance: null,themes: themes,sortOrder: themesSortOrder,plusThemes: plusThemes,artistThemes: artistThemes,instance: function() {
        return this._instance ? this._instance : new this($(document))
    },init: function() {
        this._super()
    }}, {currentTheme: null,themes: null,sort: null,themesLocation: "themes",themePreferences: {},hasSeenSponsoredTheme: true,hasSeenRotationCount: true,promptOnLogin: false,themeVisualizerForcedOnce: false,themeIsReady: false,manualSelectThemeID: null,
    lastActivePage: null,lastThemeNotification: null,lastDFPChange: null,lastUserChange: null,PAGE_HOME: "homecontroller",DEFAULT_USER_THEMEID: 593,DEFAULT_PREMIUM_THEMEID: 593,THEME_URL_PATTERN: /^#!\/(theme)\/(.*)\/?/,THEME_USER_LIMIT: 6E5,THEME_RATE_LIMIT: 6E4,THEME_NOTIF_RATE_LIMIT: 864E5,THEME_FLAG_DEFAULT: 0,THEME_FLAG_FAMILY_FRIENDLY: 1,init: function() {
        this.themes = themes;
        this.sort = themesSortOrder;
        this.themePreferences = GS.store.get("themePreferences") || {};
        $.subscribe("gs.app.ready", this.callback(this.appReady));
        $.subscribe("gs.app.resize", this.callback(this.positionTheme));
        $.subscribe("gs.auth.update", this.callback(this.onAuthUpdate));
        $.subscribe("gs.page.home.update", this.callback(this.positionTheme));
        $.subscribe("gs.player.nowplaying", this.callback(this.onSongPlay));
        $.subscribe("gs.player.streamserver", this.callback(this.onStreamServer));
        $.subscribe("gs.page.view", this.callback(this.pageView));
        $.subscribe("gs.theme.click", this.callback(this.onThemeClick));
        $.subscribe("gs.theme.playVideo", this.callback(this.playVideo))
    },
    appReady: function() {
        if (!(location.hash && location.hash.match(GS.theme.THEME_URL_PATTERN))) {
            if (GS.user.UserID > 0 || _.defined(GS.store.get("isFirstVisit")) || _.defined(gsConfig.isNoob) && !gsConfig.isNoob) {
                this.isFirstVisit = false;
                this.resetTheme();
                this.handlePreviewLightboxTrigger()
            } else
                GS.service.isFirstVisit(this.callback("onIsFirstVisit"));
            setTimeout(this.callback(function() {
                this.currentTheme || this.lastOrDefault()
            }), 1E4)
        }
    },onAuthUpdate: function(c) {
        if (!(c && c.hasOwnProperty("doNotReset") || location.hash.indexOf("#!/signup") == 
        0)) {
            this.lastDFPChange = this.lastUserChange = this.lastThemeNotification = null;
            this.hasSeenRotationCount = this.hasSeenSponsoredTheme = true;
            if (this.promptOnLogin && GS.user.UserID > 0) {
                this.promptOnLogin = false;
                this.lastDFPChange = (new Date).getTime();
                GS.getLightbox().open("promotion", {theme: this.currentTheme})
            } else
                !this.promptOnLogin && GS.getLightbox().curType !== "promotion" && this.resetTheme();
            if (GS.user.subscription.canHideAds()) {
                $("#sidebarCapital_160").removeClass("capital");
                GS.getAd().hideAdBar()
            }
            this.currentTheme && 
            this.currentTheme.onAuthChange && this.currentTheme.onAuthChange()
        }
    },resetTheme: function(c) {
        if (!(c && c.hasOwnProperty("doNotReset") || this.isFirstVisit)) {
            c = new Date;
            !gsConfig.isPreview && !GS.user.subscription.canHideAds() && this.hasSeenSponsoredTheme && this.hasSeenRotationCount && (!this.lastUserChange || c.getTime() - this.lastUserChange > this.THEME_USER_LIMIT) ? this.loadFromDFP() : this.lastOrDefault()
        }
    },onIsFirstVisit: function(c) {
        this.isFirstVisit = c;
        GS.store.set("isFirstVisit", false);
        if (this.isFirstVisit) {
            this.setCurrentTheme(this.DEFAULT_USER_THEMEID);
            this.trackFirstVisit()
        } else
            this.resetTheme();
        this.handlePreviewLightboxTrigger()
    },lastOrDefault: function() {
        var c = this.getLastTheme();
        if (this.themes) {
            if (c && themes[c] && (GS.user.subscription.canHideAds() && c || themes[c] && !themes[c].premium)) {
                themes[c].pageTracking = [];
                this.setCurrentTheme(c)
            } else
                GS.user.subscription.canHideAds() ? this.setCurrentTheme(this.DEFAULT_PREMIUM_THEMEID) : this.setCurrentTheme(this.DEFAULT_USER_THEMEID);
            this.themeNotification(GS.player.getCurrentSong())
        }
    },setCurrentTheme: function(c, 
    a) {
        if (!this.themes[c] || this.currentTheme && this.currentTheme.themeID == c || !GS.user.subscription.canHideAds() && this.themes[c].premium)
            return false;
        var b = !this.currentTheme;
        this.lastTheme = this.currentTheme;
        if (GS.getNotice() && this.lastTheme) {
            $.each(GS.getNotice().queuedNotifications.filter(function(h) {
                return h.iID == GS.theme.lastTheme.themeID
            }), function(h, m) {
                GS.getNotice().discardQueuedNotification(m)
            });
            $.each(GS.getNotice().openNotifications.filter(function(h) {
                return h.iID == GS.theme.lastTheme.themeID
            }), 
            function(h, m) {
                m.close()
            })
        }
        this.lastTheme && this.lastTheme.removeReady && this.lastTheme.removeReady();
        this.promptOnLogin = false;
        this.currentTheme = GS.Models.Theme.wrap(this.themes[c]);
        this.renderTheme();
        var g = new Date;
        if (GS.getAd)
            GS.getAd().rotationCountPerImpression = 0;
        if (a) {
            this.hasSeenRotationCount = this.hasSeenSponsoredTheme = true;
            this.setLastTheme(c);
            if (this.lastTheme)
                this.setLastSeen(this.lastTheme.themeID);
            else
                this.lastUserChange = g.getTime()
        } else {
            this.lastDFPChange = g.getTime();
            this.hasSeenRotationCount = 
            this.hasSeenSponsoredTheme = false
        }
        if (b) {
            this.onReady();
            GS.getGuts().gaTrackEvent("themes", "firstTheme", c);
            this.firstTheme = "" + c
        } else
            this.adSync();
        GS.getGuts().gaTrackEvent("themes", "change", c);
        this.themeImpression();
        this.themePageImpression();
        this.setRecentSeen(this.currentTheme.themeID);
        this.currentTheme.ready && setTimeout(this.callback(function() {
            this.currentTheme.ready();
            GS.getFacebook();
            GS.getNotice()
        }, 0));
        $.publish("gs.theme.set");
        this.buildSidebarAd()
    },setLastTheme: function(c) {
        if (this.themePreferences[GS.user.UserID])
            this.themePreferences[GS.user.UserID].lastTheme = 
            c;
        else
            this.themePreferences[GS.user.UserID] = {lastTheme: c,lastSeen: {}}
    },setLastSeen: function(c) {
        var a = new Date;
        this.lastUserChange = a.getTime();
        if (this.themePreferences[GS.user.UserID])
            this.themePreferences[GS.user.UserID].lastSeen[c] = a.getTime()
    },setRecentSeen: function(c) {
        var a = (new Date).getTime();
        this.themePreferences[GS.user.UserID] || (this.themePreferences[GS.user.UserID] = {lastTheme: c,lastSeen: {},recentSeenThemes: []});
        if (!this.themePreferences[GS.user.UserID].recentSeenThemes)
            this.themePreferences[GS.user.UserID].recentSeenThemes = 
            [];
        for (var b = 0; b < this.themePreferences[GS.user.UserID].recentSeenThemes.length; b++) {
            var g = this.themePreferences[GS.user.UserID].recentSeenThemes[b];
            if (GS.theme.themes[g] && GS.theme.themes[g].seenExpiration) {
                g = GS.theme.themes[g].seenExpiration;
                a > g && this.themePreferences[GS.user.UserID].recentSeenThemes.splice(b, 1)
            } else
                this.themePreferences[GS.user.UserID].recentSeenThemes.splice(b, 1)
        }
        if (GS.theme.themes[c] && GS.theme.themes[c].seenExpiration) {
            g = GS.theme.themes[c].seenExpiration;
            a < g && GS.theme.themePreferences[GS.user.UserID].recentSeenThemes.indexOf(c) < 
            0 && this.themePreferences[GS.user.UserID].recentSeenThemes.push(c)
        }
    },getRecentSeen: function() {
        return this.themePreferences[GS.user.UserID] ? this.themePreferences[GS.user.UserID].recentSeenThemes : null
    },setLastDFPAction: function() {
        this.lastDFPChange = (new Date).getTime()
    },getLastTheme: function() {
        return this.themePreferences[GS.user.UserID] && this.themePreferences[GS.user.UserID].lastTheme ? this.themePreferences[GS.user.UserID].lastTheme : null
    },getLastSeen: function(c) {
        return this.themePreferences[GS.user.UserID] && 
        this.themePreferences[GS.user.UserID].lastSeen[c] ? this.themePreferences[GS.user.UserID].lastSeen[c] : null
    },canCallAdServer: function() {
        return !this.isFirstVisit && !gsConfig.isPreview && !GS.user.subscription.canHideAds() && this.hasSeenSponsoredTheme && this.hasSeenRotationCount && (!this.lastUserChange || (new Date).getTime() - this.lastUserChange > this.THEME_USER_LIMIT)
    },adSync: function() {
        if (!GS.user.subscription.canHideAds() && (this.currentTheme.misc && this.currentTheme.misc.adSync || this.currentTheme.adSync))
            GS.getAd().startAdTimer()
    },
    adUnSync: function() {
        if (!GS.user.subscription.canHideAds() && (this.currentTheme.misc && this.currentTheme.misc.adUnSync || this.currentTheme.adUnSync))
            GS.getAd().startAdTimer()
    },hasAdSyncUnSync: function() {
        return this.currentTheme.misc && this.currentTheme.misc.adSync && this.currentTheme.misc.adUnSync || this.currentTheme.adSync && this.currentTheme.adUnSync
    },loadFromDFPManual: function(c) {
        this.manualSelectThemeID = c;
        c = ";" + ["id=" + this.manualSelectThemeID, "m=1;dcmt=text/json;sz=777x777"].join(";");
        GS.service.getThemeFromDFP(c, 
        this.callback("onGetThemeManual"), this.callback("onGetThemeErr"))
    },onGetThemeManual: function(c) {
        this.onGetTheme(c, true)
    },loadFromDFP: function() {
        var c = new Date;
        if (!gsConfig.isPreview && !GS.user.subscription.canHideAds() && (!this.lastDFPChange || c.getTime() - this.lastDFPChange > this.THEME_RATE_LIMIT))
            GS.service.getThemeFromDFP(this.buildParams(), this.callback("onGetTheme"), this.callback("onGetThemeErr"))
    },onGetTheme: function(c, a) {
        var b = new Date;
        if (!a && b.getTime() - this.lastUserChange < this.THEME_USER_LIMIT)
            console.warn("[Stopped DFP Override]");
        else {
            try {
                c = JSON.parse(c)
            } catch (g) {
                console.log("invalid json from DFP", g);
                this.lastOrDefault();
                return
            }
            if (c) {
                if (a) {
                    if (this.manualSelectThemeID && this.manualSelectThemeID.toString() != c.themeID.toString()) {
                        this.themes[this.manualSelectThemeID].pageTracking = [];
                        this.setCurrentTheme(this.manualSelectThemeID, true);
                        return
                    }
                } else {
                    if (c.themeID < 0) {
                        this.trackDefault(c.themeID);
                        this.lastOrDefault();
                        return
                    }
                    if (this.getLastSeen(c.themeID)) {
                        this.lastOrDefault();
                        return
                    }
                }
                if (this.themes[c.themeID])
                    $.extend(this.themes[c.themeID], 
                    c);
                else
                    this.themes[c.themeID] = c;
                this.themes[c.themeID].themeID = _.isString(c.themeID) ? parseInt(c.themeID) : c.themeID;
                this.themes[c.themeID].premium = _.isString(c.premium) ? c.premium === "true" : c.premium;
                this.themes[c.themeID].sponsored = _.isString(c.sponsored) ? c.sponsored === "true" : c.sponsored;
                this.themes[c.themeID].adSync = _.isString(c.adSync) ? c.adSync === "true" : c.adSync;
                this.themes[c.themeID].adUnSync = _.isString(c.adUnSync) ? c.adUnSync === "true" : c.adUnSync;
                b = parseFloat(c.pageHeaderFrequency);
                if (!isNaN(b))
                    if (b == 
                    0 || Math.random() > b)
                        this.themes[c.themeID].pageTracking = null;
                b = parseFloat(c.artistNotifFrequency);
                if (!isNaN(b))
                    if (b == 0 || Math.random() > b)
                        this.themes[c.themeID].artistNotifTracking = null;
                this.setCurrentTheme(c.themeID, a)
            } else
                this.lastOrDefault()
        }
    },onGetThemeErr: function() {
        if (this.manualSelectThemeID && (!this.currentTheme || this.manualSelectThemeID != this.currentTheme.themeID) && this.themes[this.manualSelectThemeID]) {
            themes[this.manualSelectThemeID].pageTracking = [];
            this.setCurrentTheme(this.manualSelectThemeID, 
            true);
            this.manualSelectThemeID = null
        } else
            this.lastOrDefault()
    },onReady: function() {
        if (!this.themeIsReady) {
            this.themeIsReady = true;
            GS.user.subscription.canHideAds() || GS.getAd().startAdTimer()
        }
    },onSongPlay: function(c) {
        if (c && c.SongID)
            if (!this.currentSong || this.currentSong.SongID != c.SongID) {
                this.currentSong = c;
                this.canCallAdServer() ? this.loadFromDFP() : this.themeNotification(c)
            }
    },onStreamServer: function(c) {
        if (document.visualizerTheme && document.visualizerTheme.loadCrossdomain) {
            document.visualizerTheme.loadCrossdomain(c.streamServer);
            if (!this.themeVisualizerForcedOnce)
                if (document.visualizerTheme && document.visualizerTheme.visualizerForceStart) {
                    document.visualizerTheme.visualizerForceStart();
                    this.themeVisualizerForcedOnce = true
                }
        }
    },savePreferences: function() {
        GS.store.set("themePreferences", this.themePreferences)
    },buildSidebarAd: function() {
        if (!GS.user.subscription.canHideAds() && !this.isFirstVisit && (!this.currentTheme.sponsored || this.currentTheme.sidebarAd) && GS.Controllers.PageController.activePageName.toLowerCase() == this.PAGE_HOME) {
            GS.getAd().showAdBar();
            GS.getAd().updateRotationCount();
            $("#sidebarCapital_160").addClass("capital");
            GS.getAd().buildAd($("#sidebarCapital_160"), 160, 600, ["p=home"])
        } else
            GS.getAd().hideAdBar()
    },pageView: function(c) {
        if (!this.currentTheme && !this.themeIsReady || !this.lastActivePage)
            this.lastActivePage = c.toLowerCase();
        else {
            switch (c.toLowerCase()) {
                case this.PAGE_HOME:
                    this.positionTheme();
                    this.hasAdSyncUnSync() && this.adSync();
                    this.themeImpression();
                    this.buildSidebarAd();
                    this.currentTheme && this.currentTheme.onDisplay && this.currentTheme.onDisplay();
                    break;
                default:
                    this.canCallAdServer() && this.loadFromDFP();
                    this.hasAdSyncUnSync() && this.lastActivePage == this.PAGE_HOME && this.adUnSync();
                    this.themePageImpression();
                    break
            }
            this.lastActivePage = c
        }
    },themeImpression: function() {
        if (this.currentTheme && this.themeIsReady && this.currentTheme.sponsored)
            if (GS.Controllers.PageController.activePageName && GS.Controllers.PageController.activePageName.toLowerCase() == this.PAGE_HOME)
                if (this.currentTheme.tracking) {
                    this.hasSeenSponsoredTheme = true;
                    GS.service.logTargetedThemeImpression(this.currentTheme.themeID);
                    this.loadTracking(this.currentTheme.tracking);
                    if (GS.getAd)
                        GS.getAd().rotationCountPerImpression = 0
                }
    },themePageImpression: function() {
        this.currentTheme && this.themeIsReady && this.currentTheme.sponsored && $("#theme_page_header").is(".active:visible") && this.loadTracking(this.currentTheme.pageTracking)
    },loadTracking: function(c) {
        if ($.isArray(c)) {
            var a = (new Date).valueOf(), b;
            _.forEach(c, function(g) {
                if (g) {
                    g += g.indexOf("?") != -1 ? "&" + a : "?" + a;
                    b = new Image;
                    $("body").append($(b).load(function(h) {
                        $(h.target).remove()
                    }).css("visibility", 
                    "hidden").attr("src", g))
                }
            })
        }
    },trackDefault: function(c) {
        this.loadTracking(["http://ad.doubleclick.net/ad/grooveshark.wall/;id=" + c + ";d=1;sz=1x1;ord="]);
        GS.getGuts().logEvent("trackDefaultTheme", {id: c})
    },trackFirstVisit: function() {
        this.loadTracking(["http://ad.doubleclick.net/ad/grooveshark.wall/;id=-1;v=1;sz=1x1;ord="])
    },onThemeClick: function(c) {
        c && c.currentTarget && this.currentTheme && this.currentTheme.handleClick(c)
    },playVideo: function(c) {
        if (this.currentTheme) {
            index = _.orEqual(c.index, 0);
            GS.getLightbox().open("video", 
            {video: this.currentTheme.videos[index],videos: this.currentTheme.videos,index: index})
        }
    },renderTheme: function() {
        var c = $("#theme_page_header.measure").height();
        if (this.currentTheme) {
            $("#themeStyleSheet").attr("href", [gsConfig.assetHost, this.themesLocation, this.currentTheme.location, "theme.css"].join("/") + "?ver=" + this.currentTheme.version);
            $(".theme_component").html("").removeClass("active");
            for (var a = 0; a < this.currentTheme.sections.length; a++)
                this.renderSection(this.currentTheme.sections[a]);
            this.positionTheme();
            a = window.location.hash.toString();
            a = a.replace(/^#!\/|^#\/|^\/|^#!|^#/, "");
            if (a !== "" && a.indexOf("theme") !== 0 && a.indexOf("sessions") !== 0) {
                $("#theme_home object").hide();
                a.indexOf("signup");
                this.currentTheme.artistIDs && this.themeNotification(GS.player.getCurrentSong())
            }
        }
        $("#theme_page_header.measure").height() !== c && GS.resize()
    },renderSection: function(c) {
        if (this.currentTheme && c.length && $(c).length) {
            var a = [this.themesLocation, this.currentTheme.location];
            a.push(c.substr(7, c.length));
            a = a.join("/");
            $(c).html(this.view(a)).addClass("active");
            if (c === "#theme_page_header" || c === "#theme_page_header_expandable")
                $(c).prepend($("<div class='border'></div>"));
            this.currentTheme.bindAssets(c)
        }
    },positionTheme: function() {
        var c;
        if (this.currentTheme && this.currentTheme.sections)
            for (var a = 0; a < this.currentTheme.sections.length; a++) {
                c = this.currentTheme.sections[a];
                this.currentTheme.position(c)
            }
    },themeNotification: function(c) {
        c = _.orEqual(c, GS.player.getCurrentSong());
        var a = new Date, b = window.location.hash.toString();
        b = b.replace(/^#!\/|^#\/|^\/|^#!|^#/, "");
        if (c && this.currentTheme.artistIDs && b !== "")
            for (var g = 0; g < this.currentTheme.artistIDs.length; g++) {
                b = this.currentTheme.artistIDs[g];
                if (b == c.ArtistID && this.currentTheme.artistNotifTracking && (!this.lastThemeNotification || a.getTime() - this.lastThemeNotification > this.THEME_NOTIF_RATE_LIMIT)) {
                    this.lastThemeNotification = a.getTime();
                    GS.getNotice().displayThemeArtistNotification(c, this.currentTheme);
                    break
                }
            }
    },view: function(c, a, b) {
        var g = [c];
        if (b && b.type == "tooltip") {
            g = ["gs", "views"];
            g.push(c.replace(/^\//, ""))
        }
        a = 
        _.orEqual(a, this);
        b = this.calculateHelpers.call(this, b);
        g = "/" + g.join("/");
        g += $.View.ext + "?ver=" + this.currentTheme.version.toString().replace(/[\/\.\?]/g, "_");
        g.replace(/[\/\.]/g, "_").replace(/_+/g, "_").replace(/^_/, "");
        return $.View(g, a, b)
    },buildParams: function() {
        return GS.getAd().buildParams(["dcmt=text/json", "sz=777x777"], ";", ";")
    },themeCenter: function() {
        $(".theme-center").each(function() {
            var c = $(this);
            c.css({left: "50%",marginLeft: -(c.outerWidth() / 2)})
        })
    },downloadIE9: function() {
        function c(q) {
            return a.indexOf(q) >= 
            0
        }
        var a = navigator.userAgent.toLowerCase();
        parseFloat(window.navigator.appMinorVersion);
        c("windows nt");
        var b = c("windows nt 6.0"), g = c("windows nt 6.1"), h = c("windows nt 5.1"), m = c("msie");
        c("msie 7");
        c("msie 8");
        c("trident/5.0");
        c("trident/6.0");
        var k = c("firefox"), n = c("chrome"), o = false;
        if (n)
            Version = a.match(/chrome\/(\d{1,2})/)[1];
        if (k && /Firefox[\/\s](\d+\.\d+)/.test(navigator.userAgent))
            Version = Number(RegExp.$1);
        if (m || k && Version >= 4 || n && Version >= 11) {
            BitSniffed = true;
            o = c("win64") || c("wow64")
        }
        WinVersion = 
        h ? "xp" : b ? "vista" : g ? "win7" : "";
        WinBits = o ? "64" : "32";
        b = {"win7-32": "/8/6/D/86DB5DC9-5706-4A5B-BD46-FFBA6FA67D44/IE9-Windows7-x86-enu.exe","win7-64": "/8/6/D/86DB5DC9-5706-4A5B-BD46-FFBA6FA67D44/IE9-Windows7-x64-enu.exe","vista-32": "/8/6/D/86DB5DC9-5706-4A5B-BD46-FFBA6FA67D44/IE9-WindowsVista-x86-enu.exe","vista-64": "/8/6/D/86DB5DC9-5706-4A5B-BD46-FFBA6FA67D44/IE9-WindowsVista-x64-enu.exe"};
        g = WinVersion ? WinVersion + "-" + WinBits : "";
        return b[g] ? "http://download.microsoft.com/download" + b[g] : false
    },handlePreviewLightboxTrigger: function() {
        var c = 
        new Date, a = new Date(2011, 11, 1);
        if (!(c.valueOf() > a.valueOf()))
            if (this.isFirstVisit)
                GS.store.set("hasSeenUkuleleWelcome", true);
            else if (!GS.store.get("hasSeenUkuleleWelcome")) {
                GS.store.set("hasSeenUkuleleWelcome", true);
                GS.getLightbox().open("preview")
            }
    },currentTipElement: null,tooltipTimer: null,"#theme_home .tooltip mouseover": function(c) {
        clearTimeout(this.toolTipTimer);
        if (this.currentTipElement != c.get(0)) {
            this.currentTipElement = c.get(0);
            c = $(c);
            var a = c.attr("data-tip-type"), b = null;
            b = {flattrTarget: c.attr("data-tip-target"),
                flattrHeader: c.attr("data-tip-header"),flattrMessage: c.attr("data-tip-message"),flattrContext: "theme"};
            var g = c.offset(), h = g.left + c.width() + 350 > $("body").width() ? "left" : "right";
            $("#tooltip").stop().remove();
            b = c.attr("data-tip-view") ? $(this.view("themes/" + this.currentTheme.location + "/tooltip", {data: b,direction: h}, {})) : $(this.view("/shared/tooltips/" + a, {data: b,direction: h}, {type: "tooltip"}));
            h == "left" ? b.css({top: g.top - 10,left: g.left - parseFloat(c.attr("data-tip-width")) - 10}) : b.css({top: g.top,left: g.left + 
                c.width() + 5});
            $("body").append(b.hide().delay(250).fadeIn("fast"));
            b.bind("mouseover", this.callback(function(m) {
                $(m.currentTarget).attr("data-tooltip-mouseover", true)
            })).bind("mouseout", this.callback(function(m) {
                $(m.currentTarget).attr("data-tooltip-mouseover", null);
                this.toolTipTimer = setTimeout(this.callback("closeTooltip"), 750)
            }))
        }
    },"#theme_home .tooltip mouseout": function() {
        this.toolTipTimer = setTimeout(this.callback("closeTooltip"), 750)
    },closeTooltip: function() {
        if (!$("#tooltip.displayOnHover").attr("data-tooltip-mouseover")) {
            clearTimeout(this.tooltipTimer);
            this.tooltipTimer = this.currentTipElement = null;
            $("#tooltip").stop().fadeOut(50, function() {
                $(this).remove()
            })
        }
    }});
$.Class.extend("GS.Notification", {defaults: {duration: 5E3,view: "notification",viewParams: false,uniqueInstance: false,element: null,isOpen: false,isAdded: false,timeout: false,focusInText: false,mouseIsOut: false,listenersSet: false,useAnimation: true,onOpen: null,onClose: null,rateLimitType: "misc",timestamp: null,nowOrNever: false,expiration: 3E4,priority: 5,subscription: null,loggedIn: null,iID: null,xID: null,customLimit: null,force: false}}, {controller: null,init: function(c) {
        c = $.extend({}, GS.Notification.defaults, c);
        for (var a in c)
            if (c.hasOwnProperty(a))
                this[a] = c[a];
        if (!this.notificationID)
            this.notificationID = this.controller.generateNotificationID();
        this.controller.notificationLookup[this.notificationID] = this;
        if (this.uniqueInstance)
            this.controller.uniquesLookup[this.uniqueInstance] = this;
        if (!this.viewParams)
            this.viewParams = {};
        this.viewParams.notificationID = this.notificationID;
        if (!this.element)
            this.element = $(this.controller.view(this.view, this.viewParams))
    },open: function() {
        this.isAdded || this.add();
        this.useAnimation ? 
        this.element.slideDown("fast") : this.element.show();
        this.isOpen = true;
        this.beginTimeout();
        this.controller.reportOpen(this);
        $.isFunction(this.onOpen) && this.onOpen()
    },close: function(c) {
        this.remove();
        this.isOpen = false;
        this.endTimeout();
        this.controller.reportClose(this);
        $.isFunction(this.onClose) && this.onClose(c)
    },beginTimeout: function(c) {
        c = _.orEqual(c, this.duration);
        this.timeout && this.endTimeout();
        if (c)
            this.timeout = setTimeout(this.callback(function() {
                this.close()
            }), c)
    },endTimeout: function() {
        clearTimeout(this.timeout)
    },
    setListeners: function() {
        this.element.mouseout(this.callback(function() {
            this.mouseOut = true;
            this.focusInText || this.beginTimeout(this.duration)
        }));
        this.element.mouseover(this.callback(function() {
            this.mouseOut = false;
            this.endTimeout()
        }));
        this.element.find("textarea").focus(this.callback(function() {
            this.focusInText = true;
            this.endTimeout()
        }));
        this.element.find("textarea").focusout(this.callback(function() {
            this.focusInText = false;
            this.mouseOut && this.beginTimeout(this.duration)
        }))
    },add: function() {
        $("#notifications").append(this.element);
        this.element.hide();
        this.listenersSet || this.setListeners();
        this.isAdded = true
    },remove: function() {
        if (this.useAnimation)
            this.element.stop().slideUp("fast", this.callback(function() {
                this.element.remove();
                this.isAdded = false
            }));
        else {
            this.element.remove();
            this.isAdded = false
        }
    }});
GS.Controllers.BaseController.extend("GS.Controllers.NotificationsController", {isGSSingleton: true,preSetup: function() {
        var c = GS.Controllers.BaseController.singletonCallback, a = $.subscribe;
        a("gs.notification", c("notice", "displayMessage"));
        a("gs.player.nowplaying", c("notice", "onSongPlay"));
        a("gs.notification.restorequeue", c("notice", "displayRestoreQueue"));
        a("gs.notification.favorite.song", c("notice", "displayFavoritedObject", "song"));
        a("gs.notification.favorite.playlist", c("notice", "displayFavoritedObject", 
        "playlist"));
        a("gs.notification.favorite.artist", c("notice", "displayFavoritedObject", "artist"));
        a("gs.notification.favorite.user", c("notice", "displayFavoritedObject", "user"));
        a("gs.notification.playlist.create", c("notice", "displayFavoritedObject", "newPlaylist"));
        a("gs.auth.library.songsAdded", c("notice", "displayLibraryAddedObject"));
        a("gs.twitter.notification.sent", c("notice", "displayTwitterSent"));
        a("gs.twitter.notification.findFriends", c("notice", "displayTwitterFindFriends"));
        a("gs.ad.notification.report", 
        c("notice", "displayReportAdFeedback"));
        a("gs.notification.hipster", c("notice", "displayHipsterNotification"))
    }}, {appIsReady: false,localeIsReady: false,queuedNotifications: [],openNotifications: [],maxOnScreen: 3,uniquesLookup: {},notificationLookup: {},seenArtistNotifications: [],sawSignupNotification: false,sawRestoreQueueNotification: false,feedbackOnNextSong: false,sawPreviewNotification: 0,doNotShowPreviewNotification: false,sawPreviewNotificationThisSession: false,beenToPreview: false,frequencyUnitMap: {minute: 6E4,
        hour: 36E5,day: 864E5,week: 6048E5,visit: 0},rateLimitMap: {survey: {lastSeen: null,countSeen: 0,frequencyCount: 20,frequencyUnitCount: 1,frequencyUnit: "hour",uniqueID: false,hasSeenID: {}},theme: {lastSeen: null,countSeen: 0,frequencyCount: 0,frequencyUnitCount: 0,frequencyUnit: null,uniqueID: false,hasSeenID: {}},promotion: {lastSeen: null,countSeen: 0,frequencyCount: 1,frequencyUnitCount: 5,frequencyUnit: "hour",uniqueID: true,hasSeenID: {}},success: {lastSeen: null,countSeen: 0,frequencyCount: 0,frequencyUnitCount: 0,frequencyUnit: null,
            uniqueID: false,hasSeenID: {}},error: {lastSeen: null,countSeen: 0,frequencyCount: 0,frequencyUnitCount: 0,frequencyUnit: null,uniqueID: false,hasSeenID: {}},info: {lastSeen: null,countSeen: 0,frequencyCount: 0,frequencyUnitCount: 0,frequencyUnit: null,uniqueID: false,hasSeenID: {}},notice: {lastSeen: null,countSeen: 0,frequencyCount: 0,frequencyUnitCount: 0,frequencyUnit: null,uniqueID: false,hasSeenID: {}},misc: {lastSeen: null,countSeen: 0,frequencyCount: 0,frequencyUnitCount: 0,frequencyUnit: null,uniqueID: false,hasSeenID: {}}},
    init: function() {
        this.seenPromoNotifications = GS.store.get("seenPromoNotifications") || {};
        this.sawPreviewNotification = parseInt(GS.store.get("sawPreviewNotification"), 10) || 0;
        this.doNotShowPreviewNotification = _.orEqual(GS.store.get("doNotShowPreviewNotification"), false);
        this.sawRestoreQueueNotification = parseInt(GS.store.get("sawRestoreQueueNotification"), 10) || 0;
        this.beenToPreview = _.orEqual(GS.store.get("beenToPreview"), false);
        this.sawFacebookListenNotification = _.orEqual(GS.store.get("sawFBListenNotification"), 
        false);
        this._super();
        if ($.localize.ready)
            this.localeIsReady = true;
        else
            this.subscribe("gs.locale.ready", this.callback("localeReady"));
        GS.Notification.prototype.controller = this;
        var c = _.browserDetect(), a = false;
        switch (c.browser) {
            case "chrome":
                a = true;
                break;
            case "firefox":
                a = c.version >= 6;
                break;
            case "msie":
                a = c.version >= 8;
                break
        }
        GS.Notification.defaults.useAnimation = a;
        if (GS.store && GS.store.get("notificationRateLimitMap"))
            this.rateLimitMap = GS.store.get("notificationRateLimitMap");
        setInterval(this.callback("checkPriorityQueue"), 
        4E3)
    },appReady: function() {
        this.appIsReady = true;
        this.openNext();
        this.getPromotionalNotification()
    },showPreviewLightbox: function() {
        if (!this.beenToPreview && (GS.user.subscription.isPremium() || GS.user.UserID % 5 === 0)) {
            this.beenToPreview = true;
            GS.store.set("beenToPreview", true);
            GS.getLightbox().open("preview")
        }
    },localeReady: function() {
        this.localeIsReady = true;
        this.openNext()
    },generateNotificationID: function() {
        var c = (Math.floor(Math.random() * 1E4) + 1).toString();
        return this.notificationLookup.hasOwnProperty(c) ? 
        this.generateNotificationID() : c
    },updateRateLimitData: function(c) {
        var a = (new Date).getTime();
        this.rateLimitMap[c.rateLimitType] || (this.rateLimitMap[c.rateLimitType] = {lastSeen: null,countSeen: 0,frequencyCount: 0,frequencyUnitCount: 0,frequencyUnit: null,uniqueID: false,hasSeenID: {}});
        this.rateLimitMap[c.rateLimitType].countSeen++;
        this.rateLimitMap[c.rateLimitType].lastSeen = a;
        var b = c.iID ? c.iID : c.xID;
        if (b)
            this.rateLimitMap[c.rateLimitType].hasSeenID[b] = a;
        GS.store.set("notificationRateLimitMap", this.rateLimitMap)
    },
    checkPriorityQueue: function() {
        if (this.queuedNotifications.length) {
            var c = this.getTopPriority();
            if (c)
                if (this.checkAllLimit(c))
                    this.checkStack(c) && this.openNext();
                else {
                    this.discardQueuedNotification(c);
                    this.checkPriorityQueue()
                }
        }
    },getTopPriority: function() {
        var c;
        if (this.queuedNotifications.length) {
            this.queuedNotifications.sort(function(a, b) {
                return a.priority > b.priority
            });
            c = this.queuedNotifications[0]
        }
        return c
    },placeNotificationNext: function(c) {
        this.queuedNotifications.splice(this.queuedNotifications.indexOf(c), 
        1);
        this.queuedNotifications.unshift(c)
    },idCheck: function(c) {
        var a = c.iID ? c.iID : c.xID;
        if (!a)
            return true;
        return !this.rateLimitMap[c.rateLimitType].hasSeenID[a] || this.rateLimitMap[c.rateLimitType].hasSeenID[a] && !this.rateLimitMap[c.rateLimitType].uniqueID
    },frequencyCheck: function(c) {
        var a = this.rateLimitMap[c.rateLimitType];
        if (!a)
            if (c.customLimit) {
                this.rateLimitMap[c.rateLimitType] = c.customLimit;
                a = this.rateLimitMap[c.rateLimitType]
            } else
                return false;
        if (!a.frequencyCount || !a.frequencyUnitCount || !a.frequencyUnit)
            return true;
        c = (new Date).getTime();
        var b = this.frequencyUnitMap[a.frequencyUnit] * a.frequencyUnitCount;
        if (a.lastSeen)
            if (c - a.lastSeen < b)
                return a.countSeen < a.frequencyCount ? true : false;
            else {
                a.countSeen = 0;
                return true
            }
        else {
            a.countSeen = 0;
            return true
        }
    },expirationCheck: function(c) {
        var a = (new Date).getTime();
        return c.timestamp + c.expiration > a ? true : false
    },subscriptionCheck: function(c) {
        if (!c.subscription)
            return true;
        switch (c.subscription) {
            case "anywhere":
                return GS.user.subscription.isAnywhere();
            case "plus":
                return !GS.user.subscription.isAnywhere() && 
                GS.user.IsPremium;
            case "free":
                return !GS.user.IsPremium
        }
    },loggedInCheck: function(c) {
        if (!c.loggedIn)
            return true;
        return c.loggedIn && GS.user.UserID > 0
    },nowOrNeverCheck: function(c) {
        if (c.nowOrNever)
            if (this.checkAllLimit(c) && this.checkStack(c))
                return true;
            else
                this.discardQueuedNotification(c);
        return false
    },newFeatureTooltipCheck: function() {
        if ($("#tooltip-mini.tooltip-mini").length)
            return false;
        return true
    },checkAllLimit: function(c) {
        return this.idCheck(c) && this.frequencyCheck(c) && this.expirationCheck(c) && 
        this.subscriptionCheck(c) && this.loggedInCheck(c)
    },checkStack: function(c) {
        return !this.openNotifications.length || (c.priority == 1 || c.nowOrNever) && this.openNotifications.length < this.maxOnScreen
    },discardQueuedNotification: function(c) {
        return this.queuedNotifications.splice(this.queuedNotifications.indexOf(c), 1)
    },queueNotification: function(c) {
        c.timestamp = (new Date).getTime();
        this.queuedNotifications.indexOf(c) === -1 && this.queuedNotifications.push(c);
        if (c.force || this.nowOrNeverCheck(c)) {
            this.placeNotificationNext(c);
            this.openNext()
        }
    },openNext: function() {
        if (this.appIsReady && this.localeIsReady && this.queuedNotifications.length && this.openNotifications.length < this.maxOnScreen) {
            var c = this.queuedNotifications.shift();
            if (this.newFeatureTooltipCheck()) {
                c.open();
                this.updateRateLimitData(c)
            }
        }
    },reportOpen: function(c) {
        this.openNotifications.indexOf(c) === -1 && this.openNotifications.push(c)
    },reportClose: function(c) {
        var a = this.openNotifications.indexOf(c);
        a !== -1 && this.openNotifications.splice(a, 1);
        this.notificationLookup.hasOwnProperty(c.notificationID) && 
        delete this.notificationLookup[c.notificationID];
        c.uniqueInstance && this.uniquesLookup.hasOwnProperty(c.uniqueInstance) && delete this.uniquesLookup[c.uniqueInstance]
    },displayMessage: function(c) {
        var a;
        c.force = true;
        if (c.type && !c.rateLimitType) {
            c.rateLimitType = c.type;
            if (c.type == "error")
                c.expiration = 8E3
        }
        if (c.uniqueInstance)
            if ((a = this.uniquesLookup[c.uniqueInstance]) && a.isOpen) {
                a.beginTimeout();
                return
            }
        a || (a = new GS.Notification({view: "notification",viewParams: {controller: this,notification: c},rateLimitType: _.orEqual(c.rateLimitType, 
            "misc"),timestamp: _.orEqual(c.timestamp, null),nowOrNever: _.orEqual(c.nowOrNever, false),expiration: _.orEqual(c.expiration, 3E4),priority: _.orEqual(c.priority, 5),subscription: _.orEqual(c.subscription, null),loggedIn: _.orEqual(c.loggedIn, null),iID: _.orEqual(c.iID, null),xID: _.orEqual(c.xID, null),customLimit: _.orEqual(c.customLimit, null),force: _.orEqual(c.force, false),duration: c.manualClose ? 0 : c.displayDuration,uniqueInstance: _.orEqual(c.uniqueInstance, false)}));
        a.isOpen || this.queueNotification(a)
    },onSongPlay: function(c) {
        if (c && 
        (this.feedbackOnNextSong || c.sponsoredAutoplayID)) {
            this.feedbackOnNextSong = false;
            if (this.seenArtistNotifications.indexOf(c.ArtistID) === -1) {
                this.seenArtistNotifications.push(c.ArtistID);
                this.displayArtistFeedback(c)
            }
        }
        this.uniquesLookup.promotion || this.getPromotionalNotification({song: c});
        this.sawFacebookListenNotification || setTimeout(this.callback(function() {
            if (!GS.getFacebook().connected || GS.getFacebook().scrobblingEnabled) {
                GS.store.set("sawFBListenNotification", true);
                this.showFacebookListenNotification({disable: GS.getFacebook().scrobblingEnabled})
            }
            this.sawFacebookListenNotification = 
            true
        }), 5E3)
    },closeAllNotifs: function() {
        if (!_.isEmpty(this.uniquesLookup))
            for (var c in this.uniquesLookup)
                this.uniquesLookup.hasOwnProperty(c) && this.uniquesLookup[c].close()
    },closeAllSurveyNotifs: function() {
        if (!_.isEmpty(this.uniquesLookup))
            for (var c in this.uniquesLookup)
                if (this.uniquesLookup.hasOwnProperty(c))
                    if (c == "surveyOptIn" || c == "surveyResult" || c == "surveyQuestion")
                        this.uniquesLookup[c].close()
    },isSurveyNotifOpen: function() {
        if (!_.isEmpty(this.uniquesLookup))
            for (var c in this.uniquesLookup)
                if (this.uniquesLookup.hasOwnProperty(c))
                    if (c == 
                    "surveyOptIn" || c == "surveyResult" || c == "surveyQuestion")
                        return true;
        return false
    },userActivityCheck: function() {
        var c = false, a = 0;
        _.forEach(GS.theme.themePreferences, function(b, g) {
            a++;
            if (g != "-1" || a > 1)
                c = true
        });
        return c
    },displayArtistFeedback: function(c) {
        this.uniquesLookup.artistFeedback || this.queueNotification(new GS.Notification({uniqueInstance: "artistFeedback",view: "artistNotification",viewParams: {controller: this,feedbackSong: c},force: true,expiration: 8E3,duration: 15E3}))
    },displayHipsterNotification: function() {
        if (!this.uniquesLookup.hipster) {
            this.queueNotification(new GS.Notification({uniqueInstance: "hipster",
                view: "hipsterNotification",viewParams: {controller: this},duration: 15E3}));
            GS.getGuts().gaTrackEvent("hipsterAprilFools", "seenHipster")
        }
    },".actions .shutUp click": function() {
        this.uniquesLookup.hipster.close();
        GS.user.hipsterFailCount++;
        GS.getGuts().gaTrackEvent("hipsterAprilFools", "shutupHipster")
    },".actions .moar click": function() {
        this.uniquesLookup.hipster.close();
        this.displayHipsterNotification();
        GS.getGuts().gaTrackEvent("hipsterAprilFools", "moarHipster")
    },displaySurveyQuestion: function(c) {
        c = _.orEqual(c, 
        {});
        this.queueNotification(new GS.Notification({uniqueInstance: "surveyQuestion",view: "surveyQuestion",viewParams: {controller: this,question: c.question,callback: c.callback},rateLimitType: "survey",duration: 6E4}))
    },displaySurveyOptIn: function(c) {
        c = _.orEqual(c, {});
        this.queueNotification(new GS.Notification({uniqueInstance: "surveyOptIn",view: "surveyOptIn",viewParams: {controller: this,question: c.question,callback: c.callback},rateLimitType: "survey",duration: 6E4}));
        GS.getGuts().logEvent("civicscience.invitationSeen", 
        {userID: GS.user.UserID,timestamp: (new Date).getTime()})
    },displaySurveyResult: function(c) {
        c = _.orEqual(c, {});
        this.queueNotification(new GS.Notification({uniqueInstance: "surveyResults",view: "surveyResults",viewParams: {controller: this,mostPopular: c.responses.mostPopular,selectedAnswer: c.responses.selectedAnswer,responses: c.responses,callback: c.callback},rateLimitType: "survey",duration: 15E3}))
    },displaySurveyInvitation: function() {
        var c = $.localize.getString("SURVEY_CIVICSCIENCE_CTA"), a = window.location.hash.toString();
        a = a.replace(/^#!\/|^#\/|^\/|^#!|^#/, "");
        var b = function(h, m) {
            if (!h.uniquesLookup.surveyInvitation && a.indexOf("surveys") !== 0) {
                var k = new GS.Notification({uniqueInstance: "surveyInvitation",view: "surveyInvitation",viewParams: {controller: h,message: m},rateLimitType: "survey",duration: 15E3});
                h.queueNotification(k)
            }
        }, g = this;
        GS.user.isLoggedIn && GS.Models.Surveys.userHasKinesis() ? GS.Models.Surveys.initKinesis("notif", this.callback(function(h) {
            if (h.seskey) {
                GS.user.surveys = h;
                GS.user.surveys.getEverything(function(m) {
                    GS.user.surveys.panelist = 
                    m;
                    c = GS.user.surveys.availableSurveys.length > 0 ? $.localize.getString("SURVEY_CIVICSCIENCE_AVAILABLE_MSG") : null;
                    b(g, c)
                })
            } else
                b(g, c)
        })) : b(g, c)
    },displaySurveyInvitationV2: function() {
        this.queueNotification(new GS.Notification({uniqueInstance: "surveyInvitation",view: "surveyInvitationV2",viewParams: {controller: this},rateLimitType: "survey",duration: 15E3}))
    },displaySurveyAvailable: function(c) {
        this.queueNotification(new GS.Notification({uniqueInstance: "surveyAvailable",view: "surveyAvailable",viewParams: {controller: this,
                points: c},rateLimitType: "survey",duration: 15E3}))
    },displaySurveyPoints: function(c) {
        this.queueNotification(new GS.Notification({view: "surveyPoints",viewParams: {controller: this,points: c},rateLimitType: "survey",duration: 15E3}))
    },"#surveyOptOut click": function(c, a) {
        a.preventDefault();
        var b = null;
        if ($(c).hasClass("optOut")) {
            GS.store.set("civicscience.hasSeenInvitation" + GS.user.UserID, true);
            b = this.uniquesLookup.surveyQuestion
        } else
            b = this.uniquesLookup.surveyOptIn;
        if (b) {
            GS.Models.Surveys.changeCivicScienceSettings(true);
            b.close()
        }
        return false
    },"#surveyOptIn click": function(c, a) {
        a.preventDefault();
        GS.store.set("civicscience.hasSeenInvitation" + GS.user.UserID, true);
        var b = this.uniquesLookup.surveyOptIn;
        if (b) {
            var g = b.viewParams.callback;
            b.close();
            g();
            GS.getGuts().logEvent("civicscience.optIn", {userID: GS.user.UserID,timestamp: (new Date).getTime()})
        }
        return false
    },"#nextQuestion click": function(c, a) {
        a.preventDefault();
        var b = this.uniquesLookup.surveyResults;
        if (b) {
            var g = b.viewParams.callback;
            b.close();
            g()
        }
        return false
    },"li.notification form.survey submit": function(c, 
    a) {
        a.preventDefault();
        var b = this.uniquesLookup.surveyQuestion;
        if (b) {
            var g = b.viewParams.question.answers, h = $(c).find(".selection");
            name = b.viewParams.question.name;
            callback = b.viewParams.callback;
            if (h.attr("value") != "-")
                if (name == "CivicScience") {
                    var m = GS.user.civicScience, k = m.session, n = null;
                    if (h && h.length) {
                        for (n = 0; n < g.length; n++)
                            if (g[n].id == h.attr("value")) {
                                n = g[n].option;
                                n.select();
                                break
                            }
                        b.close();
                        k.commit(m.handleCommit)
                    }
                } else if ($.isFunction(callback)) {
                    g = {text: h.text(),id: h.attr("value"),questionId: h.attr("name")};
                    callback(g);
                    b.close()
                }
        }
        return false
    },"#goToSurveys click": function(c, a) {
        a.preventDefault();
        var b = this.uniquesLookup[$("li.notification").attr("id")];
        b && b.close();
        GS.router.setHash("/surveys");
        return false
    },"#surveyAvailClose click": function(c, a) {
        a.preventDefault();
        var b = null;
        (b = this.uniquesLookup.surveyAvailable) && b.close();
        return false
    },"#surveyInvitClose click": function(c, a) {
        a.preventDefault();
        var b = null;
        (b = this.uniquesLookup.surveyInvitation) && b.close();
        return false
    },"#surveyInvitation .surveyStart click": function(c, 
    a) {
        a.preventDefault();
        var b = this.uniquesLookup.surveyInvitation;
        b && b.close();
        GS.router.setHash("/surveys");
        return false
    },displayPerAnum: function() {
        this.queueNotification(new GS.Notification({view: "perAnum",viewParams: {controller: this}}))
    },displayReportAdFeedback: function(c) {
        var a = this.uniquesLookup.adFeedback;
        a && a.close();
        if ($.isFunction(c)) {
            a = new GS.Notification({uniqueInstance: "adFeedback",view: "adFeedback",viewParams: {controller: this},nowOrNever: true,duration: 1E4});
            a.onClose = c;
            this.queueNotification(a)
        }
    },
    "#adFeedbackNotifForm .submit click": function(c, a) {
        a.preventDefault();
        var b = $("textarea.feedback", "#adFeedbackNotifForm").val(), g = $(".selection", "#adFeedbackNotifForm").attr("value");
        if (["", "none", "audio", "video", "nudity", "offen", "other"].indexOf(g) == -1)
            g = "";
        var h = this.uniquesLookup.adFeedback;
        h && h.close({desc: b,type: g});
        return false
    },"#adFeedbackNotifForm .cancel click": function(c, a) {
        a.preventDefault();
        var b = this.uniquesLookup.adFeedback;
        b && b.close(false);
        return false
    },displayThemeArtistNotification: function(c, 
    a) {
        this.queueNotification(new GS.Notification({uniqueInstance: "artistFeedback",view: "themes/" + a.location + "/artist_notification",viewParams: {controller: this,feedbackSong: c},rateLimitType: "theme",iID: GS.theme.currentTheme.themeID,force: true,duration: false}));
        GS.theme.lastDFPChange = (new Date).getTime() + 15E3
    },"li.notification a.theme_link click": function(c, a) {
        a.index = parseInt($(c).attr("data-video-index"), 10);
        if ($(c).attr("data-theme-id")) {
            console.warn("themeid", $(c).attr("data-theme-id"));
            $(c).attr("data-click-id") && 
            GS.service.logThemeOutboundLinkClick($(c).attr("data-theme-id"), $(c).attr("data-click-id"))
        } else {
            GS.theme.currentTheme.handleClick(a);
            console.warn("here")
        }
        GS.theme.lastDFPChange = (new Date).getTime();
        if ($(c).attr("data-click-action")) {
            var b = this.notificationLookup[$(c).closest("li.notification").attr("data-notificationid")];
            b && b.close()
        }
    },displayLibraryAddedObject: function(c) {
        var a = {controller: this};
        if (c.songs) {
            if (c.songs.length == 1) {
                a.msgKey = "NOTIF_LIBRARY_ADDED_SONG";
                a.msgData = c.songs[0];
                a.msgData.songLink = 
                "<a class='songLink' rel='" + c.songs[0].songID + "'>" + c.songs[0].songName + "</a>";
                a.msgData.artistLink = "<a href='" + _.cleanUrl(c.songs[0].artistName, c.songs[0].artistID, "artist", null, null) + "'>" + c.songs[0].artistName + "</a>";
                a.object = c.songs[0].songID;
                a.type = "song"
            } else {
                a.msgKey = "NOTIFICATION_LIBRARY_ADD_SONGS";
                a.msgData = {numSongs: c.songs.length};
                a.type = "songs"
            }
            this.queueNotification(new GS.Notification({view: "libraryAddedNotification",viewParams: a,nowOrNever: true}))
        }
    },displayFavoritedObject: function(c, 
    a) {
        function b(m) {
            if (m.view == "libraryAddedNotification" && m.viewParams.type === "song" && m.viewParams.msgData)
                if (_.orEqual(m.viewParams.msgData.SongID, m.viewParams.msgData.songID) == _.orEqual(a.songID, a.SongID))
                    return true;
            return false
        }
        var g, h;
        if (a) {
            if (c == "song") {
                for (g = 0; g < this.openNotifications.length; g++) {
                    h = this.openNotifications[g];
                    b(h) && h.close()
                }
                for (g = 0; g < this.queuedNotifications.length; g++) {
                    h = this.queuedNotifications[g];
                    if (b(h)) {
                        this.queuedNotifications.splice(g, 1);
                        g--
                    }
                }
            }
            g = {controller: this,type: c,
                object: a};
            switch (c) {
                case "playlist":
                    g.msgKey = "NOTIF_SUBSCRIBED_PLAYLIST";
                    g.msgData = {playlistName: a.PlaylistName,playlistLink: "<a href='" + _.cleanUrl(a.PlaylistName, a.PlaylistID, "playlist", null, null) + "'>" + a.PlaylistName + "</a>"};
                    break;
                case "song":
                    g.msgKey = "NOTIF_FAVORITED_SONG";
                    g.msgData = {songName: _.orEqual(a.SongName, a.songName),artistName: _.orEqual(a.ArtistName, a.artistName),songLink: "<a class='songLink' rel='" + a.SongID + "'>" + a.SongName + "</a>",artistLink: "<a href='" + _.cleanUrl(a.ArtistName, a.ArtistID, 
                        "artist", null, null) + "'>" + a.ArtistName + "</a>"};
                    break;
                case "user":
                    if (a.Username) {
                        g.msgKey = "NOTIF_FOLLOWED_USER";
                        g.msgData = {userName: a.Name,userLink: "<a href='" + _.cleanUrl(a.Name, a.UserID, "user", null, null) + "'>" + a.Name + "</a>"}
                    } else {
                        g.msgKey = "NOTIF_FOLLOWED_USERS";
                        g.msgData = {}
                    }
                    break;
                case "newPlaylist":
                    g.msgKey = "NOTIF_CREATED_PLAYLIST";
                    g.msgData = {playlistName: a.PlaylistName,playlistLink: "<a href='" + _.cleanUrl(a.PlaylistName, a.PlaylistID, "playlist", null, null) + "'>" + a.PlaylistName + "</a>"};
                    break;
                case "artist":
                    g.msgKey = 
                    "NOTIF_FOLLOWED_ARTIST";
                    g.msgData = {artistName: a.ArtistName,artistLink: "<a href='" + _.cleanUrl(a.ArtistName, a.ArtistID, "artist", null, null) + "'>" + a.ArtistName + "</a>"};
                    break
            }
            h = new GS.Notification({view: "favoriteNotification",viewParams: g,nowOrNever: true});
            this.queueNotification(h)
        }
    },"li.notification .favorited button.loginWithFacebook click": function(c, a) {
        a.stopImmediatePropagation();
        var b = this.notificationLookup[$(c).closest("li.notification").attr("data-notificationid")];
        if (b) {
            console.log(b, b.endTimeout);
            b.duration = false;
            b.endTimeout();
            $("button.loginWithFacebook", b.element).hide();
            $("button.closeNotif", b.element).show();
            GS.getFacebook().login(this.callback(function() {
                $("button.closeNotif", b.element).hide();
                b.duration = 5E3;
                this.shareWithFacebook(b)
            }))
        }
        return false
    },"li.notification .favorited button.shareWithFacebook click": function(c, a) {
        a.stopImmediatePropagation();
        this.shareWithFacebook(this.notificationLookup[$(c).closest("li.notification").attr("data-notificationid")]);
        return false
    },shareWithFacebook: function(c) {
        if (c) {
            c.element.removeClass("notification_success").addClass("notification_form");
            $("button.shareWithFacebook", c.element).hide();
            $("div.facebookShare", c.element).show();
            $("div.content", c.element).prepend('<img src="/webincludes/images/notifications/facebook.png" />');
            $("div.content p", c.element).addClass("hasIcon");
            var a = $("#fb_share_message", c.element);
            a.focus(this.callback(function() {
                a.val() == $.localize.getString("NOTIF_SHARE_PREFILL_MSG") && a.val("")
            }));
            a.focusout(this.callback(function() {
                a.val() === "" && a.val($.localize.getString("NOTIF_SHARE_PREFILL_MSG"))
            }))
        }
    },"li.notification .favorited button.shareWithFacebookSubmit click": function(c, 
    a) {
        a.stopImmediatePropagation();
        var b = this.notificationLookup[$(c).closest("li.notification").attr("data-notificationid")];
        if (b) {
            var g = b.viewParams.object, h = b.viewParams.type, m = $("#fb_share_message", b.element).val();
            if (m == $.localize.getString("NOTIF_SHARE_PREFILL_MSG"))
                m = "";
            switch (h) {
                case "song":
                    GS.getFacebook().onFavoriteSong(g, m, true);
                    break;
                case "playlist":
                    GS.getFacebook().onSubscribePlaylist(g, m);
                    break;
                case "newPlaylist":
                    GS.getFacebook().onPlaylistCreate(g, m, true);
                    break;
                case "user":
                    GS.getFacebook().onFollowUser(g, 
                    m);
                    break;
                case "artist":
                    GS.getFacebook().onFollowArtist(g, m);
                    break
            }
            b.close()
        }
        return false
    },displayTwitterSent: function(c) {
        if (c && c.type) {
            var a = this.uniquesLookup.twitter;
            a && a.close();
            a = new GS.Notification({uniqueInstance: "twitter",view: "twitterPostNotification",viewParams: {controller: this,type: c.type}});
            this.queueNotification(a)
        }
    },displayFacebookSent: function(c) {
        if (c && c.params && c.data) {
            var a = this.uniquesLookup.facebook;
            a && a.close();
            a = new GS.Notification({uniqueInstance: "facebook",view: "facebookPostNotification",
                viewParams: {controller: this,type: c.params.type,hideUndo: c.params.hideUndo,ref: c.params.ref,data: c.data,object: c.params.object}});
            this.queueNotification(a)
        }
    },"li.notification .facebook button.undo click": function(c, a) {
        a.stopImmediatePropagation();
        var b = this.notificationLookup[$(c).closest("li.notification").attr("data-notificationid")];
        if (b) {
            var g = b.viewParams.data;
            g.object = b.viewParams.object;
            GS.getFacebook().removeEvent(g);
            b.close()
        }
        return false
    },"li.notification .facebook button.ok click": function(c, 
    a) {
        a.stopImmediatePropagation();
        var b = this.notificationLookup[$(c).closest("li.notification").attr("data-notificationid")];
        b && b.close();
        return false
    },"li.notification .facebook button.settings click": function(c, a) {
        a.stopImmediatePropagation();
        var b = this.notificationLookup[$(c).closest("li.notification").attr("data-notificationid")];
        if (b) {
            b.close();
            GS.router.setHash("/settings/services")
        }
        return false
    },"li.notification .facebook a.resetPerms click": function(c, a) {
        a.stopImmediatePropagation();
        var b = this.notificationLookup[$(c).closest("li.notification").attr("data-notificationid")];
        b && b.close();
        GS.getFacebook().showReAuthLightbox();
        return false
    },"li.notification a.logoutFacebook click": function() {
        GS.auth.logout(function() {
            FB.logout(function() {
                GS.router.setHash("/signup")
            })
        })
    },"li.notification a.logoutGoogle click": function() {
        GS.auth.logout(function() {
            GS.router.setHash("/signup");
            GS.getGoogle().serviceLogout()
        })
    },"li.notification a.logoutTwitter click": function() {
        GS.auth.logout(function() {
            GS.router.setHash("/signup");
            GS.getTwitter().serviceLogout()
        })
    },displayFacebookUndoPost: function(c) {
        if (c.data) {
            var a = 
            "that one";
            if (c.params && c.params.object) {
                a = c.params.object;
                a = _.orEqualEx(a.SongName, a.PlaylistName, a.ArtistName, a.AlbumName)
            }
            (c = this.uniquesLookup.facebook) && c.close();
            c = new GS.Notification({uniqueInstance: "facebook",view: "facebookUndoPostNotification",viewParams: {controller: this,msgData: {title: a},msgKey: "NOTIF_FACEBOOK_SHARE_UNDO"},force: true});
            this.queueNotification(c)
        }
    },displayFacebookCannotPost: function(c) {
        var a = this.uniquesLookup.facebookError;
        if (!a) {
            a = "facebook";
            if (c && c.error)
                a = "notification_error";
            a = new GS.Notification({uniqueInstance: "facebookError",view: "facebookCannotPostNotification",viewParams: {controller: this,successButton: c && c.successButton ? c.successButton : "POPUP_LOGIN_FACEBOOK",cancelButton: c && c.cancelButton ? c.cancelButton : null,notifLocale: c && c.notifLocale ? c.notifLocale : "POPUP_LOGIN_FACEBOOK_FLAGS",className: a},expiration: 3E4,duration: 15E3});
            this.queueNotification(a)
        }
    },"li.notification .facebook button.loginToFacebook click": function(c, a) {
        a.stopImmediatePropagation();
        var b = this.notificationLookup[$(c).closest("li.notification").attr("data-notificationid")];
        if (b) {
            GS.getFacebook().forceLogin = true;
            GS.getFacebook().loggedIntoFacebook ? GS.getFacebook().serviceLogout(this.callback(function() {
                GS.getFacebook().login()
            })) : GS.getFacebook().login();
            b.close()
        }
        return false
    },"li.notification .facebook button.cancel click": function(c, a) {
        a.stopImmediatePropagation();
        var b = this.notificationLookup[$(c).closest("li.notification").attr("data-notificationid")];
        if (b) {
            GS.getLightbox().open("newFacebookUser", {showFindFriends: false});
            b.close()
        }
        return false
    },displayFacebookRateLimit: function(c) {
        if (c.callback) {
            var a = 
            this.uniquesLookup.facebook;
            a && a.close();
            a = new GS.Notification({uniqueInstance: "facebook",view: "facebookRateLimitNotification",viewParams: {controller: this,callback: c.callback,type: c.type}});
            this.queueNotification(a)
        }
    },"li.notification .facebook button.doItAnyway click": function(c, a) {
        a.stopImmediatePropagation();
        var b = this.notificationLookup[$(c).closest("li.notification").attr("data-notificationid")];
        if (b) {
            var g = b.viewParams.callback;
            g();
            b.close()
        }
        return false
    },showFacebookListenNotification: function(c) {
        var a = 
        this.uniquesLookup.facebook;
        a && a.close();
        a = new GS.Notification({uniqueInstance: "facebook",view: "facebookListens",viewParams: {controller: this,disable: c && c.disable ? true : false},rateLimitType: "showFacebookListenNotification",customLimit: {lastSeen: null,countSeen: 0,frequencyCount: 1,frequencyUnitCount: 1,frequencyUnit: "week",uniqueID: false,hasSeenID: {}},duration: c && c.disable ? 5E3 : 1E4});
        this.queueNotification(a)
    },"li.notification.facebookListens button.loginWithFacebook click": function(c, a) {
        a.stopImmediatePropagation();
        var b = this.notificationLookup[$(c).closest("li.notification").attr("data-notificationid")];
        if (b) {
            GS.user.UserID > 0 ? GS.getFacebook().login() : GS.auth.loginViaFacebook();
            b.close()
        }
        return false
    },"li.notification.facebookListens button.disable click": function(c, a) {
        a.stopImmediatePropagation();
        var b = this.notificationLookup[$(c).closest("li.notification").attr("data-notificationid")];
        if (b) {
            GS.getLightbox().open("newFacebookUser", {showFindFriends: false});
            b.close()
        }
        return false
    },"li.notification form.artistFeedback button click": function(c, 
    a) {
        a.stopImmediatePropagation();
        var b = this.uniquesLookup.artistFeedback;
        if (b) {
            var g = $(c).attr("data-vote"), h = b.element.find("textarea").val();
            b = b.viewParams.feedbackSong;
            h && h.length && GS.service.provideSongFeedbackMessage(b.SongID, h);
            GS.service.provideSongFeedbackVote(b.SongID, g, b.ArtistID, this.callback("onArtistFeedback", g), this.callback("onArtistFeedbackFail"))
        }
        return false
    },displayFacebookConnect: function() {
        var c = this.uniquesLookup.facebook;
        c && c.close();
        c = new GS.Notification({uniqueInstance: "facebook",
            view: "facebookConnectNotification",viewParams: {controller: this},duration: 1E4});
        this.queueNotification(c)
    },"#fbNotifConnect-btn click": function(c) {
        (c = this.notificationLookup[$(c).closest("li.notification").attr("data-notificationid")]) && c.close();
        GS.getFacebook().login(function() {
        }, this.callback("fbConnectErrback"))
    },fbConnectErrback: function(c) {
        if (typeof c == "object" && c.error)
            c = c.error;
        this.queueNotification(new GS.Notification({view: "notification",viewParams: {controller: this,notification: {type: "error",
                    message: $.localize.getString(c)}},rateLimitType: "error",duration: 5E3}))
    },displayFacebookFindFriends: function(c) {
        var a = this.uniquesLookup.facebook;
        a && a.close();
        c || (c = {message: false,inviteFriends: false});
        a = new GS.Notification({uniqueInstance: "facebook",view: "facebookFindFriendsNotification",viewParams: {controller: this,message: c.message,inviteFriends: c.inviteFriends},duration: 1E4});
        this.queueNotification(a)
    },"a.findFacebookFriends click": function(c, a) {
        if (a.which) {
            var b = this.notificationLookup[$(c).closest("li.notification").attr("data-notificationid")];
            b && b.close();
            GS.getFacebook().getGroovesharkUsersFromFriends()
        }
    },"a.inviteFriends click": function(c, a) {
        if (a.which) {
            var b = this.notificationLookup[$(c).closest("li.notification").attr("data-notificationid")];
            b && b.close();
            GS.getLightbox().open("invite")
        }
    },displayTwitterFindFriends: function(c) {
        var a = this.uniquesLookup.twitter;
        a && a.close();
        c || (c = {message: false,inviteFriends: false});
        a = new GS.Notification({uniqueInstance: "twitter",view: "twitterFindFriendsNotification",viewParams: {controller: this,message: c.message,
                inviteFriends: c.inviteFriends}});
        this.queueNotification(a)
    },"a.findTwitterFriends click": function(c, a) {
        if (a.which) {
            var b = this.notificationLookup[$(c).closest("li.notification").attr("data-notificationid")];
            b && b.close();
            GS.getTwitter().getGroovesharkUsersFromFollowing()
        }
    },displayFacebookSongComment: function() {
        var c = this.uniquesLookup.facebook;
        c && c.close();
        c = new GS.Notification({uniqueInstance: "facebook",view: "facebookSongCommentNotification",viewParams: {controller: this},duration: 1E4});
        this.queueNotification(c)
    },
    "a.songLink click": function(c, a) {
        a.preventDefault();
        var b = parseInt($(c).attr("rel"), 10);
        b && GS.Models.Song.getSong(b, function(g) {
            g && GS.router.setHash(g.toUrl())
        })
    },onArtistFeedback: function(c, a) {
        var b = this.uniquesLookup.artistFeedback;
        if (b) {
            var g = {controller: this,feedbackSong: b.viewParams.feedbackSong};
            if (a.success && c == 2) {
                g.urls = a.urls;
                b.element.find(".content").html(this.view("artistNotificationResult", g));
                _.isEmpty(a.urls) && b.beginTimeout(5E3)
            } else
                b.close()
        }
    },onArtistFeedbackFail: function() {
        var c = 
        this.uniquesLookup.artistFeedback;
        c && c.close()
    },displayRestoreQueue: function() {
        if (this.sawRestoreQueueNotification < 3) {
            this.queueNotification(new GS.Notification({view: "restoreQueue",viewParams: {controller: this},force: true}));
            this.sawRestoreQueueNotification++;
            GS.store.set("sawRestoreQueueNotification", this.sawRestoreQueueNotification)
        }
    },"li.notification a.close click": function(c) {
        (c = this.notificationLookup[$(c).closest("li.notification").attr("data-notificationid")]) && c.close()
    },"li.notification .cancel click": function(c) {
        (c = 
        this.notificationLookup[$(c).closest("li.notification").attr("data-notificationid")]) && c.close()
    },"form.feedback submit": function() {
        console.log("submit song feedback");
        return false
    },"li.notification .loginCTA click": function(c) {
        (c = this.notificationLookup[$(c).closest("li.notification").attr("data-notificationid")]) && c.close();
        GS.getLightbox().open("login")
    },"li.notification .signupCTA click": function(c) {
        (c = this.notificationLookup[$(c).closest("li.notification").attr("data-notificationid")]) && c.close();
        GS.router.setHash("/signup")
    },"li.notification.restoreQueue .restore click": function(c) {
        (c = this.notificationLookup[$(c).closest("li.notification").attr("data-notificationid")]) && c.close();
        GS.player.restoreQueue()
    },"li.notification.restoreQueue a.settings click": function(c) {
        (c = this.notificationLookup[$(c).closest("li.notification").attr("data-notificationid")]) && c.close();
        GS.user.isLoggedIn ? GS.router.setHash("/settings") : GS.getLightbox().open("login")
    },"li.notification .playlistLink click": function(c) {
        var a = 
        this.notificationLookup[$(c).closest("li.notification").attr("data-notificationid")];
        a && a.close();
        c = $(c).data("playlistid");
        GS.Models.Playlist.getPlaylist(c, function(b) {
            GS.router.setHash(b.toUrl())
        })
    },"input focus": function(c) {
        $(c).parent().parent().addClass("active")
    },"textarea focus": function(c) {
        $(c).parent().parent().parent().addClass("active")
    },"input blur": function(c) {
        $(c).parent().parent().removeClass("active")
    },"textarea blur": function(c) {
        $(c).parent().parent().parent().removeClass("active")
    },
    ".selection_survey, .selection_adType focus": function(c) {
        c.parents(".input_wrapper").addClass("active")
    },".selection_survey, .selection_adType blur": function(c) {
        c.parents(".input_wrapper").removeClass("active")
    },".selection_survey, .selection_adType keydown": function(c) {
        c.change()
    },".selection_survey change": function(c) {
        var a = c.siblings("span");
        c = c.find("#profilerQuestion:selected");
        a.html(c.html());
        a.attr("value", c.attr("value"))
    },".selection_adType change": function(c) {
        var a = c.siblings("span");
        c = 
        c.find(".adTypeSelected:selected", "#adType");
        a.html(c.html());
        a.attr("value", c.attr("value"))
    },"li.notification.promo .promoNotifClickTracking click": function() {
    },getPromotionalNotification: function(c) {
        var a = c && c.manual;
        GS.service.getNotificationFromDFP(this.buildParams(c), this.callback("displayPromotion", a), this.callback("displayPromotionErr"))
    },displayPromotion: function(c, a) {
        try {
            a = JSON.parse(a)
        } catch (b) {
            console.log("invalid json from DFP", b);
            return
        }
        a.id == "-1" ? console.log("no promo notif") : this.queueNotification(new GS.Notification({uniqueInstance: "promotion",
            view: a.view,viewParams: {controller: this,data: a},duration: a.duration,type: a.type ? a.type : "promotion",nowOrNever: a.nowOrNever,expiration: a.expiration,priority: a.priority,subscription: a.subscription,loggedIn: a.loggedIn,xID: a.xID,force: c}))
    },displayPromotionErr: function() {
        console.warn("Promotional Notification Error")
    },buildParams: function(c) {
        var a = [];
        if (c && c.manual && c.xID) {
            a.push("m=1");
            a.push("xID=" + c.xID)
        }
        a = a.concat(["notif=1", "dcmt=text/json", "sz=468x60"]);
        return GS.getAd().buildParams(a, ";", ";")
    },
    loadTracking: function(c) {
        if ($.isArray(c)) {
            var a = (new Date).valueOf(), b;
            _.forEach(c, function(g) {
                g += g.indexOf("?") != -1 ? "&" + a : "?" + a;
                b = new Image;
                $("body").append($(b).load(function(h) {
                    $(h.target).remove()
                }).css("visibility", "hidden").attr("src", g))
            })
        }
    }});
(function() {
    function c(b) {
        if (a.indexOf(b) === -1)
            b = "en";
        $("[data-translate-text]").localize("gs", {language: b});
        $("[data-translate-title]").localize("gs", {language: b,callback: "titleCallback"})
    }
    var a = ["bg", "ca", "cs", "cy", "da", "de", "el", "en", "es", "eu", "et", "gl", "fi", "fr", "hr", "hu", "it", "ja", "ko", "lt", "lv", "nb", "nl", "pl", "pt", "ro", "ru", "sk", "sl", "sv", "tr", "uk", "zh"];
    GS.Controllers.BaseController.extend("GS.Controllers.LocaleController", {onWindow: true,isGSSingleton: true}, {locale: "en",init: function() {
            var b = 
            this, g = (GS.store.get("gs.locale") || gsConfig.lang || this.detectLangauge() || this.locale || "en").substring(0, 2);
            if (a.indexOf(g) === -1)
                g = "en";
            c(g);
            this.updateWeeksMonths();
            this.subscribe("gs.locale.changed", function(h) {
                b.locale = h;
                b.callback("updateWeeksMonths");
                c(h);
                $.publish("gs.locale.update", h);
                GS.store.set("gs.locale", h)
            });
            this.locale = g;
            $.localize.ready ? c(g) : this.subscribe("gs.locale.ready", this.callback(function() {
                c(this.locale)
            }))
        },daysOfWeek: [],monthsOfYear: [],updateWeeksMonths: function() {
            var b = $.localize.getString("WEEK_DAYS");
            if (b && b.length)
                this.daysOfWeek = b.split(",");
            if ((b = $.localize.getString("MONTHS")) && b.length)
                this.monthsOfYear = b.split(",")
        },detectLangauge: function() {
            var b = window.navigator;
            return b.language || b.browserLanguage || b.systemLanguage || b.userLanguage
        }})
})();
GS.Controllers.BaseController.extend("GS.Controllers.HeaderController", {onElement: "#header"}, {init: function() {
        this.subscribe("gs.auth.update", this.callback("update"));
        this.subscribe("gs.auth.user.pathName", this.callback("update"));
        this.subscribe("gs.page.view", this.callback("updateSection"));
        this.subscribe("gs.router.history.change", this.callback("updateNavButtons"));
        this._super()
    },appReady: function() {
        this.update()
    },update: function() {
        this.user = GS.user;
        this.isDesktop = GS.airbridge ? GS.airbridge.isDesktop : 
        false;
        var c = $("#dropdown_loginForm");
        c.detach();
        $("#header_userOptions").html(this.view(GS.user.isLoggedIn ? "loggedIn" : "loggedOut"));
        $("#header_mainNavigation").html(this.view("mainNavigation"));
        if (GS.user.isLoggedIn) {
            $("#loginFormHolder").append(c);
            GS.user.getNotifications(this.callback("updateNotifications"))
        } else
            $("#putLoginFormHere").append(c);
        this.updateSection(GS.page.activePageName, GS.page.activePageIdentifier);
        this.updateNavButtons()
    },updateNotifications: function() {
        if (this.user === GS.user)
            if (GS.user.notificationsFeed.events && 
            GS.user.notificationsFeed.events.length) {
                $("#header_notification").addClass("active");
                $("#header_notifications_list").html(this.view("notifications"));
                var c = GS.user.getLastSeenNotification();
                c = GS.user.notificationsFeed.getEvents(c);
                if (c.length) {
                    $("#header_notification_pill").addClass("block");
                    $("#header_notification_count").text(Math.min(c.length, 99))
                }
            } else {
                $("#header_notification").removeClass("active");
                $("#header_notification_count").text("")
            }
    },updateSection: function(c) {
        switch (c) {
            case "HomeController":
            case "SearchController":
                c = 
                $("#header_search_btn");
                c.hasClass("active") || c.addClass("active").siblings().removeClass("active");
                break;
            case "MusicController":
                $("#header_explore_btn").addClass("active").siblings().removeClass("active");
                break;
            case "UserMusicController":
                GS.page.activePageIdentifier == GS.user.UserID ? $("#header_music_btn").addClass("active").siblings().removeClass("active") : $("#header_mainNavigation a").removeClass("active");
                break;
            case "UserController":
                GS.page.activePageIdentifier == GS.user.UserID && GS.page.activePageParams.section == 
                "community" ? $("#header_community_btn").addClass("active").siblings().removeClass("active") : $("#header_mainNavigation a").removeClass("active");
                break;
            default:
                $("#header_mainNavigation a").removeClass("active")
        }
    },updateFeedCount: function() {
        this.user = GS.user;
        this.isDesktop = GS.airbridge ? GS.airbridge.isDesktop : false;
        $("#header_mainNavigation").html(this.view("mainNavigation"));
        this.updateSection(GS.page.activePageName, GS.page.activePageIdentifier);
        this.updateNavButtons()
    },updateNavButtons: function() {
        if (GS.router && 
        GS.airbridge.isDesktop) {
            $("#header_back_btn").attr("disabled", !GS.router.hasBack);
            $("#header_forward_btn").attr("disabled", !GS.router.hasForward)
        }
    },"#grooveshark click": function() {
        if ($("#page").is(".gs_page_home")) {
            $("input.search.autocomplete", "#page").focus();
            $("#searchBar_input input").val() == "" && $("#searchBar_input span").show()
        } else
            setTimeout(function() {
                $("input.search.autocomplete", "#page").blur()
            }, 0)
    },"#header_mainNavigation a click": function(c) {
        c = $(c).attr("href");
        GS.getGuts().logEvent("headerNavigationClick", 
        {link: c})
    },"#header_search_btn mousedown": function() {
        if ($("#page").is(".gs_page_home")) {
            $("input.search.autocomplete", "#page").focus();
            $("#searchBar_input input").val() == "" && $("#searchBar_input span").show().addClass("faded");
            $("#searchBar_input input").addClass("focused")
        } else
            var c = $.subscribe("gs.page.home.view", function() {
                setTimeout(function() {
                    $("input.search.autocomplete", "#page").focus()
                }, 0);
                $("#searchBar_input span").show();
                $.unsubscribe(c)
            })
    },"#header_forward_btn click": function() {
        GS.router.forward()
    },
    "#header_back_btn click": function() {
        GS.router.back()
    },"#header_login click": function(c) {
        $(c).toggleClass("active");
        $("#dropdown_loginForm_box").toggle();
        if ($("#dropdown_loginForm_box").is(":visible")) {
            $("#dropdown_loginForm_box").find("input:first").focus();
            this.element.find(".error").hide();
            $("div.capital iframe").hide().parent().hide()
        } else {
            $("#dropdown_loginForm").find("input").blur().val("");
            $("div.capital iframe").show().parent().show()
        }
        var a = this;
        $("body").click(function(b) {
            if (!$(b.target).parents("#dropdown_loginForm_box").length && 
            !$(b.target).parents("#header_loginOption").length) {
                a.closeLoginDropdown();
                $("div.capital iframe").show().parent().show()
            }
        })
    },"#loginReplace click": function(c, a) {
        $("#header_login").trigger("click");
        a.preventDefault()
    },closeLoginDropdown: function() {
        $("#dropdown_loginForm_box").hide();
        $("#dropdown_loginForm").find("input").blur().val("");
        $("#header_login").removeClass("active")
    },"#headerSignup click": function() {
        var c = GS.getGuts();
        c.currentTest && c.currentTest.name == "signupDropdown" ? c.logEvent("loginDropdownSignupClick", 
        2) : c.logEvent("loginDropdownSignupClick", 1);
        this.closeLoginDropdown()
    },"#header_search .placeholder click": function() {
        $("#header_search input").focus()
    },"#header_search .remove click": function() {
        $("#header_search input").val("").focus();
        $("#header_search .remove").addClass("hide")
    },"#header_search input focus": function() {
        $("#header_search").addClass("active");
        $("#header_search .placeholder").hide();
        this.pageSearchHasFocus = true
    },"#header_search input blur": function() {
        var c = $("#header_search input");
        $("#header_search").removeClass("active");
        this.pageSearchHasFocus = false;
        setTimeout(function() {
            $("#page_search_results").hide()
        }, 200);
        c.val() == "" && $("#header_search .placeholder").show()
    },"#header_search input keydown": function(c, a) {
        var b = $("#page_search_results li.selected");
        switch (a.which) {
            case _.keys.ENTER:
                c.parents("form").submit();
                return;
            case _.keys.ESC:
                b = $("#page_search_results");
                if (b.is(":visible")) {
                    b.hide();
                    $.publish("gs.menu.hide")
                } else {
                    c.siblings("a.remove").addClass("hide");
                    c.val("");
                    this.inpageSearch(c)
                }
                return;
            case _.keys.UP:
                b.is(":first-child") ? $("#page_search_results li:last").addClass("selected") : b.prev().addClass("selected");
                b.removeClass("selected");
                return;
            case _.keys.DOWN:
                b.is(":last-child") ? $("#page_search_results li:first").addClass("selected") : b.next().addClass("selected");
                b.removeClass("selected");
                return
        }
        $("#header_search a.remove").toggleClass("hide", !c.val().length);
        this.inpageSearch(c)
    },".search-item a click": function(c) {
        $("#page_search_results li.selected").removeClass("selected");
        $(c).parent().addClass("selected");
        $(c).is(".search-item") && c.closest("input").val($(c).text());
        c.submit()
    },searchTimeout: false,searchTimeoutWait: 100,inpageSearch: function(c) {
        if (!(GS.getGuts().currentTest && GS.getGuts().currentTest.name == "autocomplete")) {
            this.searchTimeout && clearTimeout(this.searchTimeout);
            this.searchTimeout = setTimeout(this.callback(function() {
                if (this.element) {
                    var a = $.trim(c.val().toLowerCase());
                    if (a.length > 0)
                        GS.service.getAutocomplete(a, "artist", this.callback("autocompleteSuccess"), this.callback("autocompleteFail"));
                    else {
                        $("#page_search_results").hide();
                        $.publish("gs.menu.hide")
                    }
                }
            }), this.searchTimeoutWait)
        }
    },autocompleteSuccess: function(c) {
        this.autocompleteResults = c;
        $("#page_search_results").html(this.view("/shared/pageSearchResults"));
        if (this.pageSearchHasFocus && c && c.length) {
            $("#page_search_results").show();
            $.publish("gs.menu.show")
        } else if (c && !c.length) {
            $("#page_search_results").hide();
            $.publish("gs.menu.hide")
        }
    },autocompleteFail: function() {
        $("#page_search_results").remove(".search_result").hide();
        $.publish("gs.menu.hide")
    },
    "#header_search submit": function(c, a) {
        a.preventDefault();
        GS.search = _.orEqual(GS.search, {});
        GS.search.type = $(c).attr("data-search-type") || "";
        var b = $("#page_search_results li.selected");
        if (b.is(".search-item-result")) {
            GS.router.setHash("/artist/~/" + b.children("a.search-item").attr("data-artist-id"));
            $("#page_search_results").addClass("hide");
            $("input[name=q]", c).val("").focusout()
        } else {
            GS.search.query = $("input[name=q]", c).val();
            if (GS.search.query && GS.search.query.length) {
                $("input[name=q]", c).val("").focusout();
                $("#header_search a.remove").addClass("hide");
                GS.router.performSearch(GS.search.type, GS.search.query)
            }
            return false
        }
    },showAccountOptions: function() {
        var c = [];
        if (GS.user.UserID > 0)
            c = [{title: $.localize.getString("PROFILE"),action: {type: "gourl",url: GS.user.toUrl("")}}, {title: $.localize.getString("COLLECTION"),action: {type: "gourl",url: GS.user.toUrl("music")}}, {title: $.localize.getString("FAVORITES"),action: {type: "gourl",url: GS.user.toUrl("music/favorites")}}, {title: $.localize.getString("PLAYLISTS"),action: {type: "gourl",
                        url: GS.user.toUrl("music/playlists")}}, {customClass: "separator"}];
        var a = [{title: $.localize.getString("HOME_SUPPORT"),action: {type: "gourl",target: "_blank",url: "http://help.grooveshark.com"}}];
        if (GS.user.subscription.canDirectEmail())
            a = a.concat([{title: $.localize.getString("FEEDBACK"),action: {type: "fn",callback: function() {
                            GS.getLightbox().open("feedback")
                        }}}]);
        c = c.concat([{title: $.localize.getString("LANGUAGE"),action: {type: "fn",callback: function() {
                        GS.getLightbox().open("locale")
                    }}}, {title: $.localize.getString("SETTINGS"),
                action: {type: "gourl",url: "/#!/settings"}}, {title: $.localize.getString("SURVEYS"),action: {type: "gourl",url: "/#!/surveys"}}, {title: $.localize.getString("HOME_FEATURES"),action: {type: "gourl",url: "/#!/features"}}, {title: $.localize.getString("HOME_HELP"),type: "sub",src: a}]);
        GS.user.UserID > 0 && c.push({title: $.localize.getString("INVITE_FRIENDS"),action: {type: "fn",callback: function() {
                    GS.getLightbox().open("invite")
                }}});
        c.push({customClass: "separator"});
        GS.user.UserID > 0 ? c.push({title: $.localize.getString("LOGOUT"),
            action: {type: "fn",callback: function() {
                    GS.auth.logout()
                }}}) : c.push({title: $.localize.getString("SIGNUP"),action: {type: "gourl",url: "/#/signup"}});
        return c
    },accountMenuTimer: null,"#header_account_group mouseenter": function(c, a) {
        this.closeLoginDropdown();
        this.openAccountDropDown(c, a)
    },"#header_account_group click": function(c, a) {
        this.closeLoginDropdown();
        this.openAccountDropDown(c, a)
    },"#header_account_group a click": function() {
        if (GS.user.UserID > 0)
            location = GS.user.toUrl("")
    },openAccountDropDown: function(c, 
    a) {
        this.accountMenuTimer && clearTimeout(this.accountMenuTimer);
        this.accountMenu = $(c).jjmenu(a, this.showAccountOptions(), null, {xposition: "right",yposition: "bottom",show: "default",spill: "left",keepState: c,className: "accountDropDown",append: $(this.element),shouldLog: true})
    },".accountDropDown mouseenter": function() {
        this.accountMenuTimer && clearTimeout(this.accountMenuTimer)
    },"#header_account_group,.accountDropDown mouseleave": function() {
        this.accountMenuTimer && clearTimeout(this.accountMenuTimer);
        this.accountMenuTimer = 
        setTimeout(this.callback("closeAccountDropDown"), 200)
    },closeAccountDropDown: function() {
        $(document).trigger("contextmenu")
    },"#header_notification.active click": function(c) {
        if ($(c).hasClass("active-context"))
            this.closeNotificationsDropdown();
        else {
            $(c).addClass("active-context");
            $("#header_notification_pill").removeClass("block");
            $("#header_notification_count").text("");
            GS.user && GS.user.UserID > 0 && GS.user.setLastSeenNotification()
        }
        var a = this;
        $("body").click(function(b) {
            $(b.target).parents("#header_notification").length || 
            a.closeNotificationsDropdown()
        })
    },"#dropdown_notification_box a click": function() {
        setTimeout(this.callback("closeNotificationsDropdown"), 100)
    },closeNotificationsDropdown: function() {
        $("#header_notification").removeClass("active-context")
    },"input focus": function(c) {
        $(c).parent().parent().addClass("active")
    },"textarea focus": function(c) {
        $(c).parent().parent().parent().addClass("active")
    },"input blur": function(c) {
        $(c).parent().parent().removeClass("active")
    },"textarea blur": function(c) {
        $(c).parent().parent().parent().removeClass("active")
    },
    showError: function(c) {
        $("div.message", this.element).html($.localize.getString(c));
        this.element.find(".error").show()
    },showMessage: function(c) {
        $("div.message", this.element).html(c);
        this.element.find(".error").show()
    },"form#dropdown_loginForm submit": function(c) {
        this.element.find(".error").hide();
        var a = $("input[name=username]", c).val(), b = $("input[name=password]", c).val();
        c = $("input[name=save]", c).val() ? 1 : 0;
        switch (a.toLowerCase()) {
            case "dbg:googlelogin":
                GS.getGoogle().lastError ? this.showMessage("Last Google Login Error: " + 
                JSON.stringify(GS.getGoogle().lastError)) : this.showMessage("There does not appear to be any errors with Google Login");
                break;
            case "dbg:facebooklogin":
                GS.getFacebook().lastError ? this.showMessage("Last Facebook Login Error: " + JSON.stringify(GS.getFacebook().lastError)) : this.showMessage("There does not appear to be any errors with Facebook Login");
                break;
            default:
                GS.auth.login(a, b, c, this.callback(this.loginSuccess), this.callback(this.loginFailed));
                break
        }
    },"button.facebookLogin click": function() {
        GS.auth.loginViaFacebook(null, 
        this.callback(this.extLoginFailed));
        this.closeLoginDropdown()
    },"button.googleLogin click": function() {
        GS.auth.loginViaGoogle(null, this.callback(this.extLoginFailed));
        this.closeLoginDropdown()
    },"button.twitterLogin click": function() {
        GS.auth.loginViaTwitter(null, this.callback(this.extLoginFailed));
        this.closeLoginDropdown()
    },loginSuccess: function() {
        this.closeLoginDropdown()
    },loginFailed: function(c) {
        if (c.error)
            this.showError(c.error);
        else
            c && c.userID == 0 ? this.showError("POPUP_SIGNUP_LOGIN_FORM_AUTH_ERROR") : 
            this.showError("POPUP_SIGNUP_LOGIN_FORM_GENERAL_ERROR")
    },extLoginFailed: function(c) {
        var a = {error: "POPUP_SIGNUP_LOGIN_FORM_GENERAL_ERROR",premiumRequired: gsConfig.isPreview,notCloseable: gsConfig.isPreview};
        if (c.error)
            a.error = c.error;
        else if (c && c.authType == "facebook")
            a.error = "POPUP_SIGNUP_LOGIN_FORM_FACEBOOK_ERROR";
        else if (c && c.authType == "google")
            a.error = "POPUP_SIGNUP_LOGIN_FORM_GOOGLE_ERROR";
        else if (c && c.authType == "twitter")
            a.error = "POPUP_SIGNUP_LOGIN_FORM_TWITTER_ERROR";
        GS.getLightbox().open("login", 
        a)
    },"a.loginLink click": function() {
        $("#dropdown_loginForm_box").hide();
        $("#dropdown_loginForm_box").find("input").blur();
        $("#header_login").removeClass("active")
    },"a.forget click": function() {
        GS.getLightbox().open("forget")
    },".songLink click": function(c, a) {
        a.preventDefault();
        var b = parseInt($(c).attr("data-songid"), 10);
        b && GS.Models.Song.getSong(b, function(g) {
            g && GS.router.setHash(g.toUrl())
        })
    }});
(function() {
    var c = 0, a = 0;
    GS.Controllers.BaseController.extend("GS.Controllers.AdController", {isGSSingleton: true}, {rotateTimer: 0,rotationTime: 45E3,defaultRotationTime: 45E3,lastActive: null,maxIdleTime: 24E4,lastIdleTime: null,lastRotation: null,rotationCountPerImpression: 0,useTestAds: false,rotationCount: 0,sessionStart: null,lastAdChange: null,chooseAdLimit: 4E3,clickAdCatchTimeout: null,lastActivePage: null,campaignArtists: {},campaignsByCampaignID: {},userCampaigns: [],CANADA_MAXIDLE: 45E3,CANADA_ISIDLE: false,
        CANADA_TIMEOUTID: null,locales: {en: "1",bg: "2",ca: "3",cs: "4",da: "5",de: "6",es: "7",eu: "8",fi: "9",fr: "10",it: "11",ja: "12",lt: "13",nb: "14",nl: "15",pl: "16",pt: "17",ro: "18",ru: "19",sk: "20",sl: "21",sv: "22",tr: "23",zh: "24"},adPlacements: ["home_160x600", "search_song_300x250", "search_artist_300x250", "search_album_300x250", "search_playlist_300x250", "search_user_300x250", "search_event_300x250", "search_song_728x90", "search_artist_728x90", "search_album_728x90", "search_playlist_728x90", "search_user_728x90", "search_event_728x90", 
            "explore_featured_300x250", "explore_popular_300x250", "explore_stations_300x250", "explore_playlists_300x250", "explore_popular_728x90", "explore_videos_300x250", "explore_featured_728x90", "explore_stations_728x90", "explore_playlists_728x90", "explore_videos_728x90", "mymusic_songs_160x600", "mymusic_favorites_160x600", "mymusic_playlists_overview_160x600", "mymusic_playlists_subscribed_160x600", "community_activity_300x250", "community_activity_728x90", "community_mentions_300x250", "playlist_music_300x250", "playlist_albums_300x250", 
            "playlist_subscribers_300x250", "playlist_music_728x90", "artist_profile_300x250", "artist_songs_300x250", "artist_albums_300x250", "artist_events_300x250", "artist_profile_728x90", "artist_similar_artists_300x250", "artist_fans_300x250", "album_overview_300x250", "song_overview_300x250", "song_overview_728x90", "myprofile_activity_300x250", "myprofile_following_300x250", "myprofile_fans_300x250", "myprofile_activity_728x90", "profile_activity_300x250", "profile_music_300x250", "profile_favorites_300x250", "profile_playlists_300x250", 
            "profile_community_300x250", "profile_following_300x250", "profile_fans_300x250", "profile_activity_728x90", "vlb_header_728x90"],init: function() {
            this.sessionStart = (new Date).getTime();
            this.lastActive = new Date;
            this.subscribe("gs.auth.update", this.callback(this.update));
            this.subscribe("gs.player.nowplaying", this.callback(this.onSongPlay));
            this.subscribe("gs.app.resize", this.callback(this.adSpecific));
            this.subscribe("gs.drag.start", function() {
                $("div.capital iframe").hide().parent().hide()
            });
            this.subscribe("gs.drag.end", 
            function() {
                $("div.capital iframe").show()
            });
            this.subscribe("gs.menu.show", function() {
                $("div.capital iframe").hide()
            });
            this.subscribe("gs.menu.hide", function() {
                setTimeout(function() {
                    $("#lightbox:visible").length || $("div.capital iframe").show().parent().show()
                }, 10)
            });
            var b = this;
            $("body").bind("mousemove", function() {
                b.lastActive = new Date;
                if (gsConfig.country.ID == "38")
                    if (b.CANADA_ISIDLE && !b.CANADA_TIMEOUTID)
                        b.CANADA_TIMEOUTID = setTimeout(function() {
                            b.CANADA_TIMEOUTID = null;
                            b.CANADA_ISIDLE = false;
                            b.chooseAd()
                        }, 
                        5E3)
            });
            this._super()
        },appReady: function() {
            this.update()
        },update: function() {
            this.user = GS.user;
            this.parseCampaignsForUser();
            GS.user.subscription.canHideAds() || this.startAdTimer();
            $("#page").scroll(this.onScroll);
            GS.user.IsPremium || setTimeout(this.onFlattrSuggestTest, 45E3);
            GS.resize()
        },onSongPlay: function(b) {
            if (this.campaignArtists && this.campaignArtists[b.ArtistID] instanceof Array)
                for (var g = 0; g < this.campaignArtists[b.ArtistID].length; g++) {
                    var h = this.campaignArtists[b.ArtistID][g];
                    if (h) {
                        var m = this.campaignsByCampaignID[h];
                        if (!m) {
                            m = {id: h,count: 1};
                            this.campaignsByCampaignID[h] = m;
                            this.userCampaigns.push(m)
                        }
                    }
                }
        },parseCampaignsForUser: function() {
            this.userCampaigns = [];
            this.campaignsByCampaignID = {};
            var b = GS.store.get("artistsPlayed" + (this.user ? this.user.UserID : -1));
            if (this.campaignArtists && b)
                for (var g = 0; g < b.length; g++) {
                    var h = b[g];
                    if (h && this.campaignArtists[h] instanceof Array)
                        for (var m = 0; m < this.campaignArtists[h].length; m++) {
                            var k = this.campaignArtists[h][m];
                            if (k) {
                                var n = this.campaignsByCampaignID[k];
                                if (n)
                                    n.count++;
                                else {
                                    n = {id: k,
                                        count: 1};
                                    this.campaignsByCampaignID[k] = n;
                                    this.userCampaigns.push(n)
                                }
                            }
                        }
                }
        },showAdBar: function() {
            $("#capitalSidebar").width(170).show();
            GS.resize()
        },startAdTimer: function() {
            if (gsConfig.country.ID != "106")
                if (GS.theme.themeIsReady) {
                    clearInterval(this.rotateTimer);
                    this.rotateTimer = setInterval(this.callback("onRotateTimer"), this.defaultRotationTime);
                    this.chooseAd()
                }
        },resetAdTimer: function() {
            if (GS.theme.themeIsReady) {
                clearInterval(this.rotateTimer);
                this.rotateTimer = setInterval(this.callback("onRotateTimer"), 
                this.defaultRotationTime)
            }
        },hideAdBar: function() {
            $("#capitalSidebar").hide().width(0);
            $("#sidebarCapital_160").children("iframe").attr("src", "");
            GS.resize();
            GS.player && GS.player.updateQueueWidth()
        },onRotateTimer: function() {
            if (this.lastActive && !GS.user.subscription.canHideAds()) {
                var b = (new Date).valueOf(), g = b - (this.lastActive ? this.lastActive.valueOf() : 0);
                this.lastRotation && this.lastRotation.valueOf();
                if (gsConfig.country.ID == "38")
                    if (g <= this.CANADA_MAXIDLE)
                        this.chooseAd();
                    else {
                        clearInterval(this.rotateTimer);
                        this.CANADA_ISIDLE = true
                    }
                else if (g <= this.maxIdleTime)
                    this.chooseAd();
                else
                    this.lastIdleTime = b
            }
        },adAction: function(b) {
            if (b)
                if ($(b.target).hasClass("stopAdAction"))
                    return;
            if (gsConfig.country.ID == "38")
                if (this.CANADA_TIMEOUTID)
                    return;
            if (!(gsConfig.country.ID == "106" || gsConfig.country.ID == "221")) {
                b = (new Date).getTime();
                if (GS.theme.themeIsReady && !GS.user.subscription.canHideAds() && !this.clickAdCatchTimeout && (!this.lastAdChange || b - this.lastAdChange > this.chooseAdLimit))
                    this.chooseAd()
            }
        },chooseAd: function(b) {
            $("div.capital iframe:visible").length !== 
            0 && setTimeout(this.callback(function() {
                this.lastRotation = new Date;
                this.updateAds(b);
                GS.getGuts().logEvent("adRotation", {})
            }), 100)
        },buildParams: function(b, g, h) {
            b = b instanceof Array ? b : [];
            g = _.orEqual(g, "?");
            h = _.orEqual(h, "&");
            GS.player && GS.player.getCurrentSong() && b.push("2=" + GS.player.getCurrentSong().ArtistID);
            var m, k;
            if (GS.user.isLoggedIn) {
                if (GS.user.Sex) {
                    k = GS.user.Sex.toLowerCase() == "m" ? "0" : "1";
                    b.push("1=" + k)
                }
                if (GS.user.TSDOB) {
                    var n = GS.user.TSDOB.split("-");
                    if (n.length == 3) {
                        var o = new Date, q = o.getFullYear() - 
                        parseInt(n[0], 10);
                        if (parseInt(n[1], 10) > o.month)
                            q -= 1;
                        else if (parseInt(n[1], 10) == o.month && parseInt(n[2], 10) > o.date)
                            q -= 1;
                        if (q >= 13 && q < 18)
                            m = "1";
                        else if (q >= 18 && q < 25)
                            m = "2";
                        else if (q >= 25 && q < 35)
                            m = "3";
                        else if (q >= 35 && q < 50)
                            m = "4";
                        else if (q >= 50)
                            m = "5";
                        q >= 21 && b.push("a=1");
                        m && b.push("10=" + m);
                        b.push("14=" + this.encodeInteger(q))
                    }
                }
                if (GS.user.Email) {
                    n = GS.user.Email.split(".");
                    n.length && n[n.length - 1] == "edu" && b.push("20=1")
                }
            }
            b.push("3=" + Math.round(((new Date).getTime() - this.sessionStart) / 1E3));
            b.push("4=" + this.rotationCount);
            b.push("5=" + ((GS.user.settings.local.themeFlags & GS.theme.THEME_FLAG_FAMILY_FRIENDLY) == GS.theme.THEME_FLAG_FAMILY_FRIENDLY ? 1 : 0));
            GS.theme.currentTheme && GS.theme.currentTheme.sections.indexOf("#theme_page_header") >= 0 && b.push("6=1");
            if (GS.Controllers.PageController.activePageName && GS.Controllers.PageController.activePageName.toLowerCase() == "homecontroller")
                b.push("9=1");
            else
                GS.Controllers.PageController.activePageName && GS.Controllers.PageController.activePageName.toLowerCase() == "searchcontroller" && 
                (!GS.search.type || GS.search.type === "" || GS.search.type == "everything") ? b.push("9=2") : b.push("9=0");
            if (GS.theme && GS.theme.currentTheme)
                (n = parseInt(GS.theme.currentTheme.themeID, 10)) && b.push("11=" + n);
            if (GS.player && GS.player.queue && GS.player.queue.currentAutoplayTagID) {
                b.push("12=1");
                b.push("13=" + GS.player.queue.currentAutoplayTagID)
            }
            b.push("15=" + this.rotationCountPerImpression);
            gsConfig && gsConfig.isPreview && b.push("16=1");
            if (GS.user.UserID > 0)
                if (GS.user.Flags & GS.Models.FLAG_ISARTIST)
                    b.push("17=1");
                else
                    GS.user.Flags & 
                    GS.Models.FLAG_MUSIC_BUSINESS && b.push("17=2");
            b.push("18=" + (new Date).getDate());
            if (n = GS.theme.getRecentSeen())
                for (o = 0; o < n.length; o++)
                    b.push("rec=" + n[o]);
            if (GS.user.UserID > 0)
                if (GS.user.subscription.isAnywhere())
                    b.push("19=3");
                else
                    GS.user.subscription.isPlus() ? b.push("19=2") : b.push("19=1");
            else
                b.push("19=0");
            this.useTestAds && b.push("testAds=1");
            if (n = GS.store ? GS.store.get("adhelper") : null) {
                if (!m) {
                    if (n.hasOwnProperty("ageRange"))
                        switch (n.ageRange) {
                            case 29516:
                                m = "1";
                                break;
                            case 29517:
                                m = "2";
                                break;
                            case 30024:
                            case 30025:
                                m = 
                                "3";
                                break;
                            case 29520:
                            case 29521:
                                m = "4";
                                break;
                            case 29522:
                            case 29523:
                                m = "5";
                                break
                        }
                    m && b.push("10=" + m)
                }
                if (!k)
                    if (n.hasOwnProperty("gender")) {
                        if (n.gender == 1536)
                            k = "0";
                        else if (n.gender == 1537)
                            k = "1";
                        k && b.push("1=" + k)
                    }
            }
            if (!GS.user.subscription.canHideAds())
                if ((m = GS.store.get("webvisit")) && m.sidebar)
                    b = b.concat(GS.store.get("webvisit").sidebar);
                else if ((m = GS.store.get("krux")) && m.params)
                    b = b.concat(GS.store.get("krux").params);
            var x;
            try {
                x = "0=";
                x += this.locales[GS.getLocale().locale]
            } catch (v) {
                x = "0=1"
            }
            b = b.concat([x]);
            return g + b.join(h)
        },encodeInteger: function(b) {
            b = b.toString(2).split("");
            for (var g = 1, h = b.length, m = 0; g < h; ) {
                b.splice(g + m, 0, 0);
                g += 3;
                m++
            }
            return (parseInt(b.join(""), 2) * 751).toString(16)
        },decodeInteger: function(b) {
            b = (parseInt(b, 16) / 751).toString(2).split("");
            for (var g = 1, h = 0; b[g + h] !== undefined; ) {
                b[g + h] = null;
                g += 3;
                h++
            }
            return parseInt(b.join(""), 2)
        },buildAd: function(b, g, h, m) {
            if (b && b.length) {
                m || (m = []);
                var k = b.attr("data-iframe-type") && b.attr("data-iframe-type") == "afc";
                if (b.data("data-user-activity") == undefined) {
                    b.data("data-user-activity", 
                    null);
                    b.live("mouseover", function() {
                        $(this).data("data-user-activity", (new Date).getTime() + 9E4)
                    });
                    b.live("mouseout", function() {
                        $(this).data("data-user-activity", null)
                    })
                }
                $page = $("#page_content");
                for (var n = 0; n < m.length; n++) {
                    var o = m[n].split("=");
                    if (o.length > 1 && o[0] == "p")
                        m[n] = GS.getAd().adPlacements.indexOf(o[1] + "_" + g + "x" + h) >= 0 ? m[n] : "p=default"
                }
                b.data("data-iframe-width", g).data("data-iframe-height", h).data("data-iframe-params", m.concat()).data("data-iframe-born", (new Date).getTime());
                m = GS.getAd().buildParams(m.concat(["w=" + 
                    g, "h=" + h]));
                var q = b.children("iframe"), x;
                if (q.length > 1) {
                    for (h = q.length - 1; h > 0; h--)
                        q.eq(h).unbind("load").remove();
                    q = q.eq(0);
                    x = q.clone()
                } else
                    x = $('<iframe height="' + h + '" width="' + g + '" class="' + (k ? "afcCapitalFrame_" : "capitalFrame_") + g + '" frameborder="0" allowTransparency="true"></iframe>');
                x.css("visibility", "hidden");
                x.bind("load", this.callback(function() {
                    q.unbind("load").remove();
                    x.css("visibility", "visible").width(0);
                    b.parent().show();
                    if (g == 728 || g == 160) {
                        b.parent().parent().show();
                        this.adSpecific();
                        $("#capitalSidebar .capitalView_160").scrollTop(0)
                    }
                    g == 300 && this.onScroll();
                    setTimeout(function() {
                        x.width(g)
                    }, 100);
                    setTimeout(function() {
                        x.width(g - 1);
                        x.width(g + 1)
                    }, 1500)
                }));
                this.lastAdChange = (new Date).getTime();
                gsConfig.country.ID != "106" && this.resetAdTimer();
                b.attr("data-iframe-type") && b.attr("data-iframe-type") == "afc" ? x.attr("src", "/afcAds.html" + m) : x.attr("src", "/dfpAds.html" + m);
                b.append(x)
            }
        },updateAds: function(b) {
            setTimeout(this.callback(function() {
                if (!this.lastActivePage || this.lastActivePage != 
                GS.Controllers.PageController.activePageName + (GS.Controllers.PageController.activePage ? GS.Controllers.PageController.activePage.subpage : ""))
                    this.lastActivePage = GS.Controllers.PageController.activePageName + (GS.Controllers.PageController.activePage ? GS.Controllers.PageController.activePage.subpage : "");
                else {
                    this.lastActivePage = GS.Controllers.PageController.activePageName + (GS.Controllers.PageController.activePage ? GS.Controllers.PageController.activePage.subpage : "");
                    var g = (new Date).getTime(), h = _.orEqual(b, 
                    ".capital");
                    if ($(h).length) {
                        $(h).each(this.callback(function(m, k) {
                            k = $(k);
                            if (g - k.data("data-iframe-born") > this.chooseAdLimit && (!k.data("data-user-activity") || k.data("data-user-activity") < g) && k.offset().top + k.data("data-iframe-height") >= 0 && k.offset().top <= $("#page").height() && k.is(":visible"))
                                k.data("data-iframe-width") && k.data("data-iframe-height") && k.data("data-iframe-params") && this.buildAd(k, k.data("data-iframe-width"), k.data("data-iframe-height"), k.data("data-iframe-params"))
                        }));
                        this.updateRotationCount()
                    }
                }
            }), 
            500)
        },updateRotationCount: function() {
            this.rotationCount++;
            this.rotationCountPerImpression++;
            if (GS.theme && !GS.theme.hasSeenRotationCount)
                GS.theme.hasSeenRotationCount = this.rotationCountPerImpression >= 3
        },onScroll: function() {
            var b = $(".capitalWrapper_300"), g = $("#capitalBelowFoldHelper_300"), h = $("#capitalAboveFoldHelper_300");
            g.hasClass("justScroll") || g.addClass("justScroll");
            if (!(!b.length || !g.length || !h.length))
                if (h.length && h.offset().top + b.height() < 0)
                    if (g.offset().top > 58) {
                        b.hasClass("capitalFixedTop_300") && 
                        b.removeClass("capitalFixedTop_300");
                        b.offset({top: g.offset().top})
                    } else
                        b.hasClass("capitalFixedTop_300") || b.addClass("capitalFixedTop_300");
                else if (h.length && h.offset().top + h.height() >= 0) {
                    b.hasClass("capitalFixedTop_300") && b.removeClass("capitalFixedTop_300");
                    b.offset({top: h.offset().top})
                }
        },adSpecific: function() {
            if ($(".capital_728").length && $(".capital_728").is(":visible")) {
                var b = $(".capital_728"), g = $(".capitalWrapper_728"), h = $(".capitalSliderBtn"), m = $(".capitalView_728"), k = g.find(".horizAdRemoveLinks");
                m.scrollLeft(m.scrollLeft() / 0.5);
                if (g.width() < b.width() + 42) {
                    if (!h.is(":visible")) {
                        h.show();
                        b.css({left: 0,marginLeft: 0});
                        m.css({left: "21px"});
                        k.addClass("sliderButtons")
                    }
                    m.css({width: g.width() - 42 + "px"})
                } else if (h.is(":visible")) {
                    h.hide();
                    b.css({left: "50%",marginLeft: "-364px"});
                    m.css({width: "100%",left: 0});
                    k.removeClass("sliderButtons")
                }
            } else if ($("#capitalSidebar .capital_160").length && $("#capitalSidebar .capital_160").is(":visible")) {
                b = $("#capitalSidebar .capital_160");
                g = $("#capitalSidebar .capitalWrapper_160");
                h = $("#capitalSidebar .capitalSliderBtnRev");
                m = $("#capitalSidebar .capitalView_160");
                if (g.height() < b.height() + 48) {
                    if (!h.is(":visible")) {
                        h.show();
                        m.css({top: "24px"})
                    }
                    m.css({height: g.height() - 78 - 7 + "px"})
                } else if (h.is(":visible")) {
                    h.hide();
                    m.css({height: "100%",top: 0})
                }
            } else if ($("#page_wrapper .capital_160").length && $("#page_wrapper .capital_160").is(":visible")) {
                b = $("#page_wrapper .capital_160");
                g = $("#page_wrapper .capitalWrapper_160");
                h = $("#page_wrapper .capitalSliderBtnRev");
                m = $("#page_wrapper .capitalView_160");
                if (g.height() < b.height() + 78) {
                    if (!h.is(":visible")) {
                        h.show();
                        m.css({top: "21px"})
                    }
                    m.css({height: g.height() - 78 + "px"})
                } else if (h.is(":visible")) {
                    h.hide();
                    m.css({height: "100%",top: 0})
                }
            }
        },onFlattrSuggestTest: function() {
            GS.service.suggestFlattr(["http://ad.doubleclick.net/ad/pixel", gsConfig.httpHost + "/dfpAds.html?p=home&w=160&h=600", "http://ad.doubleclick.net/ad/pixel", gsConfig.httpHost + "/dfpAds.html?p=home&w=160&h=600"], 5, false, GS.getAd().onFlattrSuggestTestComplete, GS.getAd().onFlattrSuggestTestComplete)
        },
        onFlattrSuggestTestComplete: function(b) {
            var g = (new Date).getDate(), h = GS.store.get("isDetected");
            if (b && h != g) {
                GS.store.set("isDetected", g);
                GS.getGuts().forceLogEvent("suggestFlattr", {})
            }
        },determineAdInfo: function(b, g) {
            if (g) {
                if (g > 10)
                    return ""
            } else
                g = 0;
            var h, m = "";
            b = $(b);
            try {
                var k = b.find("iframe");
                for (h = 0; h < k.length && h < 3; h++)
                    if (!k[h].src || k[h].src == "" || k[h].src == "about:blank" || k[h].src == 'javascript:window["contents"]' || k[h].src.indexOf("/") === 0 || k[h].src.indexOf("http://" + window.location.host + "/") === 0) {
                        var n = 
                        k[0].contentDocument ? k[0].contentDocument : k[0].contentWindow.document;
                        if (n.body)
                            n = n.body;
                        return this.determineAdInfo(n, g++)
                    } else if (k[h].src.indexOf("quantserve") == -1 && k[h].height > 0 && k[h].width > 0) {
                        if (iframe.src.indexOf("doubleclick.net/aclk") > -1 || iframe.src.indexOf("googleadservices.com/pagead/aclk") > -1)
                            return k[h].src;
                        m = k[h].src
                    }
            } catch (o) {
                if (k[h] && k[h].src.indexOf("quantserve") == -1 && k[h].src.indexOf("http://" + window.location.host + "/") != 0)
                    m = k[h].src;
                else if (g < 1)
                    return ""
            }
            k = b.find("a");
            for (h = 0; h < k.length && 
            h < 5; h++)
                if (k[h].href && (k[h].href.indexOf("adurl=h") > -1 || k[h].href.indexOf("/") === 0 || k[h].href.indexOf("http://" + window.location.host + "/") === 0))
                    return k[h].href;
            n = b.find("noscript");
            for (h = 0; h < n.length; h++)
                if (n[h].innerHTML && n[h].innerHTML.indexOf("href") > -1 && n[h].innerHTML.indexOf("adurl=h") > -1) {
                    var q = unescape(n[h].innerHTML);
                    if ((q = $(q).find("a")[0]) && q.href)
                        return q.href
                }
            n = b.find("script");
            if (n.length) {
                q = "";
                for (h = 0; h < n.length && h < 6; h++)
                    if (n[h].src && n[h].src != "" && n[h].src.indexOf("quantcast") == -1 && 
                    n[h].src.indexOf("googlesyndication") == -1 && n[h].src.indexOf("doubleclick.net/gampad") == -1 && n[h].src != "http://" + window.location.host + "/") {
                        if (n[h].src.indexOf("adurl") > -1 || n[h].src.indexOf("doubleclick.net/aclk") > -1 || n[h].src.indexOf("googleadservices.com/pagead/aclk") > -1)
                            return n[h].src;
                        q += n[h].src + ","
                    }
                if (q != "" && m == "")
                    return q = q.substr(0, q.length - 1)
            }
            if (k.length && m == "")
                return k[0].href;
            return m
        },canReportAd: function() {
            if ((new Date).getTime() - a > 54E6)
                c = a = 0;
            if (c >= 3)
                return false;
            return true
        },reportAd: function(b) {
            var g = 
            (new Date).getTime();
            b = b.find(".capital");
            var h = this.determineAdInfo(b), m = b.attr("id");
            if (m && c < 3) {
                var k = false;
                $.publish("gs.ad.notification.report", function(n) {
                    if (o !== false && !k) {
                        n = _.orEqual(n, {});
                        var o = _.orEqual(n.desc, "");
                        n = _.orEqual(n.type, "");
                        GS.service.reportBadAd(m, o, h, n);
                        k = true
                    }
                });
                this.chooseAd(b);
                c++;
                a || (a = g);
                GS.getGuts().forceLogEvent("reportedAd", {placement: m,country: gsConfig.country.ID,time: Math.floor(g / 1E3)})
            }
            c >= 3 && $(".reportAdLink").hide()
        },"#capitalSidebar .capitalSliderBtnRev click": function(b) {
            b = 
            $(b);
            $(b).hasClass("capitalSliderDown") ? $("#capitalSidebar .capitalView_160").animate({scrollTop: $("#capitalSidebar .capitalView_160").scrollTop() + 200}, 500) : $("#capitalSidebar .capitalView_160").animate({scrollTop: $("#capitalSidebar .capitalView_160").scrollTop() - 200}, 500)
        },".removeAdsLink click": function() {
            GS.getLightbox().open("vipPerks")
        },".reportAdLink click": function(b) {
            var g = $(b).data("parent");
            g && GS.getAd().reportAd($(b).parents("." + g))
        }})
})();
GS.Controllers.BaseController.extend("GS.Controllers.SidebarController", {onElement: "#sidebar",isGSSingleton: true,preSetup: function() {
        var c = GS.Controllers.BaseController.singletonCallback, a = $.subscribe;
        a("gs.auth.update", c("sidebar", "update"));
        a("gs.auth.pinboard.update", c("sidebar", "populateByType"));
        a("gs.auth.playlists.update", c("sidebar", "populateByType", {type: "playlists"}));
        a("gs.auth.favorites.playlists.update", c("sidebar", "populateByType", {type: "subscribedPlaylists"}));
        a("gs.page.view", c("sidebar", 
        "updateSection"));
        a("gs.app.ready", c("sidebar", "update"))
    }}, {playlists: [],subscribedPlaylists: [],stations: [],sortBy: "sidebarSort",doingSubscribed: false,doResize: true,isOpen: false,lastClickedPinnedElement: false,doubleClickTimeout: false,init: function() {
        var c = GS.store.get("gs.sort.sidebar");
        if (["sidebarSort", "PlaylistName"].indexOf(c) != -1)
            this.sortBy = c;
        this.subscribe("gs.auth.sidebar.loaded", this.callback(function() {
            this.populateByType({type: "all"})
        }));
        this.subscribe("gs.app.resize", this.callback("resize"));
        this._super()
    },appReady: function() {
        this.update()
    },updateSection: function(c) {
        if (c === "UserMusicController")
            if (GS.user.UserID == GS.page.activePageIdentifier && !GS.page.activePageParams.subpage)
                $(".sidebar_myMusic").addClass("active").siblings().removeClass("active");
            else if (GS.user.UserID == GS.page.activePageIdentifier && GS.page.activePageParams.subpage == "favorites")
                $(".sidebar_myFavorites").addClass("active").siblings().removeClass("active");
            else
                GS.user.UserID == GS.page.activePageIdentifier && GS.page.activePageParams.subpage == 
                "playlists" ? $(".sidebar_playlists").addClass("active").siblings().removeClass("active") : $(".sidebar_music_link").removeClass("active");
        else
            $(".sidebar_music_link").removeClass("active")
    },show: function() {
        if (!this.isOpen) {
            this.isOpen = true;
            this.element.addClass("active").removeClass("hide").width(180);
            if (this.tinyScrollbar)
                this.tinyScrollbar.update();
            else
                this.tinyScrollbar = $("#sidebar_pinboard").tinyscrollbar({animationOptions: {duration: 50,easing: "linear"}});
            GS.resize()
        }
    },hide: function() {
        if (this.isOpen) {
            this.isOpen = 
            false;
            this.element.removeClass("active").addClass("hide").width(0);
            GS.resize()
        }
    },resize: function() {
        this.tinyScrollbar && !this.element.hasClass("hide") && this.tinyScrollbar.update()
    },update: function() {
        if (GS.user) {
            this.user = GS.user;
            this.tinyScrollbar && this.tinyScrollbar.remove();
            this.tinyScrollbar = null;
            this.element.html(this.view("index"));
            this.populateByType({type: "all"});
            this.beginDragDrop()
        }
    },changeSort: function(c) {
        this.sortBy = c;
        this.populateByType({type: "all"});
        GS.store.set("gs.sort.sidebar", c)
    },
    playlistSort: function(c, a) {
        var b, g;
        try {
            if (this.sortBy === "sidebarSort") {
                b = c[this.sortBy];
                g = a[this.sortBy]
            } else {
                b = c[this.sortBy].toString().toLowerCase();
                g = a[this.sortBy].toString().toLowerCase()
            }
        } catch (h) {
        }
        return b == g ? 0 : b > g ? 1 : -1
    },populateByType: function(c) {
        if (GS.user.sidebarLoaded) {
            switch (c.type) {
                case "all":
                    this.populateSidebarStations();
                    this.populateSidebarSubscribedPlaylists();
                    this.populateSidebarPlaylists();
                    this.populateSidebarSongs();
                    this.populateSidebarArtists();
                    this.populateSidebarAlbums();
                    break;
                case "playlists":
                    this.populateSidebarPlaylists();
                    break;
                case "subscribedPlaylists":
                    this.populateSidebarSubscribedPlaylists();
                    break;
                case "stations":
                    this.populateSidebarStations();
                    break;
                case "songs":
                    this.populateSidebarSongs();
                    break;
                case "artists":
                    this.populateSidebarArtists();
                    break;
                case "albums":
                    this.populateSidebarAlbums();
                    break
            }
            if (this.tinyScrollbar)
                this.tinyScrollbar.update();
            else
                this.tinyScrollbar = $("#sidebar_pinboard").tinyscrollbar({animationOptions: {duration: 50,easing: "linear"}})
        }
    },populateSidebarPlaylists: function() {
        if (GS.user.sidebarLoaded) {
            this.playlists = 
            [];
            for (var c = GS.user.sidebar.playlists, a = 0; a < c.length; a++) {
                var b = GS.user.playlists[c[a]];
                if (b) {
                    b.sidebarSort = a + 1;
                    this.playlists.push(b)
                }
            }
            this.playlists.sort(this.callback(this.playlistSort));
            this.showPlaylists()
        }
    },populateSidebarSubscribedPlaylists: function() {
        if (GS.user.sidebarLoaded) {
            this.subscribedPlaylists = [];
            for (var c = GS.user.sidebar.subscribedPlaylists, a = 0; a < c.length; a++) {
                var b = c[a], g = GS.Models.Playlist.getOneFromCache(b), h = g ? g.PlaylistName : GS.user.sidebar.meta.subscribedPlaylists[b];
                if (g) {
                    if (g.UserID !== 
                    GS.user.UserID) {
                        g.sidebarSort = a + 1;
                        this.subscribedPlaylists.push(g)
                    }
                } else
                    h ? this.subscribedPlaylists.push({PlaylistID: b,PlaylistName: h,sidebarSort: a + 1}) : console.log("subscribedPlaylist shortcut with no name!", b)
            }
            this.subscribedPlaylists.sort(this.callback(this.playlistSort));
            this.showSubscribedPlaylists()
        }
    },populateSidebarStations: function() {
        if (GS.user.sidebarLoaded) {
            this.stations = [];
            var c, a, b, g, h = GS.user.sidebar.stations;
            b = 0;
            for (g = h.length; b < g; b++) {
                c = h[b];
                if (a = GS.Models.Station.getOneFromCache(c))
                    if (a = 
                    a.StationTitle) {
                        a = {StationID: c,Station: a,Name: a,PlaylistName: a,sidebarSort: b + 1};
                        this.stations.push(a)
                    }
            }
            this.stations.sort(this.callback(this.playlistSort));
            this.showStations()
        }
    },populateSidebarSongs: function() {
        if (GS.user.sidebarLoaded) {
            this.songs = [];
            for (var c = GS.user.sidebar.songs, a = 0; a < c.length; a++) {
                var b = c[a], g = GS.Models.Song.getOneFromCache(b);
                (g = g ? g.SongName : GS.user.sidebar.meta.songs[b]) ? this.songs.push({SongName: g,SongID: b,sidebarSort: a + 1}) : console.log("song shortcut with no name!", b)
            }
            this.songs.sort(this.callback(this.playlistSort));
            this.showSongs()
        }
    },populateSidebarArtists: function() {
        if (GS.user.sidebarLoaded) {
            this.artists = [];
            for (var c = GS.user.sidebar.artists, a = 0; a < c.length; a++) {
                var b = c[a], g = GS.Models.Artist.getOneFromCache(b);
                (g = g ? g.ArtistName : GS.user.sidebar.meta.artists[b]) ? this.artists.push({ArtistName: g,ArtistID: b,sidebarSort: a + 1}) : console.log("artist shortcut with no name!", b)
            }
            this.artists.sort(this.callback(this.playlistSort));
            this.showArtists()
        }
    },populateSidebarAlbums: function() {
        if (GS.user.sidebarLoaded) {
            this.albums = 
            [];
            for (var c = GS.user.sidebar.albums, a = 0; a < c.length; a++) {
                var b = c[a], g = GS.Models.Album.getOneFromCache(b);
                (g = g ? g.AlbumName : GS.user.sidebar.meta.albums[b]) ? this.albums.push({AlbumName: g,AlbumID: b,sidebarSort: a + 1}) : console.log("album shortcut with no name!", b)
            }
            this.albums.sort(this.callback(this.playlistSort));
            this.showAlbums()
        }
    },showPlaylists: function() {
        $("#sidebar_playlists").html(this.view("playlists", {playlists: this.playlists,doingSubscribed: false}));
        $("#sidebar_playlists_divider").show();
        $("#sidebar_playlist_new").toggle(!this.playlists.length)
    },
    showSubscribedPlaylists: function() {
        $("#sidebar_subscribed_playlists").html(this.view("playlists", {playlists: this.subscribedPlaylists,doingSubscribed: true}));
        $("#sidebar_playlists_divider").show()
    },showStations: function() {
        $("#sidebar_stations").html(this.view("stations"));
        $("#sidebar_stations_divider").show();
        $("#sidebar_station_new").toggle(!this.stations.length)
    },showSongs: function() {
        $("#sidebar_songs").html(this.view("songs"));
        var c = $("#sidebar_songs_divider"), a = c.toggle(!!this.songs.length).hasClass("sidebar_pin_collapsed");
        c.next(".sidebar_pin_group").toggle(!a && !!this.songs.length)
    },showArtists: function() {
        $("#sidebar_artists").html(this.view("artists"));
        var c = $("#sidebar_artists_divider"), a = c.toggle(!!this.artists.length).hasClass("sidebar_pin_collapsed");
        c.next(".sidebar_pin_group").toggle(!a && !!this.artists.length)
    },showAlbums: function() {
        $("#sidebar_albums").html(this.view("albums"));
        var c = $("#sidebar_albums_divider"), a = c.toggle(!!this.albums.length).hasClass("sidebar_pin_collapsed");
        c.next(".sidebar_pin_group").toggle(!a && 
        !!this.albums.length)
    },".sidebar_pin_divider click": function(c) {
        $(c).toggleClass("sidebar_pin_collapsed");
        $(c).next(".sidebar_pin_group").toggle()
    },"a.sidebar_playlist click": function(c, a) {
        a.preventDefault();
        var b = parseInt($(c).attr("rel"), 10);
        if (c[0] != this.lastClickedPinnedElement[0]) {
            clearTimeout(this.doubleClickTimeout);
            this.doubleClickTimeout = false
        }
        if (b) {
            if (this.doubleClickTimeout) {
                clearTimeout(this.doubleClickTimeout);
                this.doubleClickTimeout = false;
                GS.Models.Playlist.getPlaylist(b, function(h) {
                    h && 
                    h.play(GS.player.INDEX_LAST, true)
                })
            } else {
                var g = this;
                this.doubleClickTimeout = setTimeout(function() {
                    g.doubleClickTimeout = false;
                    GS.Models.Playlist.getPlaylist(b, function(h) {
                        h && GS.router.setHash(h.toUrl())
                    })
                }, 900)
            }
            this.lastClickedPinnedElement = c
        }
    },"a.sidebar_playlist_new click": function(c, a) {
        a.preventDefault();
        GS.getLightbox().open("newPlaylist")
    },".sidebar_playlist .remove click": function(c, a) {
        a.stopPropagation();
        a.preventDefault();
        var b = c.parent().attr("rel"), g = GS.Models.Playlist.getOneFromCache(b), 
        h = g.isSubscribed(), m = $(c).closest(".link_group"), k = function() {
            if ($(".sidebar_link", m).length === 0)
                if (!h) {
                    $("#sidebar_subscribed_divider").addClass("sidebar_pin_collapsed");
                    $("#sidebar_subscribed_wrapper").css("display", "none")
                }
        };
        GS.getLightbox().open({type: "removePlaylistSidebar",view: {header: "POPUP_DELETE_PLAYLIST_TITLE",messageHTML: (new GS.Models.DataString($.localize.getString("POPUP_DELETE_PLAYLIST_QUESTION"), {playlist: g.PlaylistName})).render(),buttonsLeft: [{className: "close",label: "CANCEL"}],
                buttonsRight: [{className: "submit playlist",label: h ? "PLAYLIST_UNSUBSCRIBE" : "POPUP_DELETE_PLAYLIST_LABEL"}, {className: "submit shortcut",label: "POPUP_REMOVE_PINBOARD_LABEL"}]},callbacks: {"button.playlist": function() {
                    h ? g.unsubscribe() : g.remove();
                    k()
                },"button.shortcut": function() {
                    GS.user.removeFromShortcuts("playlist", g.PlaylistID, true);
                    k()
                }}});
        return false
    },"a.playlist contextmenu": function(c, a) {
        var b = c.attr("rel");
        b = GS.Models.Playlist.getOneFromCache(b).getContextMenu();
        $(c).jjmenu(a, b, null, {xposition: "mouse",
            yposition: "mouse",show: "show",className: "playlistmenu"})
    },"a.station click": function(c, a) {
        a.stopPropagation();
        var b = c.attr("rel");
        GS.player.setAutoplay(true, b);
        return false
    },"a.station .remove click": function(c, a) {
        a.stopPropagation();
        var b = c.parent().attr("rel");
        this.removeStationID = b;
        var g = $(c).closest(".link_group");
        GS.user.removeFromShortcuts("station", b, true);
        if ($(".sidebar_link", g).length === 0) {
            $("#sidebar_stations_divider").addClass("sidebar_pin_collapsed");
            $("#sidebar_stations_wrapper").css("display", 
            "none")
        }
        return false
    },"a.noProfile click": function() {
        GS.getLightbox().open("login")
    },"a.upload click": function() {
        window.open("http://" + location.host + "/upload", "_blank")
    },"a.sidebar_song click": function(c, a) {
        a.preventDefault();
        var b = parseInt($(c).attr("rel"), 10);
        if (c[0] != this.lastClickedPinnedElement[0]) {
            clearTimeout(this.doubleClickTimeout);
            this.doubleClickTimeout = false
        }
        if (b)
            if (this.doubleClickTimeout) {
                clearTimeout(this.doubleClickTimeout);
                this.doubleClickTimeout = false;
                GS.Models.Song.getSong(b, function(h) {
                    h && 
                    GS.player.addSongAndPlay(h.SongID)
                })
            } else {
                var g = this;
                this.doubleClickTimeout = setTimeout(function() {
                    g.doubleClickTimeout = false;
                    GS.Models.Song.getSong(b, function(h) {
                        h && GS.router.setHash(h.toUrl())
                    })
                }, 900)
            }
        this.lastClickedPinnedElement = c
    },".sidebar_song .remove click": function(c, a) {
        a.stopPropagation();
        a.preventDefault();
        var b = c.parent().attr("rel"), g = c.parent().attr("title");
        GS.getLightbox().open({type: "removeSongSidebar",view: {header: "POPUP_REMOVE_FROM_PINBOARD_TITLE",messageHTML: (new GS.Models.DataString($.localize.getString("POPUP_REMOVE_FROM_PINBOARD_MSG"), 
                {name: g,type: $.localize.getString("SONG").toLowerCase()})).render(),buttonsLeft: [{className: "close",label: "CANCEL"}],buttonsRight: [{className: "submit shortcut",label: "POPUP_REMOVE_PINBOARD_LABEL"}]},callbacks: {"button.shortcut": function() {
                    GS.user.removeFromShortcuts("song", b)
                }}});
        return false
    },"a.sidebar_song contextmenu": function(c, a) {
        var b = parseInt($(c).attr("rel"), 10);
        b && GS.Models.Song.getSong(b, function(g) {
            if (g) {
                g = g.getContextMenu();
                $(c).jjmenu(a, g, null, {xposition: "mouse",yposition: "mouse",show: "show",
                    className: "songmenu"})
            }
        })
    },"a.sidebar_album click": function(c, a) {
        a.preventDefault();
        var b = parseInt($(c).attr("rel"), 10);
        if (c[0] != this.lastClickedPinnedElement[0]) {
            clearTimeout(this.doubleClickTimeout);
            this.doubleClickTimeout = false
        }
        if (b)
            if (this.doubleClickTimeout) {
                clearTimeout(this.doubleClickTimeout);
                this.doubleClickTimeout = false;
                GS.Models.Album.getAlbum(b, function(h) {
                    h && h.play(GS.player.INDEX_LAST, true)
                })
            } else {
                var g = this;
                this.doubleClickTimeout = setTimeout(function() {
                    g.doubleClickTimeout = false;
                    GS.Models.Album.getAlbum(b, 
                    function(h) {
                        h && GS.router.setHash(h.toUrl())
                    })
                }, 900)
            }
        this.lastClickedPinnedElement = c
    },".sidebar_album .remove click": function(c, a) {
        a.stopPropagation();
        a.preventDefault();
        var b = c.parent().attr("rel"), g = c.parent().attr("title");
        GS.getLightbox().open({type: "removeAlbumSidebar",view: {header: "POPUP_REMOVE_FROM_PINBOARD_TITLE",messageHTML: (new GS.Models.DataString($.localize.getString("POPUP_REMOVE_FROM_PINBOARD_MSG"), {name: g,type: $.localize.getString("ALBUM").toLowerCase()})).render(),buttonsLeft: [{className: "close",
                        label: "CANCEL"}],buttonsRight: [{className: "submit shortcut",label: "POPUP_REMOVE_PINBOARD_LABEL"}]},callbacks: {"button.shortcut": function() {
                    GS.user.removeFromShortcuts("album", b)
                }}});
        return false
    },"a.sidebar_album contextmenu": function(c, a) {
        var b = parseInt($(c).attr("rel"), 10);
        b && GS.Models.Album.getAlbum(b, function(g) {
            if (g) {
                g = g.getContextMenu();
                $(c).jjmenu(a, g, null, {xposition: "mouse",yposition: "mouse",show: "show",className: "albummenu"})
            }
        })
    },"a.sidebar_artist click": function(c, a) {
        a.preventDefault();
        var b = c.attr("rel");
        b && GS.Models.Artist.getArtist(b, function(g) {
            g && GS.router.setHash(g.toUrl())
        })
    },".sidebar_artist .remove click": function(c, a) {
        a.stopPropagation();
        a.preventDefault();
        var b = c.parent().attr("rel"), g = c.parent().attr("title");
        GS.getLightbox().open({type: "removeSongSidebar",view: {header: "POPUP_REMOVE_FROM_PINBOARD_TITLE",messageHTML: (new GS.Models.DataString($.localize.getString("POPUP_REMOVE_FROM_PINBOARD_MSG"), {name: g,type: $.localize.getString("ARTIST").toLowerCase()})).render(),buttonsLeft: [{className: "close",
                        label: "CANCEL"}],buttonsRight: [{className: "submit shortcut",label: "POPUP_REMOVE_PINBOARD_LABEL"}]},callbacks: {"button.shortcut": function() {
                    GS.user.removeFromShortcuts("artist", b)
                }}});
        return false
    },"a.sidebar_artist contextmenu": function(c, a) {
        var b = parseInt($(c).attr("rel"), 10);
        b && GS.Models.Artist.getArtist(b, function(g) {
            if (g) {
                g = g.getContextMenu();
                $(c).jjmenu(a, g, null, {xposition: "mouse",yposition: "mouse",show: "show",className: "artistmenu"})
            }
        })
    },"#pinboard_new click": function(c, a) {
        c.jjmenu(a, this.getPinboardMenu(), 
        null, {xposition: "left",yposition: "auto",show: "default",className: "pinboardmenu"})
    },getPinboardMenu: function() {
        return [{title: $.localize.getString("SIDEBAR_CONTEXT_ADD_PLAYLIST"),action: {type: "fn",callback: function() {
                        GS.getLightbox().open("newPlaylist", null)
                    },log: function() {
                        GS.getGuts().onContextMenuClick("contextNewPlaylist", "pinboard_new", null, null)
                    }},customClass: "jj_menu_item_hasIcon jj_menu_item_add_playlist"}, {title: $.localize.getString("SIDEBAR_CONTEXT_ADD_STATION"),type: "sub",src: GS.Models.Station.getStationsStartMenuForPinboard(),
                customClass: "stations jj_menu_item_hasIcon jj_menu_item_station"}]
    },beginDragDrop: function() {
        function c(h, m, k) {
            _.orEqual(k, false);
            if (!($("#sidebar").within(h.clientX, h.clientY).length <= 0)) {
                h = $(".sidebar_link a", "#sidebar").within(h.clientX, h.clientY);
                $("#sidebar .sidebar_link a").removeClass("hover");
                h.length && m.draggedItemsType !== "playlist" && h.addClass("hover")
            }
        }
        function a(h, m) {
            var k = [], n, o;
            h.draggedItemsType = h.draggedItemsType || _.guessDragType(h.draggedItems);
            switch (h.draggedItemsType) {
                case "song":
                    for (n = 
                    0; n < h.draggedItems.length; n++)
                        k.push(h.draggedItems[n].SongID);
                    var q, x = [], v = [];
                    if ($("#grid").controller()) {
                        var A = $("#grid").controller().dataView.rows;
                        $('#grid .slick-row.selected[id!="showQueue"]').each(function(w, E) {
                            q = parseInt($(E).attr("row"), 10);
                            if (!isNaN(q)) {
                                x.push(q + 1);
                                var I = A[q].ppVersion;
                                I && v.push(I)
                            }
                        })
                    }
                    n = {ranks: x,songIDs: k};
                    if (v.length > 0)
                        n.ppVersions = v.join();
                    GS.getGuts().logMultiSongDrag("OLSongsDraggedToSidebar", n);
                    break;
                case "album":
                    var t = function(w) {
                        w.sort(GS.Models.Album.defaultSongSort);
                        for (o = 0; o < w.length; o++)
                            k.push(w[o].SongID)
                    };
                    for (n = 0; n < h.draggedItems.length; n++)
                        h.draggedItems[n].getSongs(t, null, true, {async: false});
                    break;
                case "artist":
                    t = function(w) {
                        w.sort(GS.Models.Artist.defaultSongSort);
                        for (o = 0; o < w.length; o++)
                            k.push(w[o].SongID)
                    };
                    for (n = 0; n < h.draggedItems.length; n++)
                        h.draggedItems[n].getSongs(t, null, {async: false});
                    break;
                case "playlist":
                    t = function(w) {
                        for (o = 0; o < w.length; o++)
                            k.push(w[o].SongID)
                    };
                    for (n = 0; n < h.draggedItems.length; n++)
                        h.draggedItems[n].getSongs(t, null, {async: false});
                    break;
                case "user":
                    t = function(w) {
                        for (o = 0; o < w.length; o++)
                            k.push(w[o].SongID)
                    };
                    for (n = 0; n < h.draggedItems.length; n++)
                        h.draggedItems[n].getFavoritesByType("Song", t, null, {async: false});
                    break;
                default:
                    console.error("sidebar drop, invalid drag type", h, h.draggedItemsType);
                    return
            }
            if (m === "library")
                GS.user.addToLibrary(k, true);
            else if (m === "favorites")
                for (n = 0; n < k.length; n++)
                    GS.user.addToSongFavorites(k[n]);
            else if (m === "newPlaylist")
                GS.getLightbox().open("newPlaylist", k);
            else if (m instanceof GS.Models.Playlist)
                m.addSongs(k, 
                null, true);
            else {
                console.error("sidebar drop, invalid thing", m);
                return
            }
            GS.getGuts().gaTrackEvent("sidebar", "dropSuccess")
        }
        var b = $("li.sidebar_myMusic"), g = $("li.sidebar_favorites");
        $("#sidebar_playlists,#sidebar_subscribed_playlists,#sidebar_songs,#sidebar_artists,#sidebar_albums,#sidebar_stations").bind("draginit", function(h, m) {
            var k = $(h.target).closest(".sidebar_link");
            if (k.length === 0)
                return false;
            m.draggedSidebarItem = k;
            m.proxyOffsetX = h.clientX - k.offset().left;
            m.proxyOffsetY = h.clientY - k.offset().top
        }).bind("dragstart", 
        function(h, m) {
            var k = m.draggedSidebarItem.attr("rel"), n, o;
            if (m.draggedSidebarItem.hasClass("sidebar_playlist")) {
                n = "playlist";
                o = GS.Models.Playlist.getOneSynchronous(k)
            } else if (m.draggedSidebarItem.hasClass("sidebar_artist")) {
                n = "artist";
                o = GS.Models.Artist.getOneSynchronous(k)
            } else if (m.draggedSidebarItem.hasClass("sidebar_album")) {
                n = "album";
                o = GS.Models.Album.getOneSynchronous(k)
            } else if (m.draggedSidebarItem.hasClass("sidebar_song")) {
                n = "song";
                o = GS.Models.Song.getOneSynchronous(k)
            } else if (m.draggedSidebarItem.hasClass("sidebar_station")) {
                n = 
                "station";
                o = GS.Models.Station.getOneFromCache(k)
            } else
                return false;
            if (!o)
                return false;
            m.draggedItems = [o];
            m.draggedIemsType = n;
            m.draggedItemsSource = "sidebar";
            m.deleteAction = {label: "CONTEXT_REMOVE_FROM_PINBOARD",method: function() {
                    GS.user.removeFromShortcuts(n, k, true)
                }};
            $.publish("gs.drag.start", m);
            return $('<div class="dragProxy" style="position:absolute; z-index: 99999;"><div class="status"></div></div>').prepend($(m.draggedSidebarItem).clone()).appendTo("body").mousewheel(_.globalDragProxyMousewheel)
        }).bind("drag", 
        function(h, m) {
            m.clientX = h.clientX;
            m.clientY = h.clientY;
            $(m.proxy).css({top: h.clientY - m.proxyOffsetY,left: h.clientX - m.proxyOffsetX});
            var k = false, n = false;
            _.forEach(m.drop, function(o) {
                $.isFunction(o.updateDropOnDrag) && o.updateDropOnDrag(h, m);
                if (!k)
                    if ($(o).within(h.clientX, h.clientY).length > 0)
                        if ($(o).data("ignoreForOverDrop"))
                            n = true;
                        else {
                            n = false;
                            k = true
                        }
            });
            n || (k ? $(m.proxy).addClass("valid").removeClass("invalid") : $(m.proxy).addClass("invalid").removeClass("valid"))
        }).bind("dragend", function(h, m) {
            $(m.proxy).remove();
            GS.getGuts().gaTrackEvent("sidebar", "dragEnd");
            $.publish("gs.drag.end", m)
        }).bind("dropinit", function() {
            this.updateDropOnDrag = function(h, m) {
                c(h, m, m.draggedItemsType === "playlist")
            }
        }).bind("dropstart", function(h, m) {
            if (!m.draggedItems) {
                this.updateDropOnDrag = null;
                return false
            }
            m.draggedItemsType = m.draggedItemsType || _.guessDragType(m.draggedItems);
            if (m.draggedItemsSource == "sidebar") {
                this.updateDropOnDrag = null;
                return false
            }
            if (m.draggedItemsType !== "playlist" || $(this).attr("id") !== "sidebar_playlists") {
                this.updateDropOnDrag = 
                null;
                return false
            }
        }).bind("dropend", function() {
            $("#sidebar .sidebar_link a").removeClass("hover")
        }).bind("drop", function(h, m) {
            if ($("#sidebar").width() !== 0) {
                m.draggedItemsType = m.draggedItemsType || _.guessDragType(m.draggedItems);
                var k, n;
                if (m.draggedItemsType === "playlist")
                    for (k = 0; k < m.draggedItems.length; k++) {
                        n = m.draggedItems[k];
                        n.UserID == GS.user.UserID || n.isSubscribed() ? GS.user.addToShortcuts("playlist", n.PlaylistID, n.PlaylistName, true) : GS.user.addToPlaylistFavorites(n.PlaylistID, true)
                    }
                else {
                    k = $(".playlist", 
                    "#sidebar_playlists").within(h.clientX, h.clientY).attr("rel");
                    n = GS.Models.Playlist.getOneFromCache(k);
                    if (n instanceof GS.Models.Playlist)
                        a(m, n);
                    else
                        k == "new" && a(m, "newPlaylist")
                }
            }
        });
        b.bind("dropinit", function() {
            this.updateDropOnDrag = function(h, m) {
                c(h, m, true)
            }
        }).bind("dropstart", function(h, m) {
            if (!m.draggedItems) {
                this.updateDropOnDrag = null;
                return false
            }
        }).bind("dropend", function() {
            $("#sidebar .sidebar_link a").removeClass("hover")
        }).bind("drop", function(h, m) {
            a(m, "library")
        });
        g.bind("dropinit", function() {
            this.updateDropOnDrag = 
            function(h, m) {
                c(h, m, true)
            }
        }).bind("dropstart", function(h, m) {
            if (!m.draggedItems) {
                this.updateDropOnDrag = null;
                return false
            }
        }).bind("dropend", function() {
            $("#sidebar .sidebar_link a").removeClass("hover")
        }).bind("drop", function(h, m) {
            a(m, "favorites")
        })
    }});
(function() {
    function c(k) {
        if (!b) {
            var n = k.draggedItemsType = k.draggedItemsType || _.guessDragType(k.draggedItems);
            if (n != "user") {
                $("#shortcuts").show();
                if (n == "song" && k.draggedItems.length > 1)
                    n = "manySongs";
                var o = _.orEqual(GS.shareTypes[n], []), q = $("#shortcuts_bar .share_option"), x = $("#shortcuts_share_wrapper"), v = GS.user.isLoggedIn && k.draggedItems.length === 1 && m.indexOf(n) !== -1;
                if (!GS.user.isLoggedIn) {
                    o = o.concat();
                    var A = o.indexOf("email");
                    A != -1 && o.splice(A, 1)
                }
                q.hide();
                if (o.length || v) {
                    x.show();
                    _.forEach(o, function(t) {
                        q.filter("." + 
                        t).show()
                    });
                    v && q.filter(".broadcast").show()
                } else
                    x.hide();
                $("#shortcuts_add_pinboard").toggle(k.draggedItems.length === 1 && h.indexOf(n) !== -1 && k.draggedItemsSource != "sidebar");
                $("#shortcuts_add_favorites").toggle(n === "song");
                $("#shortcuts_add_library").add("#shortcuts_playlists_wrapper").toggle(n !== "station");
                $("#shortcuts_add_wrapper").toggle($("#shortcuts_add").children(":visible").length > 0);
                $("#shortcuts_scroll").height($("#shortcuts_bar").height());
                if (k.deleteAction) {
                    n = $("#shortcuts_trash_label");
                    $("#shortcuts_trash_wrapper").show();
                    n.removeClass("ellipsis");
                    n.localeDataString(k.deleteAction.label, k.deleteAction.labelParams);
                    n.addClass("ellipsis")
                } else
                    $("#shortcuts_trash_wrapper").hide();
                k = $("#shortcuts_scroll .viewport").innerHeight() < $("#shortcuts_scroll .overview").outerHeight() ? 0 : -15;
                $("#shortcuts_bar").stop().animate({right: k}, "fast", function() {
                    if (g)
                        g.update();
                    else {
                        g = $("#shortcuts_scroll").tinyscrollbar();
                        g.find(".viewport").scroll(function() {
                            g.update()
                        })
                    }
                });
                b = true
            }
        }
    }
    function a(k) {
        clearTimeout(k.shortcutsAutoScrollWaitTimeout);
        k.shortcutsAutoScrollWaitTimeout = false;
        k.shortcutsAutoScrollHasWaited = false;
        clearInterval(k.shortcutsAutoScrollInterval);
        k.shortcutsAutoScrollInterval = false
    }
    var b = false, g = false, h = ["song", "playlist", "album", "artist", "station"], m = ["song", "playlist", "album", "artist"];
    GS.Controllers.BaseController.extend("GS.Controllers.ShortcutsController", {onElement: "#shortcuts"}, {playlists: [],playlistsDirty: true,init: function() {
            this.subscribe("gs.drag.start", this.callback("onGlobalDragStart"));
            this.subscribe("gs.drag.end", 
            this.callback("onGlobalDragEnd"));
            this.subscribe("gs.auth.update", this.callback("dirtyPlaylists"));
            this.subscribe("gs.auth.playlists.update", this.callback("dirtyPlaylists"));
            this._super()
        },appReady: function() {
            this.update()
        },update: function() {
            this.element.html(this.view("index"));
            this.beginDragDrop()
        },dirtyPlaylists: function() {
            this.playlistsDirty = true;
            b && this.populatePlaylists()
        },populatePlaylists: function() {
            this.playlists = [];
            GS.user && _.forEach(GS.user.playlists, function(k) {
                this.playlists.push(k)
            }, 
            this);
            this.playlists.sort(function(k, n) {
                var o = k.PlaylistName.toLowerCase(), q = n.PlaylistName.toLowerCase();
                return o == q ? k == n ? 0 : k < n ? -1 : 1 : o < q ? -1 : 1
            });
            $("#shortcuts_playlists").html(this.view("playlists", {playlists: this.playlists}));
            this.playlistsDirty = false
        },beginDragDrop: function() {
            function k(t) {
                return function() {
                    if (t.hasOwnProperty("clientX") && t.clientX < x.offset().left)
                        a(t);
                    else
                        A = setTimeout(k(t), 100)
                }
            }
            function n(t, w) {
                function E() {
                    var H = (new Date).valueOf();
                    if (w.shortcutsAutoScrollHasWaited && (!w.shortcutsAutoScrollLast || 
                    H - w.shortcutsAutoScrollLast >= G)) {
                        w.shortcutsAutoScrollLast = H;
                        $scrollable.scrollTop(Math.max(0, $scrollable.scrollTop() - 41))
                    }
                }
                function I() {
                    var H = (new Date).valueOf();
                    if (w.shortcutsAutoScrollHasWaited && (!w.shortcutsAutoScrollLast || H - w.shortcutsAutoScrollLast >= G)) {
                        w.shortcutsAutoScrollLast = H;
                        $scrollable.scrollTop(Math.min(scrollHeight, $scrollable.scrollTop() + 41))
                    }
                }
                $scrollable = $("#shortcuts_scroll .viewport");
                var D = Math.ceil($scrollable.height() * 0.2), G = 200;
                scrollHeight = $scrollable[0].scrollHeight;
                if (w.shortcutsAutoScrollWaitTimeout)
                    if ($scrollable.offset().top + 
                    D > t.clientY) {
                        E();
                        clearInterval(w.shortcutsAutoScrollInterval);
                        w.shortcutsAutoScrollInterval = setInterval(E, G)
                    } else if ($scrollable.offset().top + $scrollable.height() - D < t.clientY) {
                        I();
                        clearInterval(w.shortcutsAutoScrollInterval);
                        w.shortcutsAutoScrollInterval = setInterval(I, G)
                    } else
                        a(w);
                else
                    w.shortcutsAutoScrollWaitTimeout = setTimeout(function() {
                        w.shortcutsAutoScrollHasWaited = true;
                        w.shortcutsAutoScrollWaitTimeout = false
                    }, 500)
            }
            function o(t) {
                var w = [], E, I;
                t.draggedItemsType = t.draggedItemsType || _.guessDragType(t.draggedItems);
                switch (t.draggedItemsType) {
                    case "song":
                        for (E = 0; E < t.draggedItems.length; E++)
                            w.push(t.draggedItems[E].SongID);
                        var D, G = [], H = [];
                        if ($("#grid").controller()) {
                            var B = $("#grid").controller().dataView.rows;
                            $('#grid .slick-row.selected[id!="showQueue"]').each(function(F, K) {
                                D = parseInt($(K).attr("row"), 10);
                                if (!isNaN(D)) {
                                    G.push(D + 1);
                                    var N = B[D].ppVersion;
                                    N && H.push(N)
                                }
                            })
                        }
                        t = {ranks: G,songIDs: w};
                        if (H.length > 0)
                            t.ppVersions = H.join();
                        GS.getGuts().logMultiSongDrag("OLSongsDraggedToShortcuts", t);
                        break;
                    case "album":
                        var L = 
                        function(F) {
                            F.sort(GS.Models.Album.defaultSongSort);
                            for (I = 0; I < F.length; I++)
                                w.push(F[I].SongID)
                        };
                        for (E = 0; E < t.draggedItems.length; E++)
                            t.draggedItems[E].getSongs(L, null, {async: false});
                        break;
                    case "artist":
                        L = function(F) {
                            F.sort(GS.Models.Artist.defaultSongSort);
                            for (I = 0; I < F.length; I++)
                                w.push(F[I].SongID)
                        };
                        for (E = 0; E < t.draggedItems.length; E++)
                            t.draggedItems[E].getSongs(L, null, {async: false});
                        break;
                    case "playlist":
                        L = function(F) {
                            for (I = 0; I < F.length; I++)
                                w.push(F[I].SongID)
                        };
                        for (E = 0; E < t.draggedItems.length; E++)
                            t.draggedItems[E].getSongs(L, 
                            null, {async: false});
                        break;
                    case "user":
                        L = function(F) {
                            for (I = 0; I < F.length; I++)
                                w.push(F[I].SongID)
                        };
                        for (E = 0; E < t.draggedItems.length; E++)
                            t.draggedItems[E].getFavoritesByType("Song", L, null, {async: false});
                        break;
                    default:
                        console.error("shortcut drop, invalid drag type", t, t.draggedItemsType)
                }
                return w
            }
            function q(t, w) {
                if (w === "library")
                    GS.user.addToLibrary(t, true);
                else if (w === "favorites")
                    for (i = 0; i < t.length; i++)
                        GS.user.addToSongFavorites(t[i]);
                else if (w === "newPlaylist")
                    GS.getLightbox().open("newPlaylist", t);
                else
                    w instanceof 
                    GS.Models.Playlist ? w.addSongs(t, null, true) : console.error("shortcut drop, invalid thing", w)
            }
            var x = $("#shortcuts"), v = $("#shortcuts_bar"), A = false;
            x.data("ignoreForOverDrop", true).bind("dropinit", function() {
                this.updateDropOnDrag = function(t, w) {
                    if (!(v.within(t.clientX, t.clientY).length <= 0)) {
                        var E = v.find(".shortcuts_link a");
                        E.removeClass("hover");
                        E = E.within(t.clientX, t.clientY);
                        E.addClass("hover");
                        E.length ? $(w.proxy).addClass("valid").removeClass("invalid") : $(w.proxy).addClass("invalid").removeClass("valid")
                    }
                    n(t, 
                    w)
                }
            }).bind("dropend", function(t, w) {
                w.isOverShortcuts = false;
                clearTimeout(A);
                A = setTimeout(k(w), 100)
            }).bind("dropstart", function(t, w) {
                w.isOverShortcuts = true;
                clearTimeout(A);
                if (!w.draggedItems) {
                    this.updateDropOnDrag = null;
                    return false
                }
                w.draggedItemsType = w.draggedItemsType || _.guessDragType(w.draggedItems)
            }).bind("drop", function(t, w) {
                w.draggedItemsType = w.draggedItemsType || _.guessDragType(w.draggedItems);
                var E = v.find(".shortcuts_link").within(t.clientX, t.clientY).last(), I = E.attr("rel");
                if (E.is(".share_option"))
                    a: {
                        w.draggedItemsType = 
                        w.draggedItemsType || _.guessDragType(w.draggedItems);
                        I = {service: I};
                        switch (w.draggedItemsType) {
                            case "song":
                                I.id = o(w);
                                if (I.id.length == 1) {
                                    I.id = I.id[0];
                                    I.type = "song"
                                } else
                                    I.type = "manySongs";
                                break;
                            case "playlist":
                                I.id = w.draggedItems[0].PlaylistID;
                                I.type = "playlist";
                                break;
                            case "album":
                                I.id = w.draggedItems[0].AlbumID;
                                I.type = "album";
                                break;
                            case "artist":
                                I.id = w.draggedItems[0].ArtistID;
                                I.type = "artist";
                                break;
                            default:
                                console.error("shortcut share drop, invalid type", w.draggedItemsType);
                                break a
                        }
                        I.service != "widget" && 
                        I.type != "manySongs" ? GS.getLightbox().open("share", I) : GS.getLightbox().open("widget", I)
                    }
                else if (E.is(".add_option"))
                    if (E.is(".pinboard")) {
                        E = w.draggedItems[0];
                        switch (w.draggedItemsType) {
                            case "playlist":
                                I = E.PlaylistID;
                                E = E.PlaylistName;
                                break;
                            case "song":
                                I = E.SongID;
                                E = E.SongName;
                                break;
                            case "album":
                                I = E.AlbumID;
                                E = E.AlbumName;
                                break;
                            case "artist":
                                I = E.ArtistID;
                                E = E.ArtistName;
                                break;
                            case "station":
                                I = E.StationID;
                                E = "";
                                break;
                            default:
                                return
                        }
                        GS.user.addToShortcuts(w.draggedItemsType, I, E)
                    } else
                        q(o(w), I);
                else if (E.is(".playlist_option")) {
                    E = 
                    GS.Models.Playlist.getOneFromCache(I);
                    if (E instanceof GS.Models.Playlist)
                        q(o(w), E);
                    else
                        I == "new" && q(o(w), "newPlaylist")
                } else if (E.is(".trash_option"))
                    w.deleteAction && $.isFunction(w.deleteAction.method) && w.deleteAction.method.call();
                else
                    return;
                GS.getGuts().gaTrackEvent("shortcuts", "dropSuccess")
            })
        },onGlobalDragStart: function(k) {
            this.playlistsDirty && this.populatePlaylists();
            c(k)
        },onGlobalDragEnd: function(k) {
            if (b) {
                $("#shortcuts_bar").stop().css({right: -215}).find(".shortcuts_link a").removeClass("hover");
                $("#shortcuts").hide();
                b = false
            }
            a(k)
        }})
})();
(function() {
    function c(k) {
        var n = {42: true,224: true,61: true,98: true,96: true,182: true,219: true,67: true,85: true,94: true,87: true,162: true,110: true,176: true,49: true,169: true,166: true,14: true,174: true,22: true,59: true,91: true,223: true,38: true};
        if (GS.user.subscription.canListenUninterrupted())
            return m = false;
        if (!b || !m || !n[gsConfig.country.ID])
            return false;
        k || setTimeout(function() {
            GS.player.pauseSong()
        }, 10);
        if (GS.getLightbox().curType == "interruptListen")
            return false;
        h = 4;
        GS.getLightbox().close("interactionTime");
        GS.getLightbox().open("interruptListen", {notCloseable: true});
        GS.store.set("GS.videos.lastLoaded", (new Date).getTime());
        return true
    }
    var a, b = true, g = new Date, h = 4, m = true;
    $.browser.mozilla || $.browser.opera ? $("body").bind("mousemove", function() {
        GS.user.subscription.canListenUninterrupted() || (g = new Date)
    }) : $("body").bind("mousemove", function() {
        g = new Date
    });
    GS.Controllers.BaseController.extend("GS.Controllers.PlayerController", {onElement: "#footer"}, {REPEAT_NONE: 0,REPEAT_ALL: 1,REPEAT_ONE: 2,repeatStates: {none: 0,
            all: 1,one: 2},INDEX_DEFAULT: -1,INDEX_NEXT: -2,INDEX_LAST: -3,INDEX_REPLACE: -4,PLAY_STATUS_NONE: 0,PLAY_STATUS_INITIALIZING: 1,PLAY_STATUS_LOADING: 2,PLAY_STATUS_PLAYING: 3,PLAY_STATUS_PAUSED: 4,PLAY_STATUS_BUFFERING: 5,PLAY_STATUS_FAILED: 6,PLAY_STATUS_COMPLETED: 7,PLAY_CONTEXT_UNKNOWN: "unknown",PLAY_CONTEXT_SONG: "song",PLAY_CONTEXT_ALBUM: "album",PLAY_CONTEXT_ARTIST: "artist",PLAY_CONTEXT_PLAYLIST: "playlist",PLAY_CONTEXT_RADIO: "radio",PLAY_CONTEXT_SEARCH: "search",PLAY_CONTEXT_POPULAR: "popular",PLAY_CONTEXT_FEED: "feed",
        PLAY_CONTEXT_SIDEBAR: "sidebar",PLAY_CONTEXT_EXPLORE: "explore",PLAY_CONTEXT_USER: "user",QUEUE_ADD_LIMIT: 1E3,crossfadeAmount: 5E3,crossfadeEnabled: false,playPauseFade: false,prefetchEnabled: true,lowerQuality: false,embedTimeout: 0,playlistName: $.localize.getString("NOW_PLAYING"),currentSongString: new GS.Models.DataString,songCountString: new GS.Models.DataString,numSongs: 0,player: null,isPlaying: false,isPaused: false,isLoading: false,repeatMode: null,autoplayEnabled: null,activeSong: null,currentSongs: null,nextSongToPlay: null,
        nullStatus: {activeSong: {},bytesLoaded: 0,bytesTotal: 0,duration: 0,position: 0,status: 0},SCRUB_LOCK: false,QUEUE_SIZES: {s: {width: 144,activeWidth: 144,className: "small"},m: {width: 86,activeWidth: 86,className: "medium"},l: {width: 106,activeWidth: 106,className: "large"}},queueSize: "m",songWidth: 86,activeSongWidth: 86,queueClosed: false,queueClosedByUser: false,gsQueue: null,allowRestore: true,lastZoomLevel: 0,videoModeEnabled: false,powerModeEnabled: false,exists: false,init: function() {
            a = this;
            var k = location.hash.match(/^#!?\/s\/(.*)\/?/);
            if (k) {
                k = k[0].replace(/\?([^#]*)$/, "");
                this.allowRestore = false;
                this.songToPlayOnReadyToken = k.split("/")[3]
            }
            this.beginDragDrop();
            this.addQueueSeek();
            this.addShortcuts();
            this.addVolumeSlider();
            this.addQueueResize();
            this.queueSize = _.orEqual(GS.store.get("queueSize"), $(window).height() > 700 ? "m" : "s");
            this.songWidth = this.QUEUE_SIZES[this.queueSize].width;
            this.activeSongWidth = this.QUEUE_SIZES[this.queueSize].activeWidth;
            this.setQueue("off", false);
            this.subscribe("gs.auth.update", this.callback(this.userChange));
            this.subscribe("gs.auth.song.update", this.callback(this.songChange));
            this.subscribe("gs.auth.library.update", this.callback(this.libraryChange));
            this.subscribe("gs.auth.favorites.songs.update", this.callback(this.libraryChange));
            this.subscribe("gs.settings.local.update", this.callback(this.updateWithLocalSettings));
            this.subscribe("gs.song.play", this.callback(this.eventPlaySong));
            this.subscribe("gs.album.play", this.callback(this.eventPlayAlbum));
            this.subscribe("gs.playlist.play", this.callback(this.eventPlayPlaylist));
            this.subscribe("gs.station.play", this.callback(this.eventPlayStation));
            this.subscribe("gs.app.resize", this.callback(this.resize));
            this.subscribe("gs.swf.invalidMethod", this.callback(this.swfDied));
            this.exists = true;
            GS.Models.Feature.register("videoMode", {FeatureID: "videoMode",TextKey: "VIDEO_MODE",ActivateCallback: this.callback("enableVideoMode"),Type: "ACTIVATED"});
            GS.Models.Feature.register("visualizers", {FeatureID: "visualizers",TextKey: "VISUALIZERS",ActivateCallback: this.callback(function() {
                    GS.getLightbox().open("visualizer", 
                    {showPlayerControls: true})
                }),Type: "ACTIVATED"});
            GS.Models.Feature.register("powerHour", {FeatureID: "powerHour",TextKey: "POWER_HOUR_MODE",ActivateCallback: this.callback("togglePowerMode"),IsActiveCallback: this.callback(function() {
                    return this.powerModeEnabled
                })});
            this._super()
        },appReady: function() {
            if (swfobject.hasFlashPlayerVersion("9.0.0"))
                this.embedTimeout = setTimeout(this.callback(this.onEmbedTimeout), 1E4);
            else
                setTimeout(function() {
                    GS.getLightbox().open({type: "noFlash",notCloseable: true,view: {header: "POPUP_NO_FLASH_TITLE",
                            message: "POPUP_NO_FLASH_MSG",buttonsRight: [{label: "POPUP_REFRESH_GROOVESHARK",className: "submit"}],buttonsLeft: [{label: "POPUP_INSTALL_FLASH",href: "http://get.adobe.com/flashplayer/",className: "install"}]},callbacks: {".submit": function(k) {
                                k.stopImmediatePropagation();
                                window.location.reload(true)
                            },".install": function() {
                                $(this).attr("target", "_blank")
                            }}})
                }, 500)
        },resize: function() {
            a.updateQueueWidth()
        },setQueue: function(k, n, o) {
            n = _.orEqual(n, true);
            var q = k === "s" ? a.smallQueueSongToHtml : a.queueSongToHtml(k), 
            x = a.getCurrentQueue(), v = _.defined(a.queue) && a.queue.songs ? a.queue.songs : [], A = 0, t = (k != a.queueSize || a.queueClosed) && k != "off", w = a.queueClosed;
            o = 0;
            $("#queue").height("auto");
            if (a.QUEUE_SIZES[k]) {
                a.queueSize = k;
                if (n) {
                    a.queueClosed = false;
                    a.queueClosedByUser = false
                }
                a.songWidth = a.QUEUE_SIZES[k].width;
                a.activeSongWidth = a.QUEUE_SIZES[k].activeWidth;
                GS.store.set("queueSize", k)
            } else if (k == "off") {
                a.queueClosed = true;
                a.queueClosedByUser = n
            }
            if (x && x.activeSong)
                A = x.activeSong.index;
            if (t) {
                if (_.defined(a.gsQueue.lastLeftmostOnDragStart)) {
                    o = 
                    a.gsQueue.lastLeftmostOnDragStart;
                    a.gsQueue.lastLeftmostOnDragStart = null
                } else
                    o = a.gsQueue.calcIndex($("#queue_list_window").scrollLeft());
                $("#queue").attr("class", "size-" + a.queueSize);
                a.gsQueue.updateSettings({activeItemWidth: a.activeSongWidth,itemWidth: a.songWidth,itemRenderer: q})
            } else if (!a.gsQueue)
                a.gsQueue = $("#queue").attr("class", "size-" + a.queueSize).gsQueue({activeItemWidth: a.activeSongWidth,itemWidth: a.songWidth,itemRenderer: q,activeIndex: A}, v);
            if (a.queueClosed) {
                a.gsQueue.setDisabled(true);
                $("#queue").height(0);
                $("#player_queue_sizer").removeClass("small medium large").addClass("closed")
            } else {
                a.gsQueue.setDisabled(false);
                t && setTimeout(function() {
                    if (w)
                        a.gsQueue.moveTo(A, false, false);
                    else
                        o == 0 ? a.gsQueue.moveTo(A, false, false) : a.gsQueue.moveTo(o, false, true);
                    a.gsQueue.render(null, true)
                }, 121);
                $("#player_queue_sizer").removeClass("closed small medium large").addClass(this.QUEUE_SIZES[a.queueSize].className)
            }
            $(window).resize()
        },userChange: function() {
            this.updateWithLocalSettings();
            if (GS.user.subscription.canListenUninterrupted())
                m = 
                false
        },libraryChange: function() {
            var k = {};
            if ((k = a.player ? a.player.getCurrentQueue() : {activeSong: false,songs: []}) && k.songs.length) {
                var n = GS.Models.Song.wrapQueue(k.songs);
                a.gsQueue.setItems(n, true);
                a.updateQueueDetails()
            }
            if (k.activeSong) {
                k = GS.Models.Song.wrapQueue([k.activeSong])[0];
                a.updateSongOnPlayer(k, true, true)
            }
        },playerExists: function() {
            return GS.isReady
        },playerReady: function(k) {
            var n = new Date, o = n.getTime();
            if (!a.isReady && k.interruptionExpireTime && b) {
                n.setTime(k.interruptionExpireTime);
                if (n.getTime() > 
                o)
                    b = false
            }
            if (!a.isReady && b) {
                n = {42: true,224: true,61: true,98: true,96: true,182: true,219: true,67: true,85: true,94: true};
                var q = {87: true,162: true,49: true,169: true,174: true,22: true}, x = {110: true,176: true,166: true,14: true,59: true,91: true}, v = {223: true,38: true};
                if ($.browser.msie && parseInt($.browser.version) < 8 && window.attachEvent)
                    m = false;
                else if (n[gsConfig.country.ID] && (!GS.player.player.getNumVisitedDays || GS.player.player.getNumVisitedDays() <= 5) && (!GS.player.player.getNumPlayedSongs || GS.player.player.getNumPlayedSongs() <= 
                20))
                    m = false;
                else if (q[gsConfig.country.ID] && (!GS.player.player.getNumVisitedDays || GS.player.player.getNumVisitedDays() <= 3) && (!GS.player.player.getNumPlayedSongs || GS.player.player.getNumPlayedSongs() <= 20))
                    m = false;
                else if (x[gsConfig.country.ID] && (!GS.player.player.getNumVisitedDays || GS.player.player.getNumVisitedDays() <= 7) && (!GS.player.player.getNumPlayedSongs || GS.player.player.getNumPlayedSongs() <= 20))
                    m = false;
                else if (v[gsConfig.country.ID] && (!GS.player.player.getNumVisitedDays || GS.player.player.getNumVisitedDays() <= 
                5) && (!GS.player.player.getNumPlayedSongs || GS.player.player.getNumPlayedSongs() <= 60))
                    m = false;
                else if (!n[gsConfig.country.ID] && !q[gsConfig.country.ID] && !x[gsConfig.country.ID] && !v[gsConfig.country.ID])
                    m = false;
                if (m)
                    if ((n = GS.store.get("GS.videos.lastLoaded")) && o - n < 3E5)
                        m = false
            }
            a.isReady = true;
            if (!GS.isReady)
                return false;
            return a.playerSetup(k)
        },playerSetup: function(k) {
            k || (k = a.player.getEverything());
            $.publish("gs.player.ready");
            a.player.setErrorCallback("GS.Controllers.PlayerController.instance().playerError");
            a.player.setPlaybackStatusCallback("GS.Controllers.PlayerController.instance().playerStatus");
            a.player.setPropertyChangeCallback("GS.Controllers.PlayerController.instance().propertyChange");
            a.player.setQueueChangeCallback("GS.Controllers.PlayerController.instance().queueChange");
            a.player.setSongPropertyChangeCallback("GS.Controllers.PlayerController.instance().songChange");
            a.player.setChatServers(gsConfig.chatServersWeighted ? gsConfig.chatServersWeighted : {});
            var n = a.player.setZoomChangeCallback("GS.Controllers.PlayerController.instance().onZoomChange");
            a.onZoomChange(n);
            GS.service.verifyControllerKey(k.verifyKey);
            $("#volumeSlider").slider("value", a.player.getVolume());
            a.updateWithLocalSettings();
            clearTimeout(a.embedTimeout);
            a.embedTimeout = null;
            GS.getLightbox && GS.getLightbox().isOpen && GS.getLightbox().curType == "swfTimeout" && GS.getLightbox().close();
            this.songToPlayOnReadyToken && GS.Models.Song.getSongFromToken(this.songToPlayOnReadyToken, function(o) {
                o && o.validate() && a.addSongAndPlay(o.SongID)
            }, null);
            return true
        },onEmbedTimeout: function() {
            a.player || 
            GS.getLightbox().open("swfTimeout", {notCloseable: true})
        },swfDied: function() {
            GS.getLightbox().open({type: "swfCrash",view: {header: "POPUP_SWF_CRASH_TITLE",message: "POPUP_SWF_CRASH_MESSAGE",buttonsLeft: [{label: "POPUP_SWF_CRASH_RELOAD",className: "reload"}]},callbacks: {".reload": function() {
                        window.location.reload(true)
                    }}})
        },queueIsRestorable: function() {
            this.getCurrentQueue(true);
            if (GS.user && GS.user.settings.local.restoreQueue && this.allowRestore)
                this.restoreQueue();
            else {
                $("#queue_clear_button").addClass("undo").attr("title", 
                $.localize.getString("QUEUE_RESTORE_QUEUE")).attr("data-translate-title", "QUEUE_RESTORE_QUEUE").show();
                $.publish("gs.notification.restorequeue")
            }
        },onZoomChange: function(k) {
            var n = window.GS && GS.airbridge ? GS.airbridge : GS.Controllers.AirbridgeController.instance();
            if (k && !n.isDesktop) {
                console.warn("ZOOM CHANGED, NOT ZERO", k);
                alert($.localize.getString("ZOOM_ALERT"));
                window._gaq && window._gaq.push && window._gaq.push(["_trackPageview", "#!/lb/zoom"])
            } else
                k !== this.lastZoomLevel && $(window).resize();
            this.lastZoomLevel = 
            k
        },expireSWFService: function() {
            a.player && a.player.expireService()
        },storeQueue: function() {
            a.player && a.player.storeQueue()
        },playerError: function(k) {
            console.log("player.playererror", k);
            switch (k.type) {
                case "errorAddingSongs":
                    console.log("player. failed to add songs: ", k.details.songs, k.details.reason);
                    k.details.reason == "tooManySongs" ? $.publish("gs.notification", {type: "notice",message: $.localize.getString("ERROR_TOO_MANY_SONGS")}) : $.publish("gs.notification", {type: "error",message: $.localize.getString("ERROR_ADDING_SONG") + 
                        ": " + k.details.reason});
                    break;
                case "playbackError":
                    console.log("player. error playing song", k.details.song, k.details.reason, k.details.errorDetail);
                    k.details.reason === "unknownHasNext" ? $.publish("gs.notification", {type: "error",message: $.localize.getString("ERROR_HASNEXT_MESSAGE")}) : $.publish("gs.notification", {type: "error",message: $.localize.getString("ERROR_PLAYING_SONG")});
                    break;
                case "autoplayFailed":
                    console.log("player. error fetching autoplay song", k.details.reason);
                    if (k.details.reason === "unknownHasNext")
                        $.publish("gs.notification", 
                        {type: "error",message: $.localize.getString("ERROR_HASNEXT_MESSAGE")});
                    else
                        k.details.reason === "noRecommendations" ? this.showRadioStations() : $.publish("gs.notification", {type: "error",message: $.localize.getString("ERROR_FETCHING_RADIO")});
                    break;
                case "autoplayVoteError":
                    console.log("player. error voting song", k.details.song);
                    $.publish("gs.notification", {type: "error",message: $.localize.getString("ERROR_VOTING_SONG")});
                    break;
                case "serviceError":
                    console.log("player. service error", k.details);
                    $.publish("gs.notification", 
                    {type: "error",message: $.localize.getString("ERROR_FETCHING_INFO")});
                    break
            }
            k.details.errorDetail ? GS.getGuts().gaTrackEvent("playerError", k.type, k.details.reason + ", " + k.details.errorDetail) : GS.getGuts().gaTrackEvent("playerError", k.type, k.details.reason)
        },$seekBar: $("#player_seeking_back"),$seekBuffer: $("#player_seeking_buffer"),$seekProgress: $("#player_seeking_progress"),$seekScrubber: $("#player_seeking_scrubber"),lastStatus: false,lastPlayedQueueSongID: false,powerHourTimeout: 6E4,powerHourSetTimeout: null,
        playerStatus: function(k) {
            k = k || this.nullStatus;
            if (!this.currentSong || !k.activeSong || this.currentSong && k.activeSong && this.currentSong.queueSongID !== k.activeSong.queueSongID) {
                if (k.status == a.PLAY_STATUS_PLAYING)
                    return;
                k.activeSong = GS.Models.Song.wrapQueue([k.activeSong ? k.activeSong : {}])[0];
                this.updateSongOnPlayer(k.activeSong, true)
            } else
                k.activeSong = this.currentSong;
            var n = Math.min(1, k.bytesLoaded / k.bytesTotal), o = Math.min(1, k.position / k.duration), q = this.$seekBar.width();
            n = Math.min(q, n * 100);
            var x = Math.min(q, 
            o * 100);
            o = Math.min(q, Math.max(0, q * o));
            n = isNaN(n) ? 0 : n;
            x = isNaN(x) ? 0 : x;
            o = isNaN(o) ? 0 : o;
            this.$seekBuffer.width(n + "%");
            this.$seekProgress.width(x + "%");
            this.SCRUB_LOCK || this.$seekScrubber.css("left", o);
            if (k.duration > 0) {
                k.position == 0 ? $("#player_elapsed").text("00:00") : $("#player_elapsed").text(_.millisToMinutesSeconds(k.position, true));
                k.duration == 0 ? $("#player_duration").text("00:00") : $("#player_duration").text(_.millisToMinutesSeconds(k.duration, true))
            } else {
                $("#player_elapsed").text("00:00");
                $("#player_duration").text("00:00")
            }
            k.currentStreamServer && 
            k.currentStreamServer !== this.lastStatus.currentStreamServer && $.publish("gs.player.streamserver", {streamServer: k.currentStreamServer});
            if (this.powerModeEnabled && k.position > this.powerHourTimeout)
                if (!this.powerHourSetTimeout) {
                    this.nextSong();
                    this.powerHourSetTimeout = setTimeout(this.callback(function() {
                        this.powerHourSetTimeout = null
                    }), 1500)
                }
            o = this.autoplayEnabled ? "forceLogEvent" : "logEvent";
            q = k.activeSong ? k.activeSong.SongID : false;
            switch (k.status) {
                case a.PLAY_STATUS_NONE:
                    this.lastStatus !== k.status && GS.getGuts()[o]("playStatusUpdate", 
                    {playStatus: "NONE",activeSong: q,streamServer: k.currentStreamServer});
                    a.isPlaying = false;
                    a.isPaused = false;
                    a.isLoading = false;
                    a.seek.slider("disable");
                    $("#player_play_pause").addClass("play").removeClass("pause").removeClass("buffering");
                    $("#queue_list li.queue-item.queue-item-active a.play").addClass("paused");
                    $.publish("gs.player.stopped", k.activeSong);
                    break;
                case a.PLAY_STATUS_INITIALIZING:
                    a.isPlaying = true;
                    a.isPaused = false;
                    a.isLoading = true;
                    if (this.lastStatus !== k.status) {
                        GS.getGuts()[o]("playStatusUpdate", 
                        {playStatus: "INITIALIZING",activeSong: q,streamServer: k.currentStreamServer});
                        this.lastStatus == a.PLAY_STATUS_COMPLETED && GS.getGuts().gaTrackEvent("player", "continueInterrupted", k.currentSongID)
                    }
                    if (GS.airbridge && GS.airbridge.isDesktop && !GS.user.subscription.canUseDesktop() || gsConfig.isPreview && !GS.user.subscription.isPremium() && GS.user.UserID % 5 != 0) {
                        this.stopSong();
                        GS.getLightbox().open("login", {premiumRequired: true,notCloseable: gsConfig.isPreview || GS.airbridge && GS.airbridge.isDesktop})
                    }
                    c(true);
                    break;
                case a.PLAY_STATUS_LOADING:
                    if (this.lastStatus !== k.status) {
                        GS.getGuts()[o]("playStatusUpdate", {playStatus: "LOADING",activeSong: q,streamServer: k.currentStreamServer});
                        a.isPlaying = true;
                        a.isPaused = false;
                        a.isLoading = true;
                        a.updateSongOnPlayer(k.activeSong);
                        $("#player_play_pause").is(".buffering") || $("#player_play_pause").removeClass("play").removeClass("pause").addClass("buffering");
                        GS.getGuts().gaTrackEvent("player", "loading", k.currentStreamServer);
                        a.lastLoadingQueueSongID = k.activeSong ? k.activeSong.queueSongID : 
                        false;
                        a.lastLoadingTime = (new Date).getTime()
                    }
                    c(true);
                    $("#queue_list li.queue-item.queue-item-active a.play").removeClass("paused");
                    break;
                case a.PLAY_STATUS_PLAYING:
                    if (this.lastStatus !== k.status || this.lastPlayedQueueSongID !== k.activeSong.queueSongID) {
                        GS.getGuts()[o]("playStatusUpdate", {playStatus: "PLAYING",activeSong: q,streamServer: k.currentStreamServer});
                        a.isPlaying = true;
                        a.isPaused = false;
                        a.isLoading = false;
                        a.seek.slider("enable");
                        $("#player_play_pause").is(".pause") || $("#player_play_pause").removeClass("play").addClass("pause").removeClass("buffering");
                        $.publish("gs.player.playing", k);
                        if (k.activeSong && (this.lastPlayedQueueSongID !== k.activeSong.queueSongID || this.repeatMode == a.REPEAT_ONE && this.lastStatus == a.PLAY_STATUS_LOADING)) {
                            c();
                            this.lastStatus == a.PLAY_STATUS_COMPLETED && GS.getGuts().gaTrackEvent("player", "continueNextSong", q);
                            GS.getGuts().gaTrackEvent("player", "play", q);
                            this.trackAutoplayEvent("play");
                            this.updateSongOnPlayer(k.activeSong, true);
                            if (k.duration)
                                k.activeSong.playerDuration = k.duration;
                            $.publish("gs.player.nowplaying", k.activeSong);
                            $("#queue_list .queueSong a.play[rel=" + this.lastPlayedQueueSongID + "]").addClass("paused");
                            this.lastPlayedQueueSongID = k.activeSong ? k.activeSong.queueSongID : false
                        }
                        this.lastStatus == a.PLAY_STATUS_LOADING ? GS.getGuts().gaTrackEvent("player", "loadingTime", k.currentStreamServer, (new Date).getTime() - this.lastLoadingTime) : GS.getGuts().gaTrackEvent("player", "loadingTime", k.currentStreamServer, 0)
                    }
                    if (this.pauseNextQueueSongID && k.activeSong && this.pauseNextQueueSongID === k.activeSong.queueSongID) {
                        this.pauseNextQueueSongID = 
                        false;
                        setTimeout(this.callback(function() {
                            this.pauseSong()
                        }), 10)
                    }
                    $("#queue_list li.queue-item.queue-item-active a.play").removeClass("paused");
                    $.publish("gs.player.playing.continue", k);
                    if (k.position % 10 < 1)
                        if (!GS.user.subscription.canListenUninterrupted() && b)
                            if (new Date - g > 36E5) {
                                h = 4;
                                GS.getLightbox().open("interactionTime")
                            }
                    break;
                case a.PLAY_STATUS_PAUSED:
                    if (this.lastStatus !== k.status) {
                        GS.getGuts()[o]("playStatusUpdate", {playStatus: "PAUSED",activeSong: q,streamServer: k.currentStreamServer});
                        a.isPlaying = 
                        false;
                        a.isPaused = true;
                        a.isLoading = false;
                        $("#player_play_pause").is(".play") || $("#player_play_pause").addClass("play").removeClass("pause").removeClass("buffering");
                        $.publish("gs.player.paused", k.activeSong)
                    }
                    $("#queue_list li.queue-item.queue-item-active a.play").addClass("paused");
                    break;
                case a.PLAY_STATUS_BUFFERING:
                    this.lastStatus !== k.status && GS.getGuts()[o]("playStatusUpdate", {playStatus: "BUFFERING",activeSong: q,streamServer: k.currentStreamServer});
                    a.isPlaying = true;
                    a.isPaused = false;
                    a.isLoading = true;
                    $("#player_play_pause").is(".buffering") || $("#player_play_pause").removeClass("play").removeClass("pause").addClass("buffering");
                    $("#queue_list li.queue-item.queue-item-active a.play").removeClass("paused");
                    break;
                case a.PLAY_STATUS_FAILED:
                    this.lastStatus !== k.status && GS.getGuts()[o]("playStatusUpdate", {playStatus: "FAILED",activeSong: q,streamServer: k.currentStreamServer});
                    a.isPlaying = false;
                    a.isPaused = false;
                    a.isLoading = false;
                    a.seek.slider("disable");
                    $("#player_play_pause").addClass("play").removeClass("pause").removeClass("buffering");
                    $("#queue_list li.queue-item.queue-item-active a.play").addClass("paused");
                    break;
                case a.PLAY_STATUS_COMPLETED:
                    this.lastStatus !== k.status && GS.getGuts()[o]("playStatusUpdate", {playStatus: "COMPLETED",activeSong: q,streamServer: k.currentStreamServer});
                    a.isPlaying = false;
                    a.isPaused = false;
                    a.isLoading = false;
                    a.seek.slider("disable");
                    $("#player_play_pause").addClass("play").removeClass("pause").removeClass("buffering");
                    $("#queue_list li.queue-item.queue-item-active a.play").addClass("paused");
                    a.$seekBuffer.width("0%");
                    a.$seekProgress.width("0%");
                    a.$seekScrubber.css("left", 0);
                    $.publish("gs.player.stopped", k.activeSong);
                    $.publish("gs.player.completed", k.activeSong);
                    break
            }
            this.lastStatus !== k.status && $.publish("gs.player.playstatus.changed", k);
            this.lastStatus = k.status;
            $.publish("gs.player.playstatus", k)
        },pauseNextQueueSongID: false,pauseNextSong: function() {
            var k = this.getCurrentQueue(true);
            this.pauseNextQueueSongID = k && k.nextSong && k.nextSong.queueSongID ? k.nextSong.queueSongID : false
        },propertyChange: function(k) {
            if (k.isMuted) {
                $("#player_volume").addClass("muted");
                $("#volumeSlider").slider("value", 0)
            } else {
                $("#player_volume").removeClass("muted");
                $("#volumeSlider").slider("value", k.volume)
            }
            if (k.crossfadeEnabled) {
                $("#player_crossfade").addClass("active");
                this.crossfadeEnabled = true
            } else {
                $("#player_crossfade").removeClass("active");
                this.crossfadeEnabled = false
            }
        },queueChange: function(k) {
            var n = k.fullQueue;
            if (a.player)
                n.hasRestoreQueue = a.player.getQueueIsRestorable();
            a.queue = false;
            switch (k.type) {
                case "queueReset":
                    n.activeSong = n.activeSong ? GS.Models.Song.wrapQueue([n.activeSong])[0] : 
                    null;
                    n.activeSong && this.updateSongOnPlayer(n.activeSong, true, a.currentSong && a.currentSong.queueSongID == n.activeSong.queueSongID);
                    n.songs = GS.Models.Song.wrapQueue(n.songs);
                    a.queue = n;
                    a.updateQueueDetails(n);
                    a.updateQueueSongs(n);
                    if (k.details.hasOwnProperty("autoplayEnabled"))
                        if (k.details.autoplayEnabled == true) {
                            GS.player.getCurrentQueue();
                            GS.getGuts().forceLogEvent("autoplayOn", {tagID: k.details.currentAutoplayTagID});
                            GS.getGuts().beginContext({autoplay: k.details.currentAutoplayTagID})
                        } else
                            GS.getGuts().endContext("autoplay");
                    break;
                case "propertyChange":
                    if (k.details.hasOwnProperty("autoplayEnabled"))
                        if (k.details.autoplayEnabled == true) {
                            n = a.getCurrentQueue().songs;
                            var o = {tagID: k.fullQueue.currentAutoplayTagID};
                            if (n) {
                                for (var q = "", x = 0; x < n.length; x++)
                                    q = x == 0 ? n[x].SongID : q + "," + n[x].SongID;
                                o.seedSongs = q
                            }
                            GS.getGuts().forceLogEvent("autoplayOn", o);
                            GS.getGuts().beginContext({autoplay: k.fullQueue.currentAutoplayTagID,autoplaySeedSongs: q})
                        } else
                            GS.getGuts().handleAutoplayOff();
                    a.updateQueueDetails();
                    break;
                case "contentChange":
                    a.gsQueue.setActive(a.getCurrentQueue().activeSong.index, 
                    false);
                    a.gsQueue.setItems(a.getCurrentQueue().songs);
                    a.updateQueueWidth();
                    a.updateQueueDetails();
                    break
            }
            $.publish("gs.player.queue.change")
        },songChange: function(k) {
            var n = ["parentQueueID", "queueSongID", "autoplayVote", "source", "sponsoredAutoplayID"], o = a.player ? a.player.getCurrentQueue() : {activeSong: false}, q, x, v, A, t = true;
            k instanceof GS.Models.Song || (k = GS.Models.Song.wrapQueue([k])[0]);
            v = o.songs;
            for (q = 0; A = v[q]; q++)
                if (A.SongID == k.SongID)
                    for (x in k)
                        if (k.hasOwnProperty(x) && A[x] != k[x] && (A.queueSongID === k.queueSongID || 
                        n.indexOf(x) == -1)) {
                            A[x] = k[x];
                            t = false
                        }
            if (!t) {
                n = GS.Models.Song.wrapQueue(v);
                a.gsQueue.setItems(n, true)
            }
            a.updateQueueDetails();
            o.activeSong && k.queueSongID === o.activeSong.queueSongID && a.updateSongOnPlayer(k, true, true);
            $.publish("gs.player.song.change", k)
        },updateWithLocalSettings: function(k) {
            if (this.player) {
                k = k || GS.user.settings.local;
                k.crossfadeEnabled != this.getCrossfadeEnabled() && this.setCrossfadeEnabled(k.crossfadeEnabled);
                k.crossfadeAmount != this.getCrossfadeAmount() && this.setCrossfadeAmount(k.crossfadeAmount);
                k.lowerQuality != this.getLowerQuality() && this.setLowerQuality(k.lowerQuality);
                !k.noPrefetch != this.getPrefetchEnabled() && this.setPrefetchEnabled(!k.noPrefetch);
                k.playPauseFade != this.getPlayPauseFade() && this.setPlayPauseFade(k.playPauseFade);
                this.setPersistShuffle(k.persistShuffle);
                k.persistShuffle && k.lastShuffle != this.getShuffle() && this.setShuffle(k.lastShuffle)
            }
        },getEverything: function() {
            if (a.player)
                return a.player.getEverything();
            return {}
        },getPlaybackStatus: function() {
            if (a.player)
                return a.player.getPlaybackStatus();
            return {}
        },getSongDetails: function(k, n) {
            var o;
            k = _.orEqual(k, 0);
            if (typeof n === "number" || typeof n === "string")
                n = [n];
            if (a.player) {
                o = a.player.getSongDetails(k, n);
                return GS.Models.Song.wrapQueue(o)
            }
            return GS.Models.Song.wrap({})
        },getCurrentSong: function() {
            if (a.player)
                return a.getCurrentQueue().activeSong
        },setActiveSong: function(k) {
            if (k && a.player)
                return a.player.setActiveSong(k);
            return false
        },addSongsToQueueAt: function(k, n, o, q, x) {
            n = _.orEqual(n, this.INDEX_DEFAULT);
            o = _.orEqual(o, false);
            q = _.orEqual(q, {type: this.PLAY_CONTEXT_UNKNOWN});
            x = _.orEqual(x, false);
            $.isArray(k) || (k = isNaN(k) ? k.split(",") : [k]);
            var v, A = [];
            for (v = 0; v < k.length; v++)
                k[v] > 0 && GS.Models.Song.getSong(k[v], this.callback(function(t) {
                    t = t.dupe();
                    t.songs = {};
                    t.albums = {};
                    t.fanbase = {};
                    A[v] = t
                }), null, {async: false});
            if (c(true))
                o = false;
            if (a.player) {
                if (n == -4) {
                    n = -1;
                    this.clearQueue()
                }
                a.player.addSongsToQueueAt(A, n, o, q, x);
                this.autoplayEnabled ? GS.getGuts().forceLogEvent("songsQueued", {songIDs: k}) : GS.getGuts().logEvent("songsQueued", {songIDs: k})
            }
        },playSong: function(k) {
            GS.isPlaying = true;
            a.player && a.player.playSong(k)
        },eventPlaySong: function(k) {
            if (k && k.songID) {
                GS.getNotice().feedbackOnNextSong = _.orEqual(k.getFeedback, false);
                a.addSongAndPlay(k.songID)
            }
        },eventPlayAlbum: function(k) {
            if (k && k.albumID) {
                GS.getNotice().feedbackOnNextSong = _.orEqual(k.getFeedback, false);
                GS.Models.Album.getAlbum(k.albumID, this.callback("playAlbum", k), null, false)
            }
        },playAlbum: function(k, n) {
            console.log("player.playAlbum", k, n);
            var o = _.orEqual(k.index, -1), q = _.orEqual(k.playOnAdd, false), x = _.orEqual(k.shuffle, false), 
            v = _.orEqual(k.verified, true);
            n.play(o, q, x, v)
        },eventPlayPlaylist: function(k) {
            if (k && k.playlistID) {
                GS.getNotice().feedbackOnNextSong = _.orEqual(k.getFeedback, false);
                GS.Models.Playlist.getPlaylist(k.playlistID, this.callback("playPlaylist", k), null, false)
            }
        },playPlaylist: function(k, n) {
            console.log("player.playPlaylist", k, n);
            var o = _.orEqual(k.index, -1), q = _.orEqual(k.playOnAdd, false), x = _.orEqual(k.shuffle, false);
            n.play(o, q, x)
        },eventPlayStation: function(k) {
            if (k && k.tagID) {
                console.log("play station", k.tagID);
                a.setAutoplay(true, 
                k.tagID)
            }
        },addSongAndPlay: function(k, n) {
            a.player && a.addSongsToQueueAt([k], a.INDEX_DEFAULT, true, n)
        },pauseSong: function() {
            a.isPlaying = false;
            a.isPaused = true;
            a.player && a.player.pauseSong();
            GS.getGuts().gaTrackEvent("player", "pauseSong")
        },resumeSong: function(k) {
            if (!k && (GS.getLightbox().curType == "interruptListen" || GS.getLightbox().curType == "generic" && GS.getLightbox().container && (GS.getLightbox().container.hasClass("watchAd") || GS.getLightbox().container.hasClass("interactionTime"))))
                return false;
            a.isPlaying = 
            true;
            a.isPaused = false;
            a.player && a.player.resumeSong();
            GS.getGuts().gaTrackEvent("player", "resumeSong")
        },stopSong: function() {
            a.isPlaying = false;
            a.isPaused = false;
            a.player && a.player.stopSong();
            GS.getGuts().gaTrackEvent("player", "stopSong")
        },previousSong: function(k) {
            k = k ? true : false;
            if (a.player && !this.videoModeEnabled)
                a.player.previousSong(k);
            else {
                k = a.getCurrentQueue();
                var n = k.activeSong.index;
                if (!k.songs[n - 1])
                    return;
                k = k.songs[n - 1];
                a.setActiveSong(k.queueSongID);
                $.publish("gs.video.player.loadSong", k)
            }
            GS.getGuts().logEvent("prevSong", 
            {});
            GS.getGuts().gaTrackEvent("player", "prevSong");
            a.trackAutoplayEvent("prev")
        },nextSong: function() {
            if (a.player && !this.videoModeEnabled)
                a.player.nextSong();
            else {
                var k = a.getCurrentQueue(), n = k.activeSong.index;
                if (!k.songs[n + 1])
                    return;
                k = k.songs[n + 1];
                a.setActiveSong(k.queueSongID);
                $.publish("gs.video.player.loadSong", k)
            }
            GS.getGuts().logEvent("nextSong", {});
            GS.getGuts().gaTrackEvent("player", "nextSong");
            a.trackAutoplayEvent("next")
        },seekTo: function(k) {
            a.player && a.player.seekTo(k);
            GS.getGuts().gaTrackEvent("player", 
            "seekTo")
        },clearQueue: function() {
            if (a.player) {
                a.queue && a.queue.autoplayEnabled && GS.getGuts().handleAutoplayOff();
                a.queue = null;
                a.currentSong = null;
                a.player.stopSong();
                a.player.clearQueue();
                a.playerStatus(a.player.getPlaybackStatus());
                a.updateQueueWidth();
                a.gsQueue.setActive(0, false);
                a.gsQueue.setItems([], true);
                a.updateQueueDetails();
                $("#playerDetails_nowPlaying").html("");
                $.publish("gs.player.currentSong", null);
                GS.getGuts().logEvent("queueCleared", {})
            }
            GS.getGuts().gaTrackEvent("player", "clearQueue");
            $.publish("gs.player.queue.change")
        },restoreQueue: function() {
            a.player && a.player.restoreQueue();
            GS.getGuts().gaTrackEvent("player", "restoreQueue")
        },saveQueue: function() {
            for (var k = a.getCurrentQueue().songs, n = [], o = 0; o < k.length; o++)
                n.push(k[o].SongID);
            GS.getLightbox().open("newPlaylist", n);
            GS.getGuts().logQueueSaveInitiated();
            GS.getGuts().gaTrackEvent("player", "saveQueue")
        },getCurrentQueue: function(k) {
            k = _.orEqual(k, false);
            if (!k && a.queue)
                return a.queue;
            if (a.player) {
                k = a.player.getCurrentQueue();
                if (k.activeSong) {
                    k.activeSong = 
                    GS.Models.Song.wrapQueue([k.activeSong])[0];
                    this.updateSongOnPlayer(k.activeSong, true, true)
                }
                if (k.songs && k.songs.length)
                    k.songs = GS.Models.Song.wrapQueue(k.songs);
                k.hasRestoreQueue = a.player.getQueueIsRestorable();
                return a.queue = k
            }
        },getPreviousQueue: function() {
            a.player && a.player.getPreviousQueue();
            GS.getGuts().gaTrackEvent("player", "previousQueue")
        },moveSongsTo: function(k, n) {
            if (typeof k === "number" || typeof k === "string")
                k = [k];
            a.player && a.player.moveSongsTo(k, n)
        },removeSongs: function(k) {
            if (typeof k === "number" || 
            typeof k === "string")
                k = [k];
            var n = [];
            if (a.player) {
                var o = a.getSongDetails(a.queue.queueID, k);
                if ($.isArray(o))
                    for (var q = 0; q < o.length; q++)
                        o[q].SongID && n.push(o[q].SongID);
                else
                    o.hasOwnProperty("SongID") && n.push(o.SongID);
                a.player.removeSongs(k);
                a.updateQueueWidth()
            }
            a.queue = false;
            a.queue = a.getCurrentQueue();
            $.publish("gs.player.queue.change");
            GS.getGuts().gaTrackEvent("player", "removeSongs");
            a.trackAutoplayEvent("removeSongs");
            if (n.length)
                a.autoplayEnabled ? GS.getGuts().forceLogEvent("songsRemovedFromQueue", 
                {songIDs: n}) : GS.getGuts().logEvent("songsRemovedFromQueue", {songIDs: n})
        },lastAutoplayInfo: false,setAutoplay: function(k, n, o, q) {
            var x = a.getCurrentQueue();
            k = k ? true : false;
            n = parseInt(n, 10);
            if (isNaN(n))
                n = 0;
            else {
                var v = {55: 55,9: 9,75: 75,230: 230,2563: 2563,123: 123,29: 29,102: 102,69: 69,1138: 1138,17: 17,160: 160}, A = GS.getGuts();
                if (A.currentTest && A.currentTest.name == "peterTagRadioV2")
                    if (v[n])
                        q = "tagRadioGetSong"
            }
            if (x.songs.length == 0 && !n && !o)
                this.showRadioStations(x.songs.length == 0);
            else if ((n > 0 || o) && x && x.songs.length > 
            0) {
                GS.getLightbox().close();
                GS.getLightbox().open({type: "radioClearQueue",view: {header: "POPUP_START_RADIO_TITLE",message: "POPUP_START_RADIO_MESSAGE",buttonsLeft: [{label: "CANCEL",className: "close"}],buttonsRight: [{label: "POPUP_START_RADIO_TITLE",className: "submit"}]},callbacks: {".submit": function() {
                            GS.player.clearQueue();
                            GS.player.setAutoplay(true, n, o, q)
                        }}})
            } else {
                if (a.player) {
                    if (k) {
                        $("#player_radio_button").addClass("active").children("span").text($.localize.getString("RADIO_ON")).attr("data-translate-text", 
                        "RADIO_ON");
                        GS.getGuts().beginContext({autoplay: n})
                    } else {
                        $("#player_radio_button").removeClass("active").children("span").text($.localize.getString("RADIO_OFF")).attr("data-translate-text", "RADIO_OFF");
                        GS.getGuts().endContext("autoplay")
                    }
                    a.player.setAutoplay(k, n, o, q);
                    $.publish("gs.player.autoplay.update", k)
                }
                GS.getGuts().gaTrackEvent("player", k ? "enableRadio" : "disableRadio", n)
            }
        },trackLastAutoplayInfo: function(k, n) {
            if (a.lastAutoplayInfo && (!k || a.lastAutoplayInfo.tagID != n)) {
                var o = (new Date).getTime() - 
                a.lastAutoplayInfo.time;
                GS.getGuts().gaTrackEvent("player", "autoplayDuration", a.lastAutoplayInfo.tagID, o)
            }
            if (k) {
                if (!a.lastAutoplayInfo || a.lastAutoplayInfo && a.lastAutoplayInfo.tagID !== n)
                    a.lastAutoplayInfo = {tagID: n,time: (new Date).getTime()}
            } else
                a.lastAutoplayInfo = false
        },trackAutoplayEvent: function(k) {
            k = "" + k;
            a.lastAutoplayInfo && k && GS.getGuts().gaTrackEvent("player", "autoplay" + _.ucwords(k), a.lastAutoplayInfo.tagID)
        },voteSong: function(k, n) {
            var o;
            if (a.player) {
                a.player.voteSong(k, n);
                o = this.getSongDetails(a.queue.queueID, 
                [k])[0].SongID;
                switch (n) {
                    case -1:
                        GS.getGuts().forceLogEvent("songDownVoted", {songID: o});
                        GS.getGuts().gaTrackEvent("player", "voteSongDown");
                        break;
                    case 0:
                        GS.getGuts().forceLogEvent("songVotedNeutral", {songID: o});
                        GS.getGuts().gaTrackEvent("player", "voteSongNeutral");
                        break;
                    case 1:
                        GS.getGuts().forceLogEvent("songUpVoted", {songID: o});
                        GS.getGuts().gaTrackEvent("player", "voteSongUp");
                        break
                }
                $.publish("gs.player.voted", n)
            }
        },flagSong: function(k, n) {
            if (a.player) {
                a.player.flagSong(k, n);
                $.publish("gs.notification", 
                {message: $.localize.getString("SUCCESS_FLAG_SONG")})
            }
            GS.getGuts().gaTrackEvent("player", "flagSong", n)
        },getVolume: function() {
            if (a.player)
                return a.player.getVolume()
        },setVolume: function(k) {
            k = Math.max(0, Math.min(100, parseInt(k, 10)));
            a.player && a.player.setVolume(k);
            GS.getGuts().gaTrackEvent("player", "setVolume", k)
        },getCrossfadeAmount: function() {
            if (a.player)
                return a.player.getCrossfadeAmount()
        },getCrossfadeEnabled: function() {
            if (a.player)
                return a.player.getCrossfadeEnabled()
        },setCrossfadeAmount: function(k) {
            k = 
            parseInt(k, 10);
            a.player && a.player.setCrossfadeAmount(k);
            GS.getGuts().gaTrackEvent("player", "setCrossfade", k)
        },setCrossfadeEnabled: function(k) {
            k = k && GS.user.subscription.canUsePlayerBonuses() ? true : false;
            a.player && a.player.setCrossfadeEnabled(k);
            GS.user.settings.changeLocalSettings({crossfadeEnabled: k ? 1 : 0});
            GS.getGuts().gaTrackEvent("player", k ? "enableCrossfade" : "disableCrossfade")
        },setPrefetchEnabled: function(k) {
            k = k ? true : false;
            a.player && a.player.setPrefetchEnabled(k);
            GS.getGuts().gaTrackEvent("player", 
            k ? "enablePrefetch" : "disablePrefetch")
        },getPrefetchEnabled: function() {
            if (a.player)
                return a.player.getPrefetchEnabled()
        },setLowerQuality: function(k) {
            k = k ? true : false;
            a.player && a.player.setLowerQuality(k);
            GS.getGuts().gaTrackEvent("player", k ? "enableLowerQuality" : "disableLowerQuality")
        },getLowerQuality: function() {
            if (a.player)
                return a.player.getLowerQuality()
        },getIsMuted: function() {
            if (a.player)
                return a.player.getIsMuted()
        },setIsMuted: function(k) {
            k = k ? true : false;
            a.player && a.player.setIsMuted(k);
            GS.getGuts().gaTrackEvent("player", 
            k ? "enableMuted" : "disableMuted")
        },getPlayPauseFade: function() {
            if (a.player)
                return a.player.getPlayPauseFade()
        },setPlayPauseFade: function(k) {
            k = k ? true : false;
            a.player && a.player.setPlayPauseFade(k);
            GS.user.settings.changeLocalSettings({playPauseFade: k ? 1 : 0});
            GS.getGuts().gaTrackEvent("player", k ? "enablePlayPauseFade" : "disablePlayPauseFade")
        },setRepeat: function(k) {
            a.repeat = k;
            a.player && a.player.setRepeat(k);
            GS.getGuts().gaTrackEvent("player", "setRepeat", k)
        },getRepeat: function() {
            if (a.player && a.player.getRepeat)
                return a.player.getRepeat();
            return a.repeat
        },setShuffle: function(k) {
            if (!(a.queue && a.queue.autoplayEnabled)) {
                k = k ? true : false;
                a.player && a.player.setShuffle(k);
                GS.user.settings.changeLocalSettings({lastShuffle: k ? 1 : 0});
                GS.getGuts().gaTrackEvent("player", "shuffle", k ? "on" : "off")
            }
        },getShuffle: function() {
            if (a.player)
                return a.player.getShuffle();
            return false
        },setPersistShuffle: function(k) {
            k = k ? true : false;
            a.player && a.player.setPersistShuffle(k);
            GS.getGuts().gaTrackEvent("player", "persistShuffle", k ? "on" : "off")
        },prefetchStreamKeys: function(k) {
            if (a.player)
                return a.player.prefetchStreamKeys(k)
        },
        getAPIVersion: function() {
            if (a.player)
                return a.player.getAPIVersion()
        },getApplicationVersion: function() {
            if (a.player)
                return a.player.getApplicationVersion()
        },updateSongOnPlayer: function(k, n, o) {
            if (k) {
                o = _.orEqual(o, false);
                n = _.orEqual(n, false);
                if (!(!n && a.currentSong && a.currentSong.queueSongID === k.queueSongID)) {
                    if (k instanceof GS.Models.Song)
                        a.currentSong = k;
                    else {
                        a.currentSong = GS.Models.Song.wrapQueue([k])[0];
                        if (!(a.currentSong instanceof GS.Models.Song))
                            return
                    }
                    a.videoIndex = a.currentSong.index;
                    $("#queue_list li.queue-item.queue-item-active").removeClass("active");
                    $("#queue_list #" + a.currentSong.queueSongID).addClass("active");
                    $("#playerDetails_nowPlaying").html(a.view("currentSongDetails")).attr("rel", a.currentSong.SongID).attr("qsid", a.currentSong.queueSongID);
                    a.currentSongString.hookup($("#playerDetails_current_song"));
                    _.defined(a.currentSong.index && a.currentSong.index >= 0) && a.gsQueue.setActive(a.currentSong.index, !a.isMouseDown && !o);
                    $.publish("gs.player.currentSong", k);
                    GS.isApril1 && GS.user.hipsterFailCount < 1 && gsConfig.country.ID == 223 && $.publish("gs.notification.hipster")
                }
            }
        },
        updateQueueDetails: function(k) {
            k || (k = a.getCurrentQueue(true));
            if (k && k.hasOwnProperty("songs") && a.currentSongs != k.songs) {
                a.currentSongs = k.songs;
                k.songs.length && a.queueClosed && !a.queueClosedByUser && a.setQueue(a.queueSize);
                if (k.songs && k.songs.length > 0) {
                    $("#player_seeking_scrubber").show();
                    $("#player_previous").removeAttr("disabled").removeClass("disabled");
                    k.previousSong ? $("#player_previous").attr("data-tooltip", _.uncleanText(k.previousSong.SongName)) : $("#player_previous").removeAttr("data-tooltip")
                } else if (!GS.player.queue.autoplayEnabled) {
                    $("#player_seeking_scrubber").hide();
                    $("#player_previous").attr("disabled", "disabled").addClass("disabled").removeAttr("data-tooltip");
                    $("#player_radio_button").removeClass("active").children("span").text($.localize.getString("RADIO_OFF")).attr("data-translate-text", "RADIO_OFF")
                }
            }
            if (k && k.hasOwnProperty("nextSong") && a.nextSongToPlay != k.nextSong)
                if (a.nextSongToPlay = k.nextSong) {
                    $("#player_next").removeAttr("disabled").removeClass("disabled").attr("data-tooltip", _.uncleanText(k.nextSong.SongName));
                    if (a.pauseNextQueueSongID && k.nextSong.hasOwnProperty("queueSongID") && 
                    k && k.hasOwnProperty("activeSong") && a.pauseNextQueueSongID !== k.activeSong.queueSongID)
                        a.pauseNextQueueSongID = k.nextSong.queueSongID
                } else
                    $("#player_next", a.element).attr("disabled", "disabled").addClass("disabled").removeAttr("data-tooltip");
            if (a.activeSong != k.activeSong) {
                var n = a.activeSong ? a.activeSong.queueSongID : null;
                a.activeSong = k.activeSong;
                if (k && k.hasOwnProperty("activeSong")) {
                    $("#player_play_pause").removeAttr("disabled").removeClass("disabled");
                    a.updateSongOnPlayer(k.activeSong, true, n && k.activeSong && 
                    n == k.activeSong.queueSongID)
                } else
                    $("#player_play_pause").attr("disabled", "disabled").addClass("disabled")
            }
            $("#playerDetails_queue").html(a.view("queueDetails"));
            $("#queueClear").html(a.view("queueClear"));
            n = k.songs.length === 0 ? "QUEUE_NO_SONGS" : k.songs.length == 1 ? "QUEUE_ONE_SONG" : "QUEUE_NUM_SONGS";
            $("#queue_songCountLink .label").localeDataString(n, {numSongs: k.songs.length});
            if (k && k.hasOwnProperty("repeatMode") && a.repeatMode != k.repeatMode) {
                a.repeatMode = k.repeatMode;
                if (a.repeatMode === a.REPEAT_ALL)
                    $("#player_loop").removeClass("none").addClass("all").addClass("active");
                else if (a.repeatMode === a.REPEAT_ONE)
                    $("#player_loop").removeClass("all").addClass("one").addClass("active");
                else
                    a.repeatMode === a.REPEAT_NONE && $("#player_loop").removeClass("one").addClass("none").removeClass("active")
            }
            if (k && k.hasOwnProperty("autoplayEnabled") && a.autoplayEnabled != k.autoplayEnabled) {
                if (a.autoplayEnabled = k.autoplayEnabled) {
                    $("#queue_list").addClass("autoplay");
                    $("#player_shuffle").removeClass("active");
                    $("#player_radio_button").addClass("active").children("span").text($.localize.getString("RADIO_ON")).attr("data-translate-text", 
                    "RADIO_ON")
                } else {
                    $("#queue_list").removeClass("autoplay");
                    $("#player_radio_button").removeClass("active").children("span").text($.localize.getString("RADIO_OFF")).attr("data-translate-text", "RADIO_OFF");
                    k.shuffleEnabled ? $("#player_shuffle").addClass("active") : $("#player_shuffle").removeClass("active")
                }
                $.publish("gs.player.autoplay.update", k.autoplayEnabled);
                a.trackLastAutoplayInfo(k.autoplayEnabled, k.currentAutoplayTagID)
            }
        },updateQueueSongs: function(k) {
            if (k.hasOwnProperty("songs"))
                if (k.songs.length) {
                    a.currentSong = 
                    k.activeSong;
                    a.songs = k.songs;
                    a.gsQueue.setActive(k.activeSong.index, false);
                    a.gsQueue.setItems(k.songs, true)
                } else {
                    a.activeSong = k.activeSong;
                    a.songs = k.songs;
                    $("#playerDetails_nowPlaying").html("");
                    a.gsQueue.setActive(0, false);
                    a.gsQueue.setItems([], true)
                }
        },updateQueueWidth: function() {
            var k, n, o = a.getCurrentQueue();
            if (o) {
                parseInt($("#queue_list_window").css("padding-left"), 10);
                k = $("#queue").width();
                n = $("#queue").height();
                if (o && o.songs && o.songs.length > 0) {
                    k = a.songWidth * (o.songs.length - 1) + a.activeSongWidth;
                    $("#queue_list").removeClass("empty")
                } else {
                    k = k;
                    $("#queue_list").addClass("empty").width("")
                }
                n !== $("#queue").height() && a.lastQueueWidth !== k && $(window).resize();
                a.lastQueueWidth = k
            }
        },recordEngagement: function(k, n) {
            if (!k || !n)
                return false;
            b = false;
            GS.player.player.updateInterruptionExpireTime(k, n);
            return false
        },autoScrollWaitDuration: 300,beginDragDrop: function() {
            function k(x, v) {
                var A = $("#queue_songGuide");
                if (n.within(x.clientX, x.clientY).length > 0) {
                    v.queueLength = _.orEqual(v.queueLength, a.getCurrentQueue().songs.length);
                    var t = n.parent(), w = a.activeSongWidth - a.songWidth, E = 0, I = n.offset().left, D = o.scrollLeft() - 10 - (x.clientX > parseInt($("#queue_list .queue-item-active").css("left"), 10) + a.activeSongWidth ? w : 0), G = parseInt(o.width(), 10) * 0.05;
                    n.children();
                    w = a.getCurrentQueue().activeSong ? _.orEqual(a.getCurrentQueue().activeSong.index, 0) : 0;
                    stopIndex = Math.max(0, Math.min(v.queueLength, Math.round((x.clientX + D) / a.songWidth)));
                    guideLeft = stopIndex * a.songWidth + I - A.width() / 2;
                    I = function() {
                        var B = (new Date).valueOf();
                        if (!v.queueAutoScrollLast || 
                        B - v.queueAutoScrollLast >= a.autoScrollWaitDuration) {
                            v.queueAutoScrollLast = B;
                            E = Math.max(0, D - G);
                            o.scrollLeft(E);
                            a.gsQueue.updateScrollbar()
                        }
                    };
                    var H = function() {
                        var B = (new Date).valueOf();
                        if (!v.queueAutoScrollLast || B - v.queueAutoScrollLast >= a.autoScrollWaitDuration) {
                            v.queueAutoScrollLast = B;
                            E = Math.min(n.width(), D + G);
                            o.scrollLeft(E);
                            a.gsQueue.updateScrollbar()
                        }
                    };
                    if (t.offset().left + 200 > x.clientX) {
                        I();
                        clearInterval(v.queueAutoScrollInterval);
                        v.queueAutoScrollInterval = setInterval(I, a.autoScrollWaitDuration)
                    } else if (t.width() - 
                    200 < x.clientX) {
                        H();
                        clearInterval(v.queueAutoScrollInterval);
                        v.queueAutoScrollInterval = setInterval(H, a.autoScrollWaitDuration)
                    } else {
                        clearInterval(v.queueAutoScrollInterval);
                        v.queueAutoScrollInterval = false
                    }
                    if (stopIndex > w)
                        guideLeft += a.activeSongWidth - a.songWidth;
                    A.css("left", guideLeft);
                    A.show()
                } else {
                    clearInterval(v.queueAutoScrollInterval);
                    v.queueAutoScrollInterval = false;
                    A.hide()
                }
            }
            var n = $("#queue_list"), o = $("#queue_list_window"), q = $("#queue");
            $footer = $("#footer");
            n.bind("draginit", function(x, v) {
                var A = 
                $(x.target).closest(".queue-item");
                if (A.length === 0)
                    return false;
                v.draggedQueueItem = A;
                v.proxyOffsetX = x.clientX - A.offset().left;
                v.proxyOffsetY = x.clientY - A.offset().top
            }).bind("dragstart", function(x, v) {
                v.draggedItems = [GS.Models.Song.getOneFromCache($(v.draggedQueueItem).find(".queueSong").attr("rel"))];
                v.draggedItemsType = "song";
                v.draggedItemSource = "queue";
                var A = parseInt(v.draggedQueueItem.attr("data-queuesongid"), 10);
                if (A)
                    v.deleteAction = {label: "SHORTCUTS_DELETE_NOW_PLAYING",method: function() {
                            GS.player.removeSongs(A)
                        }};
                $.publish("gs.drag.start", v);
                return $('<div class="queue-item-drag size-' + GS.player.queueSize + '" style="position:absolute; z-index: 99999;"><div class="status"></div></div>').append($(v.draggedQueueItem).clone()).appendTo("body").mousewheel(_.globalDragProxyMousewheel)
            }).bind("drag", function(x, v) {
                v.clientX = x.clientX;
                v.clientY = x.clientY;
                $(v.proxy).css("top", x.clientY - v.proxyOffsetY).css("left", x.clientX - v.proxyOffsetX);
                var A = false, t = false;
                _.forEach(v.drop, function(w) {
                    $.isFunction(w.updateDropOnDrag) && 
                    w.updateDropOnDrag(x, v);
                    if (!A)
                        if ($(w).within(x.clientX, x.clientY).length > 0)
                            if ($(w).data("ignoreForOverDrop"))
                                t = true;
                            else {
                                t = false;
                                A = true
                            }
                });
                t || (A ? $(v.proxy).addClass("valid").removeClass("invalid") : $(v.proxy).addClass("invalid").removeClass("valid"))
            }).bind("dragend", function(x, v) {
                $(v.proxy).remove();
                GS.getGuts().gaTrackEvent("player", "dragSuccess");
                $.publish("gs.drag.end", v)
            });
            $footer.bind("dropinit", function() {
                this.updateDropOnDrag = k
            }).bind("dropstart", function(x, v) {
                if (!v.draggedItems) {
                    this.updateDropOnDrag = 
                    null;
                    return false
                }
                v.draggedItemsType = v.draggedItemsType || _.guessDragType(v.draggedItems);
                $(".queue-item").length && v.draggedItemsType !== "station" && $("<div id='queue_songGuide'/>").addClass("size_" + GS.player.queueSize).css({position: "absolute",zIndex: "99998",height: $(".queue-item").outerHeight(true),width: 10,top: $(".queue-item").offset().top + 5}).hide().appendTo("body")
            }).bind("dropend", function(x, v) {
                $("#queue_songGuide").remove();
                clearInterval(v.queueAutoScrollInterval)
            }).bind("drop", function(x, v) {
                $(this).offset();
                var A = $footer.within(x.clientX, x.clientY).length > 0;
                q.within(x.clientX, x.clientY);
                var t = a.activeSongWidth - a.songWidth;
                t = $("#queue_list_window").scrollLeft() - 10 - (x.clientX > parseInt($("#queue_list .queue-item-active").css("left"), 10) + a.activeSongWidth ? t : 0);
                t = Math.max(0, Math.min(v.queueLength, Math.round((x.clientX + t) / a.songWidth)));
                if (v.draggedItemSource == "queue") {
                    if (!($(".queue-item", n).length < 2)) {
                        queueSongID = v.draggedQueueItem.find(".queueSong").attr("id");
                        a.moveSongsTo([queueSongID], t)
                    }
                } else {
                    var w = 
                    [], E, I, D, G;
                    if (A)
                        if (!(x.clientX === 0 && x.layerX === 0 && x.offsetX === 0 && x.screenX === 0)) {
                            v.draggedItemsType = v.draggedItemsType || _.guessDragType(v.draggedItems);
                            switch (v.draggedItemsType) {
                                case "song":
                                    E = [];
                                    for (D = 0; D < v.draggedItems.length; D++)
                                        E.push(v.draggedItems[D].SongID);
                                    w.push({songIDs: E,context: v.draggedItemsContext});
                                    var H, B = [], L = [];
                                    A = $("#grid");
                                    if (A.controller()) {
                                        var F = A.controller().dataView.rows;
                                        $('#grid .slick-row.selected[id!="showQueue"]').each(function(K, N) {
                                            H = parseInt($(N).attr("row"), 10);
                                            if (!isNaN(H)) {
                                                B.push(H + 
                                                1);
                                                var r = F[H].ppVersion;
                                                r && L.push(r)
                                            }
                                        })
                                    }
                                    A = {ranks: B,songIDs: E};
                                    if (L.length > 0)
                                        A.ppVersions = L.join();
                                    GS.getGuts().logMultiSongDrag("OLSongsDraggedToQueue", A);
                                    break;
                                case "album":
                                    for (D = 0; D < v.draggedItems.length; D++) {
                                        E = [];
                                        v.draggedItems[D].getSongs(function(K) {
                                            K.sort(GS.Models.Album.defaultSongSort);
                                            for (G = 0; G < K.length; G++)
                                                E.push(K[G].SongID)
                                        }, null, true, {async: false});
                                        w.push({songIDs: E,context: new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_ALBUM, v.draggedItems[D])})
                                    }
                                    break;
                                case "artist":
                                    for (D = 0; D < v.draggedItems.length; D++) {
                                        E = 
                                        [];
                                        v.draggedItems[D].getSongs(function(K) {
                                            K.sort(GS.Models.Artist.defaultSongSort);
                                            for (G = 0; G < K.length; G++)
                                                E.push(K[G].SongID)
                                        }, false, null, {async: false});
                                        w.push({songIDs: E,context: new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_ARTIST, v.draggedItems[D])})
                                    }
                                    break;
                                case "playlist":
                                    for (D = 0; D < v.draggedItems.length; D++) {
                                        E = [];
                                        v.draggedItems[D].getSongs(function(K) {
                                            for (G = 0; G < K.length; G++)
                                                E.push(K[G].SongID)
                                        }, null, {async: false});
                                        w.push({songIDs: E,context: new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_PLAYLIST, 
                                            v.draggedItems[D])})
                                    }
                                    break;
                                case "user":
                                    for (D = 0; D < v.draggedItems.length; D++) {
                                        E = [];
                                        v.draggedItems[D].getFavoritesByType("Songs", function(K) {
                                            _.forEach(K, function(N) {
                                                E.push(N.SongID)
                                            })
                                        }, null, {async: false});
                                        w.push({songIDs: E,context: new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_USER, v.draggedItems[D])})
                                    }
                                    break;
                                case "station":
                                    GS.player.setAutoplay(true, v.draggedItems[0].StationID);
                                    return;
                                default:
                                    console.error("queue drop, invalid drag type", v.draggedItemsType);
                                    return
                            }
                            I = q.within(x.clientX, x.clientY).length > 
                            0 || a.getCurrentQueue().songs.length > 0 ? false : true;
                            for (D = 0; D < w.length; D++) {
                                E = w[D].songIDs;
                                A = _.orEqual(w[D].context, new GS.Models.PlayContext);
                                a.addSongsToQueueAt(E, t, I, A);
                                t += E.length;
                                I = false
                            }
                            GS.getGuts().gaTrackEvent("player", "dropSuccess")
                        }
                }
            })
        },addQueueSeek: function() {
            this.seek = $("#seeking_wrapper");
            this.seek.slider({disabled: true,max: 1E3,start: function() {
                    GS.player.SCRUB_LOCK = true
                },stop: function() {
                    GS.player.SCRUB_LOCK = false
                },change: function(k, n) {
                    var o = n.value / 1E3, q = a.player.getPlaybackStatus();
                    a.seekTo(o * 
                    q.duration)
                }})
        },addShortcuts: function() {
            if (!GS.user.settings.local.disablePlayerShortcuts) {
                a.volumeSliderTimeout = null;
                a.volumeSliderDuration = 300;
                $(document).unbind(".playerShortcut");
                $(document).bind("keyup.playerShortcut.playerShortcutPause", "space", function(k) {
                    $(k.target).is("button") && k.preventDefault()
                }).bind("keydown.playerShortcut.playerShortcutPause", "space", function(k) {
                    if (!($(k.target).is("input,textarea,select") && $(k.target).val().length > 0)) {
                        a.togglePlayPause();
                        GS.getGuts().gaTrackEvent("player", 
                        "playPauseShortcut");
                        return false
                    }
                }).bind("keydown.playerShortcut.playerShortcutNext", "ctrl+right", function(k) {
                    if (!($(k.target).is("input,textarea,select") && $(k.target).val().length > 0)) {
                        a.nextSong();
                        GS.getGuts().gaTrackEvent("player", "nextShortcut");
                        return false
                    }
                }).bind("keydown.playerShortcut.playerShortcutNext", "meta+right", function(k) {
                    if (!($(k.target).is("input,textarea,select") && $(k.target).val().length > 0)) {
                        a.nextSong();
                        GS.getGuts().gaTrackEvent("player", "nextShortcut");
                        return false
                    }
                }).bind("keydown.playerShortcut.playerShortcutPrevious", 
                "ctrl+left", function(k) {
                    if (!($(k.target).is("input,textarea,select") && $(k.target).val().length > 0)) {
                        a.previousSong();
                        GS.getGuts().gaTrackEvent("player", "prevShortcut");
                        return false
                    }
                }).bind("keydown.playerShortcut.playerShortcutPrevious", "meta+left", function(k) {
                    if (!($(k.target).is("input,textarea,select") && $(k.target).val().length > 0)) {
                        a.previousSong();
                        GS.getGuts().gaTrackEvent("player", "prevShortcut");
                        return false
                    }
                }).bind("keydown.playerShortcut.playerShortcutVolumeUp", "ctrl+up", function(k) {
                    if (!($(k.target).is("input,textarea,select") && 
                    $(k.target).val().length > 0)) {
                        a.setVolume(Math.min(100, a.getVolume() + 5));
                        $("#volumeSlider").slider("value", a.getVolume());
                        $("#volumeControl").show();
                        clearTimeout(a.volumeSliderTimeout);
                        a.volumeSliderTimeout = setTimeout(function() {
                            $("#volumeControl").hide()
                        }, a.volumeSliderDuration);
                        GS.getGuts().gaTrackEvent("player", "volumeUpShortcut", a.getVolume());
                        return false
                    }
                }).bind("keydown.playerShortcut.playerShortcutVolumeUp", "meta+up", function(k) {
                    if (!($(k.target).is("input,textarea,select") && $(k.target).val().length > 
                    0)) {
                        a.setVolume(Math.min(100, a.getVolume() + 5));
                        $("#volumeSlider").slider("value", a.getVolume());
                        $("#volumeControl").show();
                        clearTimeout(a.volumeSliderTimeout);
                        a.volumeSliderTimeout = setTimeout(function() {
                            $("#volumeControl").hide()
                        }, a.volumeSliderDuration);
                        GS.getGuts().gaTrackEvent("player", "volumeUpShortcut", a.getVolume());
                        return false
                    }
                }).bind("keydown.playerShortcut.playerShortcutVolumeDown", "ctrl+down", function(k) {
                    if (!($(k.target).is("input,textarea,select") && $(k.target).val().length > 0)) {
                        a.setVolume(Math.max(0, 
                        a.getVolume() - 5));
                        $("#volumeSlider").slider("value", a.getVolume());
                        $("#volumeControl").show();
                        clearTimeout(a.volumeSliderTimeout);
                        a.volumeSliderTimeout = setTimeout(function() {
                            $("#volumeControl").hide()
                        }, a.volumeSliderDuration);
                        GS.getGuts().gaTrackEvent("player", "volumeDownShortcut", a.getVolume());
                        return false
                    }
                }).bind("keydown.playerShortcut.playerShortcutVolumeDown", "meta+down", function(k) {
                    if (!($(k.target).is("input,textarea,select") && $(k.target).val().length > 0)) {
                        a.setVolume(Math.max(0, a.getVolume() - 
                        5));
                        $("#volumeSlider").slider("value", a.getVolume());
                        $("#volumeControl").show();
                        clearTimeout(a.volumeSliderTimeout);
                        a.volumeSliderTimeout = setTimeout(function() {
                            $("#volumeControl").hide()
                        }, a.volumeSliderDuration);
                        GS.getGuts().gaTrackEvent("player", "volumeDownShortcut", a.getVolume());
                        return false
                    }
                })
            }
        },addVolumeSlider: function() {
            var k = ["off", "one", "two", "three", "four", "five"], n = function(o, q) {
                var x = _.orEqual(Math.ceil(q.value / 20), 5);
                x = k[x];
                $("#player_volume").attr("class", "player_control main_asset " + 
                x);
                q.value == 0 && a.getIsMuted() ? $("#player_volume").addClass("muted") : a.setVolume(q.value)
            };
            $("#volumeSlider").slider({orientation: "vertical",range: "min",min: 0,max: 100,slide: n,change: n})
        },addQueueResize: function() {
            var k = this;
            $("#player_queue").resizable({handles: {s: $("#player_queue_resize")},minHeight: 0,maxHeight: 185,animate: false,distance: 10,iframeFix: true,start: function() {
                    k.gsQueue.lastLeftmostOnDragStart = k.gsQueue.calcIndex($("#queue_list_window").scrollLeft())
                },resize: function() {
                    $("#deselector").select();
                    $("#queue_list_window").hide();
                    k.gsQueue && k.gsQueue.setDisabled(true);
                    GS.resize()
                },stop: function(n, o) {
                    var q = o.size.height - 30;
                    $("#queue_list_window").show();
                    if (q > 145)
                        k.setQueue("l");
                    else if (q > 100)
                        k.setQueue("m");
                    else
                        q > 15 ? k.setQueue("s") : k.setQueue("off");
                    $("#player_queue").height("auto").width("auto");
                    GS.resize()
                }})
        },".queueSong dblclick": function(k, n) {
            n.stopPropagation();
            a.getCurrentQueue(true) && a.playSong(k.attr("id"));
            return false
        },".queueSong a.play click": function(k, n) {
            n.stopImmediatePropagation();
            var o = a.getCurrentQueue(true);
            if (o && o.activeSong && k.attr("rel") == o.activeSong.queueSongID)
                if (a.isPlaying)
                    a.pauseSong();
                else
                    a.isPaused ? a.resumeSong() : a.playSong(o.activeSong.queueSongID);
            else
                a.playSong(k.attr("rel"));
            return false
        },".queueSong a.remove click": function(k, n) {
            n.stopImmediatePropagation();
            var o = a.getCurrentQueue().activeSong, q = a.getSongDetails(a.getCurrentQueue().queueID, k.parents(".queueSong").attr("id"))[0];
            a.removeSongs([q.queueSongID]);
            a.queue = false;
            a.queue = a.getCurrentQueue();
            a.updateQueueWidth();
            a.gsQueue.setItems(a.queue.songs);
            if (a.queue.activeSong)
                a.gsQueue.setActive(a.queue.activeSong.index, false);
            else
                o && o.index && o.index > 0 && a.gsQueue.setActive(o.index - 1, false);
            GS.getGuts().gaTrackEvent("player", "removeSong", q.SongID);
            return false
        },".queueSong a.add click": function(k, n) {
            n.stopImmediatePropagation();
            var o = a.getCurrentQueue(), q = k.is(".inLibrary"), x = k.parents(".queueSong").attr("id");
            o = a.getSongDetails(o.queueID, [x])[0];
            if (a.currentSong && a.currentSong.queueSongID === o.queueSongID)
                o = a.currentSong;
            if (q) {
                k.removeClass("inLibrary").removeClass("isFavorite");
                GS.user.removeFromLibrary(o.SongID);
                GS.getGuts().logEvent("playerRemoveFromLibrary", {songID: o.SongID})
            } else {
                k.addClass("inLibrary");
                GS.user.addToLibrary(o.SongID);
                GS.getGuts().logEvent("playerAddToLibrary", {songID: o.SongID})
            }
            return false
        },".queueSong a.favorite click": function(k, n) {
            n.stopImmediatePropagation();
            var o = a.getCurrentQueue(), q = k.is(".isFavorite"), x = k.parents(".queueSong").attr("id");
            o = a.getSongDetails(o.queueID, [x])[0];
            if (a.currentSong && 
            a.currentSong.queueSongID === o.queueSongID)
                o = a.currentSong;
            if (q) {
                k.removeClass("isFavorite");
                GS.user.removeFromSongFavorites(o.SongID);
                GS.getGuts().logEvent("playerRemoveFromSongFavorites", {songID: o.SongID})
            } else {
                k.addClass("isFavorite");
                GS.user.addToSongFavorites(o.SongID);
                GS.getGuts().logEvent("playerAddToSongFavorites", {songID: o.SongID})
            }
            return false
        },".queueSong a.options click": function(k, n) {
            var o = this.getCurrentQueue(), q = k.parents(".queueSong").attr("id");
            o = this.getSongDetails(o.queueID, [q])[0];
            var x = {isQueue: true,flagSongCallback: function(v) {
                    GS.player.flagSong(q, v)
                },voteSongCallback: function(v) {
                    GS.player.voteSong(q, v)
                }};
            if ($("div.qsid" + q).is(":visible")) {
                $("div.qsid" + q).hide();
                k.removeClass("active-context")
            } else {
                k.addClass("active-context").jjmenu(n, o.getContextMenu(x), null, {xposition: "auto",yposition: "top",orientation: "top",show: "show",className: "queuemenu qsid" + q,keepState: k});
                GS.getGuts().gaTrackEvent("player", "songMenu", o.SongID)
            }
        },".queueSong .smile click": function(k, n) {
            n.stopImmediatePropagation();
            console.log("player.smile click", k, n);
            var o = k.parents(".queueSong").attr("id");
            k.siblings(".frown").removeClass("active");
            if (k.is(".active")) {
                this.voteSong(o, 0);
                k.removeClass("active");
                GS.getGuts().gaTrackEvent("player", "unsmile", k.parents(".queueSong").attr("id"));
                this.trackAutoplayEvent("unsmile")
            } else {
                this.voteSong(o, 1);
                k.addClass("active");
                GS.getGuts().gaTrackEvent("player", "smile", k.parents(".queueSong").attr("id"));
                this.trackAutoplayEvent("smile")
            }
            return false
        },".queueSong .frown click": function(k, 
        n) {
            n.stopImmediatePropagation();
            console.log("player.frown click", k.get(), n);
            var o = k.parents(".queueSong").attr("id");
            k.siblings(".smile").removeClass("active");
            if (k.is(".active")) {
                this.voteSong(o, 0);
                k.removeClass("active");
                GS.getGuts().gaTrackEvent("player", "unfrown", k.parents(".queueSong").attr("id"));
                this.trackAutoplayEvent("unfrown")
            } else {
                this.voteSong(o, -1);
                k.addClass("active");
                GS.getGuts().gaTrackEvent("player", "frown", k.parents(".queueSong").attr("id"));
                this.trackAutoplayEvent("frown")
            }
            return false
        },
        ".currentSongLink, a.queueSong_name click": function(k, n) {
            n.stopImmediatePropagation();
            var o = k.attr("rel"), q = GS.Models.Song.getOneFromCache(o);
            if (q = q && $.isFunction(q.toUrl) ? q.toUrl() : false) {
                GS.router.setHash(q);
                GS.getGuts().gaTrackEvent("player", "songItemLink", o)
            }
            return false
        },".queueSong contextmenu": function(k, n) {
            var o = GS.Models.Song.getOneFromCache(k.attr("rel")), q = k.attr("id");
            k.jjmenu(n, o.getContextMenu({isQueue: true,flagSongCallback: function(x) {
                    GS.player.flagSong(q, x)
                },voteSongCallback: function(x) {
                    GS.player.voteSong(q, 
                    x)
                }}), null, {xposition: "mouse",yposition: "mouse",show: "show",className: "queuemenu"});
            GS.getGuts().gaTrackEvent("player", "songMenu", o.SongID)
        },"#playerDetails_nowPlaying click": function(k, n) {
            if (!$(n.target).is("a")) {
                var o = $("#playerDetails_nowPlaying").attr("rel"), q = this.getCurrentSong().queueSongID, x = GS.Models.Song.getOneFromCache(o), v = {isQueue: true,flagSongCallback: function(A) {
                        GS.player.flagSong(q, A)
                    },voteSongCallback: function(A) {
                        GS.player.voteSong(q, A)
                    }};
                if (k.hasClass("active-context")) {
                    $(".jjplayerNowPlaying").hide();
                    k.removeClass("active-context")
                } else {
                    k.addClass("active-context").jjmenu(n, x.getContextMenu(v), null, {xposition: "left",yposition: "top",orientation: "top",show: "show",className: "queuemenu jjplayerNowPlaying",keepState: k});
                    GS.getGuts().gaTrackEvent("player", "nowPlayingMenu", o)
                }
            }
        },togglePlayPause: function() {
            var k = this.player.getPlaybackStatus();
            if (k) {
                switch (k.status) {
                    case this.PLAY_STATUS_NONE:
                    case this.PLAY_STATUS_FAILED:
                    case this.PLAY_STATUS_COMPLETED:
                    default:
                        k.activeSong && this.playSong(k.activeSong.queueSongID);
                        break;
                    case this.PLAY_STATUS_INITIALIZING:
                    case this.PLAY_STATUS_LOADING:
                        this.stopSong();
                        break;
                    case this.PLAY_STATUS_PLAYING:
                    case this.PLAY_STATUS_BUFFERING:
                        this.pauseSong();
                        break;
                    case this.PLAY_STATUS_PAUSED:
                        this.resumeSong();
                        break
                }
                $.publish("gs.player.queue.change")
            }
        },"#player_play_pause click": function() {
            this.togglePlayPause();
            return false
        },"#player_previous click": function() {
            this.previousSong();
            return false
        },"#player_next click": function() {
            this.nextSong();
            return false
        },"#player_shuffle click": function(k) {
            if (!a.queue.autoplayEnabled) {
                k.toggleClass("active");
                k = k.is(".active") ? true : false;
                a.setShuffle(k);
                return false
            }
        },"#player_loop click": function(k) {
            var n;
            if (k.is(".none")) {
                n = a.REPEAT_ALL;
                k.removeClass("none").addClass("all").addClass("active")
            } else if (k.is(".all")) {
                n = a.REPEAT_ONE;
                k.removeClass("all").addClass("one").addClass("active")
            } else {
                n = a.REPEAT_NONE;
                k.removeClass("one").addClass("none").removeClass("active")
            }
            a.setRepeat(n);
            return false
        },"#player_crossfade click": function(k) {
            if (GS.user.UserID > 0 && GS.user.subscription.canUsePlayerBonuses()) {
                k.toggleClass("active");
                k = k.is(".active") ? true : false;
                a.setCrossfadeEnabled(k)
            } else
                GS.getLightbox().open("vipOnlyFeature", {callback: this.callback(function() {
                        this.setCrossfadeEnabled(true)
                    })});
            return false
        },"#player_fullscreen click": function() {
            return false
        },"#player_volume click": function(k) {
            console.log("player_volume toggle", this.getIsMuted());
            if (this.getIsMuted()) {
                this.setIsMuted(false);
                $(k).removeClass("muted");
                $("#volumeSlider").slider("value", a.player.getVolume())
            } else {
                this.setIsMuted(true);
                $(k).addClass("muted");
                $("#volumeSlider").slider("value", 
                0)
            }
            return false
        },"#player_volume mouseenter": function() {
            clearTimeout(this.volumeSliderTimeout);
            $("#volumeControl").show();
            return false
        },"#player_volume mouseleave": function() {
            clearTimeout(this.volumeSliderTimeout);
            this.volumeSliderTimeout = setTimeout(this.callback(function() {
                $("#volumeControl").hide()
            }), this.volumeSliderDuration);
            return false
        },"#volumeControl mouseenter": function() {
            clearTimeout(this.volumeSliderTimeout);
            return false
        },"#volumeControl mouseleave": function() {
            clearTimeout(this.volumeSliderTimeout);
            if (this.isMouseDown) {
                var k = this, n = function() {
                    $("body").unbind("mouseup", n);
                    $("body").unbind("mouseleave", n);
                    k.isMouseDown = 0;
                    k.volumeSliderTimeout = setTimeout(k.callback(function() {
                        $("#volumeControl").hide()
                    }), k.volumeSliderDuration)
                };
                $("body").bind("mouseup", n);
                $("body").bind("mouseleave", n)
            } else
                this.volumeSliderTimeout = setTimeout(this.callback(function() {
                    $("#volumeControl").hide()
                }), this.volumeSliderDuration);
            return false
        },isMouseDown: 0,mousedown: function() {
            this.isMouseDown = 1
        },mouseup: function() {
            this.isMouseDown = 
            0
        },"#player_options click": function(k, n) {
            var o = this.getCurrentQueue(), q = this, x = [], v = [{title: $.localize.getString("QUEUE_LARGE"),customClass: !GS.player.queueClosed && GS.player.queueSize == "l" ? "jj_menu_item_hasIcon jj_menu_item_tick" : "jj_menu_item_hasIcon jj_menu_item_blank",action: {type: "fn",callback: function() {
                            GS.player.setQueue("l")
                        }}}, {title: $.localize.getString("QUEUE_NORMAL"),customClass: !GS.player.queueClosed && GS.player.queueSize == "m" ? "jj_menu_item_hasIcon jj_menu_item_tick" : "jj_menu_item_hasIcon jj_menu_item_blank",
                    action: {type: "fn",callback: function() {
                            GS.player.setQueue("m")
                        }}}, {title: $.localize.getString("QUEUE_SMALL"),customClass: !GS.player.queueClosed && GS.player.queueSize == "s" ? "jj_menu_item_hasIcon jj_menu_item_tick" : "jj_menu_item_hasIcon jj_menu_item_blank",action: {type: "fn",callback: function() {
                            GS.player.setQueue("s")
                        }}}, {title: $.localize.getString("QUEUE_HIDE"),customClass: GS.player.queueClosed ? "jj_menu_item_hasIcon jj_menu_item_tick" : "jj_menu_item_hasIcon jj_menu_item_blank",action: {type: "fn",callback: function() {
                            GS.player.setQueue("off")
                        }}}];
            x.push({title: $.localize.getString("QUEUE_SIZES"),type: "sub",customClass: "jj_menu_item_hasIcon jj_menu_item_play",src: v});
            GS.user.UserID > 0 && x.push({title: $.localize.getString("PLAYER_SHOW_SETTINGS"),customClass: "jj_menu_item_hasIcon jj_menu_item_privacy",action: {type: "fn",callback: function() {
                        GS.router.setHash("/settings/activity")
                    }}});
            if (o && o.songs && o.songs.length) {
                x.push({customClass: "separator"});
                q.videoModeEnabled ? x.push({title: $.localize.getString("PLAYER_DISABLE_VIDEO_MODE"),customClass: "jj_menu_item_hasIcon jj_menu_item_video",
                    action: {type: "fn",callback: function() {
                            q.disableVideoMode()
                        }}}) : x.push({title: $.localize.getString("PLAYER_ENABLE_VIDEO_MODE"),customClass: "jj_menu_item_hasIcon jj_menu_item_video",action: {type: "fn",callback: function() {
                            q.enableVideoMode()
                        }}});
                x.push({title: $.localize.getString("PLAYER_SHOW_VISUALIZER"),customClass: "jj_menu_item_hasIcon jj_menu_item_visualizer",action: {type: "fn",callback: function() {
                            if (GS.user.subscription.canUsePlayerBonuses())
                                $("#lightbox .lbcontainer:visible").is(".gs_lightbox_visualizer") || 
                                GS.getLightbox().open("visualizer", {showPlayerControls: true});
                            else
                                GS.getLightbox().open("vipOnlyFeature", {callback: q.callback(function() {
                                        $("#lightbox .lbcontainer:visible").is(".gs_lightbox_visualizer") || GS.getLightbox().open("visualizer", {showPlayerControls: true})
                                    })})
                        }}});
                q.powerModeEnabled ? x.push({title: $.localize.getString("PLAYER_DISABLE_POWER_MODE"),customClass: "jj_menu_item_hasIcon jj_menu_item_clock",action: {type: "fn",callback: function() {
                            q.disablePowerMode()
                        }}}) : x.push({title: $.localize.getString("PLAYER_ENABLE_POWER_MODE"),
                    customClass: "jj_menu_item_hasIcon jj_menu_item_clock",action: {type: "fn",callback: function() {
                            GS.user.subscription.canUsePlayerBonuses() ? q.enablePowerMode() : GS.getLightbox().open("vipOnlyFeature", {callback: q.callback(function() {
                                    this.enablePowerMode()
                                })})
                        }}})
            }
            if (k.hasClass("active-context")) {
                $(".jjQueueMenu").remove();
                k.removeClass("active-context")
            } else {
                k.addClass("active-context").jjmenu(n, x, null, {xposition: "right",yposition: "top",orientation: "top",spill: "left",show: "show",className: "radiomenu jjQueueMenu",
                    keepState: k});
                GS.getGuts().gaTrackEvent("player", "queueSongMenu")
            }
        },showRadioStations: function(k) {
            messageKey = k ? "POPUP_START_RADIO_NO_SONGS_MESSAGE" : "POPUP_START_RADIO_NO_RECS_MESSAGE";
            GS.getLightbox().open({type: "radioStations",view: {header: "POPUP_START_RADIO_TITLE",messageHTML: '<p data-translate-text="' + messageKey + '">' + $.localize.getString(messageKey) + '</p><div id="grid" class="gs_grid radioStations"></div>',buttonsRight: [],buttonsLeft: [{label: "CLOSE",className: "close"}]},callbacks: {".close": function() {
                        GS.getLightbox().close();
                        return false
                    }},loadCallback: function() {
                    var n = GS.Models.Station.tagStations;
                    $("#lightbox_content .radioStations").gs_grid(n, GS.Controllers.GridController.columns.station, {allowDragSort: false,allowDuplicates: false,disableMultiSelect: true,sortCol: "StationTitle",sortDir: true}, "station");
                    GS.getLightbox().positionLightbox();
                    $.subscribe("gs.player.autoplay.update", function(o) {
                        o && GS.getLightbox().close()
                    })
                }})
        },"#player_radio_button click": function(k) {
            $(k);
            if (a.player && !a.player.getCurrentQueue().autoplayEnabled)
                if (a.player.getCurrentQueue().songs.length > 
                0) {
                    a.player.setAutoplay(true);
                    $("#player_radio_button").addClass("active").children("span").text($.localize.getString("RADIO_ON")).attr("data-translate-text", "RADIO_ON")
                } else
                    this.showRadioStations(true);
            else {
                a.player.setAutoplay(false);
                $("#player_radio_button").removeClass("active").children("span").text($.localize.getString("RADIO_OFF")).attr("data-translate-text", "RADIO_OFF")
            }
        },"#player_radio_label click": function(k, n) {
            var o = GS.Models.Station.getStationsStartMenu();
            if (k.hasClass("active-context")) {
                $(".jjStationsMenu").hide();
                k.removeClass("active-context")
            } else {
                k.addClass("active-context").jjmenu(n, o, null, {xposition: "right",yposition: "top",orientation: "top",spill: "left",show: "show",className: "radiomenu jjStationsMenu",keepState: k});
                GS.getGuts().gaTrackEvent("player", "queueStationsMenu")
            }
        },"#player_queue_sizer click": function() {
            if (a.queueClosed)
                a.setQueue("s", true);
            else if (a.queueSize == "s")
                a.setQueue("m", true);
            else if (a.queueSize == "m")
                a.setQueue("l", true);
            else
                a.queueSize == "l" && a.setQueue("off", true)
        },"#queue_songCountLink click": function(k, 
        n) {
            n.preventDefault();
            var o = this.getCurrentQueue(true), q = [];
            q.push({title: $.localize.getString("NOW_PLAYING"),action: {type: "gourl",url: "#!/now_playing"}});
            o && o.songs && o.songs.length > 0 && q.push({title: $.localize.getString("QUEUE_SAVE_QUEUE"),type: "sub",src: this.getSaveQueueMenu()});
            GS.user.UserID > 0 && q.push({title: $.localize.getString("QUEUE_LOAD"),type: "sub",src: this.getLoadQueueMenu()});
            if (k.hasClass("active-context")) {
                $(".jjQueueMenu").hide();
                k.removeClass("active-context")
            } else {
                k.addClass("active-context").jjmenu(n, 
                q, null, {xposition: "right",yposition: "top",orientation: "top",spill: "left",show: "show",className: "radiomenu jjQueueMenu",keepState: k});
                GS.getGuts().gaTrackEvent("player", "queueCurrentSongsMenu")
            }
        },getSaveQueueMenu: function() {
            var k = this.getCurrentQueue(true), n = [], o = [];
            if (k && k.songs && k.songs.length > 0)
                n = [{title: $.localize.getString("CONTEXT_ADD_TO_LIBRARY"),customClass: "addLibrary jj_menu_item_hasIcon jj_menu_item_music",action: {type: "fn",callback: function() {
                                var v, A = [];
                                for (v = 0; v < k.songs.length; v++) {
                                    A.push(k.songs[v].SongID);
                                    GS.getGuts().logEvent("playerAddToLibrary", {songID: k.songs[v].SongID})
                                }
                                GS.user.addToLibrary(A)
                            }}}, {customClass: "separator"}];
            if (k && k.songs && k.songs.length > 0) {
                _.forEach(k.songs, function(v) {
                    o.push(v.SongID)
                });
                var q = GS.Models.Playlist.getPlaylistsMenu(o, function(v) {
                    GS.getLightbox().open({type: "confirm",view: {header: "POPUP_OVERWRITE_PLAYLIST_TITLE",messageHTML: "<p>" + _.getString("POPUP_ARE_YOU_SURE_OVERWRITE_PLAYLIST", {playlist: _.cleanText(v.PlaylistName)}) + "</p>",buttonsLeft: [{label: "CANCEL",className: "close"}],
                            buttonsRight: [{label: "OK",className: "submit"}]},callbacks: {".submit": function() {
                                v.overwriteWithSongs(o, true)
                            }}})
                }, false, true), x = GS.Models.Playlist.getPlaylistsMenu(o, function(v) {
                    v.addSongs(o, v.length, true)
                }, false, false);
                _.isEmpty(GS.user.playlists) ? n.push({title: $.localize.getString("CONTEXT_NEW_PLAYLIST"),customClass: "jj_menu_item_hasIcon jj_menu_item_new_playlist",action: {type: "fn",callback: function() {
                            GS.getLightbox().open("newPlaylist", o)
                        }}}) : n.push({title: $.localize.getString("QUEUE_SAVE_PLAYLIST"),
                    customClass: "jj_menu_item_hasIcon jj_menu_item_replace_playlist saveQueue",type: "sub",src: q});
                x.length && n.push({title: $.localize.getString("QUEUE_ADD_TO_PLAYLIST"),customClass: "saveQueue jj_menu_item_hasIcon jj_menu_item_add_playlist",type: "sub",src: x});
                n.length && n.push({customClass: "separator"});
                n.push({title: $.localize.getString("QUEUE_EMBED_SONGS"),customClass: "jj_menu_item_hasIcon jj_menu_item_share_widget shareSongs",action: {type: "fn",callback: function() {
                            var v, A = [];
                            for (v = 0; v < k.songs.length; v++)
                                A.push(k.songs[v].SongID);
                            GS.getLightbox().open("widget", {type: "manySongs",id: A})
                        }}})
            }
            return n
        },getLoadQueueMenu: function() {
            this.getCurrentQueue(true);
            var k = this, n = [], o;
            if (GS.user.favorites.songs) {
                o = _.toArrayID(GS.user.favorites.songs);
                o.length && n.push({title: $.localize.getString("QUEUE_LOAD_FAVORITES"),customClass: "stations jj_menu_item_hasIcon jj_menu_item_favorites",action: {type: "fn",callback: function() {
                            GS.player.addSongsToQueueAt(o)
                        }}})
            }
            var q = GS.Models.Playlist.getPlaylistsMenu([], function(x) {
                var v = function() {
                    var A = [], 
                    t = new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_PLAYLIST, x);
                    x.getSongs(function(w) {
                        for (j = 0; j < w.length; j++)
                            A.push(w[j].SongID);
                        GS.player.addSongsToQueueAt(A, k.INDEX_REPLACE, true, t)
                    }, null, false, {async: false})
                };
                if (GS.player.queue && GS.player.queue.songs && GS.player.queue.songs.length > 0) {
                    GS.getLightbox().close();
                    GS.getLightbox().open({type: "playlistClearQueue",view: {header: "ARE_YOU_SURE",messageHTML: x.PlaylistName.length ? _.getString("POPUP_LOAD_PLAYLIST_MESSAGE_WITH_PLAYLIST", {playlistName: x.PlaylistName}) : 
                            _.getString("POPUP_LOAD_PLAYLIST_MESSAGE"),buttonsLeft: [{label: "CANCEL",className: "close"}],buttonsRight: [{label: "POPUP_LOAD_PLAYLIST_BTN",className: "submit"}]},callbacks: {".submit": function() {
                                v();
                                GS.getGuts().logEvent("playlistOverwriteQueue", {overwrite: 1})
                            }}});
                    GS.getGuts().logEvent("playlistOverwriteQueue", {overwrite: 0})
                } else
                    v()
            }, true, false);
            q.length > 0 && n.push({title: $.localize.getString("QUEUE_LOAD_PLAYLIST"),customClass: "playlist jj_menu_item_hasIcon jj_menu_item_playlist",type: "sub",src: q});
            return n
        },videoIndex: 0,enableVideoMode: function() {
            this.videoModeEnabled = true;
            this.showVideoLightbox();
            if (this.powerModeEnabled) {
                clearInterval(this.powerModeInterval);
                this.powerModeInterval = setInterval($(".lbcontainer.gs_lightbox_video").controller().callback("powerHourCheckVideoMode"), 1E3)
            }
            GS.getGuts().gaTrackEvent("player", "enableVideoMode")
        },disableVideoMode: function() {
            this.videoModeEnabled = false;
            this.hideVideoLightbox();
            this.playSong();
            this.powerModeEnabled && clearInterval(this.powerModeInterval);
            GS.getGuts().gaTrackEvent("player", "disableVideoMode")
        },showVideoLightbox: function() {
            var k = this.currentSong;
            if (k) {
                GS.getLightbox().close();
                GS.getLightbox().open("video", {isLoading: true,isVideoMode: true,song: k,sidebarHeader: "POPUP_VIDEO_ALTERNATE"})
            } else {
                $.publish("gs.notification", {type: "error",message: $.localize.getString("NOTIF_FEATURE_REQUIREMENT_SONGS")});
                this.videoModeEnabled = false
            }
        },hideVideoLightbox: function() {
            $("div.lbcontainer.gs_lightbox_video").is(":visible") && GS.getLightbox().close()
        },
        togglePowerMode: function() {
            this.powerModeEnabled ? this.disablePowerMode() : this.enablePowerMode()
        },enablePowerMode: function() {
            this.powerModeEnabled = true;
            if (this.videoModeEnabled && $(".lbcontainer.video")) {
                clearInterval(this.powerModeInterval);
                this.powerModeInterval = setInterval($(".lbcontainer.gs_lightbox_video").controller().callback("powerHourCheckVideoMode"), 1E3)
            } else {
                var k = this.player ? this.player.getPlaybackStatus() : null;
                if (k)
                    switch (k.status) {
                        case this.PLAY_STATUS_NONE:
                        case this.PLAY_STATUS_FAILED:
                        case this.PLAY_STATUS_COMPLETED:
                        case this.PLAY_STATUS_PAUSED:
                            if (k.activeSong) {
                                this.playSong(k.activeSong.queueSongID);
                                $.publish("gs.player.queue.change")
                            }
                            break
                    }
            }
            $.publish("gs.player.feature.change");
            GS.getGuts().gaTrackEvent("player", "enablePowerMode")
        },disablePowerMode: function() {
            this.powerModeEnabled = false;
            this.videoModeEnabled && clearInterval(this.powerModeInterval);
            $.publish("gs.player.feature.change");
            GS.getGuts().gaTrackEvent("player", "disablePowerMode")
        },"#queue_clear_button click": function() {
            var k = this.getCurrentQueue();
            if (k.hasRestoreQueue)
                a.restoreQueue();
            else if (k && k.songs && k.songs.length > 0) {
                a.clearQueue();
                a.setQueue("off", false)
            }
        },queueSongToHtml: function() {
            return function(k, n, o) {
                var q = "paused", x = [], v = a.getCurrentQueue(), A = "", t = k.fromLibrary ? "inLibrary" : "", w = k.isFavorite ? "isFavorite" : "", E = "", I = "";
                if (k.context.data && k.context.data.hasOwnProperty("CoverArtFilename"))
                    k.CoverArtFilename = k.context.data.CoverArtFilename;
                if (v.activeSong && k.queueSongID === v.activeSong.queueSongID) {
                    A += " active";
                    if (a.isPlaying)
                        q = ""
                }
                if (v.autoplayEnabled) {
                    if (k.autoplayVote === -1 || n === o - 1 && k.source !== "user")
                        A += " suggestion";
                    if (k.autoplayVote === 
                    1 || k.autoplayVote === 0 && k.source === "user") {
                        E = "active";
                        I = ""
                    } else if (k.autoplayVote === -1) {
                        I = "active";
                        E = ""
                    }
                }
                x.push('<div id="', k.queueSongID, '" rel="', k.SongID, '" class="', A, ' queueSong">', '<a class="remove" title="', $.localize.getString("removeSong"), '"></a>', '<div class="albumart">', '<div class="radio_options ', v && v.autoplayEnabled ? "active" : "", '">', '<a class="smile ', E, '" title="', $.localize.getString("QUEUE_ITEM_SMILE"), '"></a>', '<a class="frown ', I, '" title="', $.localize.getString("QUEUE_ITEM_FROWN"), 
                '"></a>', "</div>", '<div class="song_options ', t, " ", w, '">', '<a class="collection ', w, ' textToggle" title="', $.localize.getString("QUEUE_ADD_SONG_FAVORITE_TITLE"), '"></a>', '<a class="options selectbox" title="', $.localize.getString("QUEUE_ITEM_OPTIONS"), '"></a>', "</div>", '<a class="play ', q, '" rel="', k.queueSongID, '"></a>', '<img src="', k.getImageURL(a.queueSize == "l" ? 90 : 70), '" height="100%" width="100%" />', "</div>", '<a title="', _.cleanText(k.SongName), '" class="queueSong_name song ellipsis" rel="', 
                k.SongID, '">', _.cleanText(k.SongName), "</a>", '<a href="', _.cleanUrl(k.ArtistName, k.ArtistID, "artist"), '" title="', _.cleanText(k.ArtistName), '" class="queueSong_artist artist ellipsis">', _.cleanText(k.ArtistName), "</a>", "</div>");
                return x.join("")
            }
        },smallQueueSongToHtml: function(k, n, o) {
            var q = "paused", x = [], v = a.getCurrentQueue(), A = "", t = k.fromLibrary ? "inLibrary" : "", w = k.isFavorite ? "isFavorite" : "";
            if (k.context.data && k.context.data.hasOwnProperty("CoverArtFilename"))
                k.CoverArtFilename = k.context.data.CoverArtFilename;
            if (v.activeSong && k.queueSongID === v.activeSong.queueSongID) {
                A += " active";
                if (a.isPlaying)
                    q = ""
            }
            if (v.autoplayEnabled)
                if (k.autoplayVote === -1 || n === o - 1 && k.source !== "user")
                    A += " suggestion";
            x.push('<div id="', k.queueSongID, '" rel="', k.SongID, '" class="', A, ' queueSong small">', '<div class="albumart ', t, " ", w, '">', '<a class="play ', q, '" rel="', k.queueSongID, '"></a>', '<a class="collection ', w, ' textToggle" title="', $.localize.getString("QUEUE_ADD_SONG_FAVORITE_TITLE"), '"></a>', '<a class="options selectbox" title="', 
            $.localize.getString("QUEUE_ITEM_OPTIONS"), '"></a>', '<img src="', k.getImageURL(70), '" height="33" width="33" />', "</div>", '<a class="remove" title="', $.localize.getString("removeSong"), '"></a>', '<a title="', _.cleanText(k.SongName), '" class="queueSong_name song ellipsis" rel="', k.SongID, '">', _.cleanText(k.SongName), "</a>", '<a href="', _.cleanUrl(k.ArtistName, k.ArtistID, "artist"), '" title="', _.cleanText(k.ArtistName), '" class="queueSong_artist artist ellipsis">', _.cleanText(k.ArtistName), "</a>", "</div>");
            return x.join("")
        }})
})();
GS.Controllers.BaseController.extend("GS.Controllers.YoutubeController", {isGSSingleton: true}, {readyCallbacks: [],API_URL: "http://gdata.youtube.com/feeds/api/videos",DEV_KEY: "AI39si6SJVyxgw9MFbAdbXE-wbtZFdTl8qnY2UWX3dFA97c9PrcfAYDpqUh0iLeVEkurJsjUvDmObBWvLX-wmsy_kW8KHAgN-Q",APPLICATION_ID: "Grooveshark",lastError: null,init: function() {
        window.onYouTubePlayerReady = function(c) {
            var a = GS.getYoutube(), b = a.makeVideoObject($("#" + c)[0], c), g = true;
            if (a.readyCallbacks[c]) {
                g = a.readyCallbacks[c](b);
                delete a.readyCallbacks[c]
            }
            g !== 
            false && b.play()
        };
        this._super()
    },attachPlayer: function(c, a, b, g, h) {
        var m = "videoVObj" + g, k = "http://www.youtube.com/v/" + c + "?version=3&enablejsapi=1&version=3&fs=1&playerapiid=" + m, n = {id: m,name: m,allowFullScreen: "true"};
        if (!c || _.notDefined(c))
            return false;
        a = a || 480;
        b = b || 385;
        if ($.isFunction(h))
            GS.getYoutube().readyCallbacks[m] = h;
        swfobject.embedSWF(k, g, a, b, "8", null, {}, {allowScriptAccess: "always",allowFullScreen: "true"}, n)
    },makeVideoObject: function(c, a) {
        var b = {callbacks: [],addEvent: function(g, h) {
                if ($.isFunction(h)) {
                    var m = 
                    "yt" + g + a + Math.floor(Math.random() * 1001);
                    window[m] = h;
                    h = m;
                    this.callbacks.push(m)
                }
                c.addEventListener(g, h)
            },play: function() {
                c.playVideo()
            },playVideoAt: function(g) {
                c.playVideoAt(g)
            },pause: function() {
                c.pauseVideo()
            },isPaused: function() {
                var g = this.getState();
                return g != 1 && g != 3
            },getState: function() {
                return c.getPlayerState()
            },stop: function() {
                c.stopVideo()
            },getCurrentTime: function() {
                return c.getCurrentTime()
            },getDuration: function() {
                return c.getDuration()
            },getVideoUrl: function() {
                return c.getVideoUrl()
            },getVolume: function() {
                return c.getVolume() / 
                100
            },setVolume: function(g) {
                c.setVolume(g * 100)
            },loadVideoById: function(g) {
                c.loadVideoById(g);
                GS.getGuts().gaTrackEvent("youtube", "loadVideoById", g)
            },loadVideoByUrl: function(g) {
                c.loadVideoByUrl(g)
            }};
        $(c).parent().bind("remove", function() {
            try {
                b.callbacks && b.callbacks.length && _.forEach(b.callbacks, function(h) {
                    window[h] = null
                })
            } catch (g) {
            }
        });
        return b
    },searchCache: {},search: function(c, a, b, g, h) {
        c = $.trim(_.orEqual(c, ""));
        a = _.orEqual(a, 10);
        if ((!c || c == "") && h) {
            c = '"' + h.SongName.replace(/[\(\[][a-zA-Z0-9\s]+[\]\)]/g, 
            "") + '"';
            c = h.ArtistName.toLowerCase() != "unknown" && h.ArtistName.toLowerCase() != "unknown artist" ? ['"' + h.ArtistName + '"' || "", c || ""].join(" ") : c;
            c = $.trim(c)
        }
        if (!c) {
            $.isFunction(g) && g();
            return false
        }
        if (this.searchCache[c] && $.isFunction(b))
            b(this.searchCache[c]);
        else {
            var m = "jQueryYoutube" + OAuth.nonce(10), k = {"max-results": a,orderBy: "relevance",safeSearch: "none",alt: "json-in-script",time: "all_time","start-index": 1,q: c,callback: m,key: this.DEV_KEY,v: 2,category: "music",restriction: gsConfig.remoteAddr,format: 5};
            a = this.API_URL;
            OAuth.completeRequest({method: "GET",action: a,parameters: k}, {consumerKey: this.APPLICATION_ID,consumerSecret: this.DEV_KEY});
            k = OAuth.getParameterMap(k);
            a = a + "?" + _.httpBuildQuery(k);
            $.ajax({url: a,success: this.callback("searchSuccess", b, g, c, h),error: this.callback("searchFailed", g),dataType: "jsonp",jsonp: false,jsonpCallback: m,cache: true});
            GS.getGuts().gaTrackEvent("youtube", "search", c)
        }
    },searchSuccess: function(c, a, b, g, h) {
        if (h.feed && h.feed.entry) {
            var m = [], k = {};
            _.forEach(h.feed.entry, function(n) {
                if (n.media$group && 
                n.media$group.media$thumbnail) {
                    k = {Author: "",Description: "",Duration: 0,Rating: 0,LikeRatio: 0,VideoID: "",Plays: 0,URL: "",Title: "",Thumbnails: []};
                    if (n.author && n.author[0] && n.author[0].name && n.author[0].name.$t)
                        k.Author = n.author[0].name.$t;
                    else if (n.media$group.media$credit && n.media$group.media$credit.$t)
                        k.Author = n.media$group.media$credit.$t;
                    if (n.media$group.media$description && n.media$group.media$description.$t)
                        k.Description = n.media$group.media$description.$t;
                    if (n.media$group.yt$duration && n.media$group.yt$duration.seconds)
                        k.Duration = 
                        parseInt(n.media$group.yt$duration.seconds);
                    if (n.gd$rating && n.gd$rating.average)
                        k.Rating = parseFloat(n.gd$rating.average);
                    if (n.yt$rating && n.yt$rating.numLikes && n.yt$rating.numDislikes)
                        k.LikeRatio = parseInt(n.yt$rating.numLikes) / parseInt(n.yt$rating.numDislikes);
                    if (n.media$group.yt$videoid && n.media$group.yt$videoid.$t)
                        k.VideoID = n.media$group.yt$videoid.$t;
                    else if (n.id) {
                        var o = n.id.split(":");
                        k.VideoID = o[o.length - 1]
                    }
                    if (n.yt$statistics && n.yt$statistics.viewCount)
                        k.Plays = parseInt(n.yt$statistics.viewCount);
                    if (n.title && n.title.$t)
                        k.Title = n.title.$t;
                    if (n.link && n.link[0] && n.link.href)
                        k.URL = n.link.href;
                    _.forEach(n.media$group.media$thumbnail, function(q) {
                        if (q.yt$name)
                            switch (q.yt$name) {
                                case "default":
                                    k.Thumbnails.unshift(q);
                                    return;
                                case "hqdefault":
                                    k.Thumbnails.length && k.Thumbnails[0].yt$name == "default" ? k.Thumbnails.splice(1, 0, q) : k.Thumbnails.unshift(q);
                                    return
                            }
                        k.Thumbnails.push(q)
                    });
                    k = GS.Models.Video.wrapYoutube(k);
                    m.push(k)
                }
            });
            if (g)
                m = this.filterSearchResults(g, m);
            this.searchCache[b] = m;
            $.isFunction(c) && c(m)
        } else {
            this.lastError = 
            h;
            $.isFunction(a) && a(h)
        }
    },filterSearchResults: function(c, a) {
        var b = [], g = "";
        if (c && c.ArtistName)
            g = c.ArtistName.match(/[a-z0-9]/gi).join("").toLowerCase();
        _.forEach(a, function(h, m) {
            if (h.VideoID && h.Author && h.Duration > 60) {
                h.weight = Math.floor(4.01 * (a.length - m));
                if (h.Author.toLowerCase().lastIndexOf("vevo") > -1)
                    h.weight *= 9.7;
                else if (h.Author.toLowerCase().lastIndexOf("emimusic") > -1)
                    h.weight *= 8.98;
                if (g)
                    if (h.Author.toLowerCase().indexOf(g) > -1)
                        h.weight *= 2.101;
                if (h.Author.toLowerCase().lastIndexOf("records") > 
                -1)
                    h.weight *= 2.209;
                var k = h.Title.toLowerCase();
                if (k.lastIndexOf("parody") > -1)
                    h.weight *= 0.203;
                else if (k.lastIndexOf("official") > -1)
                    h.weight *= 2.51;
                for (k = 0; k < b.length; k++)
                    if (b[k].weight < h.weight) {
                        b.splice(k, 0, h);
                        return
                    }
                b.push(h)
            }
        });
        return b
    },searchFailed: function(c, a) {
        this.lastError = a;
        $.isFunction(c) && c(a)
    },loadFloppyMusic: function() {
        var c = [];
        _.forEach([{Author: "sh4dowww90",Description: "Another useless device. Imperial march played by two floppy disk drives. Read the note about the next video: silent.org.pl Homepage: silent.org.pl Post in English: silent.org.pl Po polsku: silent.org.pl",
                VideoID: "yHJOz_y9rZE",Title: "Floppy music DUO - Imperial march",type: "youtube",duration: 84,thumbnail: "http://i.ytimg.com/vi/yHJOz_y9rZE/default.jpg",width: 480,height: 385}, {Author: "ToxicTripod0",Description: "Another attempt at playing midi on floppy drives",VideoID: "dmwLEf_2Tk8",Title: "Floppy Mario Theme",type: "youtube",duration: 51,thumbnail: "http://i.ytimg.com/vi/dmwLEf_2Tk8/default.jpg",width: 480,height: 385}, {Author: "Sammy1Am",Description: 'My second multi-floppy song, as suggested by Neutrino. I\'m using an Arduino UNO hooked up to three drives (one 5.25" and two 3.5").',
                VideoID: "VJhvRQHNM1w",Title: "Floppy Kirby's Theme",type: "youtube",duration: 82,thumbnail: "http://i.ytimg.com/vi/VJhvRQHNM1w/default.jpg",width: 480,height: 385}, {Author: "CoolNapkins",Description: "Playing around with an old computer and the floppymidi driver for BeOS 1. Tetris 2. Super Mario 3. Zelda 4. Mr. Roboto 5. 1812 Overture",VideoID: "QkkrQ8xHJlM",Title: "The Floppy Music Machine",type: "youtube",duration: 252,thumbnail: "http://i.ytimg.com/vi/QkkrQ8xHJlM/default.jpg",width: 480,height: 385}, {Author: "Sammy1Am",
                Description: "Theme from Tetris as played on three floppy drives.",VideoID: "73Sie3yrcnE",Title: "Floppy Korobeiniki (Tetris Theme)",type: "youtube",duration: 68,thumbnail: "http://i.ytimg.com/vi/73Sie3yrcnE/default.jpg",width: 480,height: 385}], function(a) {
            c.push(GS.Models.Video.wrapYoutube(a))
        });
        GS.getLightbox().open("video", {videos: c})
    },loadDubstep: function() {
        var c = GS.Models.Video.wrapYoutube({Author: "tobyharris100",Description: "",VideoID: "QbZhbZBK2ZY",Title: "How To Dance To Dubstep! Parrot",type: "youtube",
            duration: 163,thumbnail: "http://i.ytimg.com/vi/QbZhbZBK2ZY/default.jpg",width: 480,height: 385});
        GS.getLightbox().open("video", {video: c})
    },embedYoutubeAd: function(c, a, b, g, h, m, k, n, o, q, x) {
        var v = "ytAdPlayer" + Math.floor(Math.random() * 9);
        a = "http://www.youtube.com/v/" + a + "?version=3&controls=0&enablejsapi=1&showinfo=1&showsearch=0&iv_load_policy=3disablekb=1&playerapiid=" + v;
        var A = {id: v,name: v}, t = GS.player.player.getVolume();
        b = b || 560;
        g = g || 315;
        t = t ? t < 30 ? 0.3 : t / 100 : 1;
        m || (m = 30);
        var w = 0, E, I = false, D = 0;
        this.readyCallbacks[v] = 
        function(G) {
            D && clearTimeout(D);
            G.setVolume(t);
            G.addEvent("onStateChange", function(H) {
                if (H == 1) {
                    if (h && !I) {
                        h();
                        I = true
                    }
                    E && clearInterval(E);
                    setTimeout(function() {
                        E = setInterval(function() {
                            w++;
                            w == m && k && k();
                            o && o(w, m)
                        }, 1E3)
                    }, 0)
                } else if (H == 2 || H == 3) {
                    if (E) {
                        clearInterval(E);
                        E = null
                    }
                } else if (H == 0) {
                    n && n();
                    if (E) {
                        clearInterval(E);
                        E = null
                    }
                }
            });
            q && G.addEvent("onError", q);
            return x
        };
        swfobject.embedSWF(a, c, b, g, "8", null, null, {allowScriptAccess: "always"}, A);
        D = setTimeout(function() {
            q && q();
            delete GS.getYoutube().readyCallbacks[v]
        }, 
        8E3)
    }});
GS.Controllers.BaseController.extend("GS.Controllers.VimeoController", {isGSSingleton: true}, {f: null,API_URL: "http://vimeo.com/api/rest/v2/",API_KEY: "6bf5b02fd725f336e2587ee7feadcb42",API_SECRET: "247c4b613fcf18b5",init: function() {
        if (window.$f) {
            this.f = window.$f;
            window.$f = null
        }
        if (window.Froogaloop) {
            if (!this.f)
                this.f = window.Froogaloop;
            window.Froogaloop = null
        }
        this._super()
    },attachPlayer: function(c, a, b, g, h) {
        if (this.f) {
            var m = "http://player.vimeo.com/video/" + c + "?api=1&player_id=videoVObj" + g + "&autoplay=1";
            if (!c || 
            _.notDefined(c))
                return false;
            a = a || 480;
            b = b || 385;
            c = $("<iframe />").width(a).height(b).attr("src", m).attr("id", "videoVObj" + g);
            $("#" + g).html(c);
            var k = this.makeVideoObject($("#videoVObj" + g)[0]);
            h && k.addEvent("ready", function() {
                h(k)
            });
            return k[0]
        }
    },makeVideoObject: function(c) {
        var a = this.f(c);
        return {addEvent: function(b, g) {
                a.addEvent(b, g)
            },play: function() {
                a.api("play")
            },pause: function() {
                a.api("pause")
            },isPaused: function(b) {
                a.api("paused", b)
            },stop: function() {
                a.api("unload")
            },getCurrentTime: function(b) {
                a.api("getCurrentTime", 
                b)
            },getVideoUrl: function(b) {
                a.api("getVideoUrl", b)
            }}
    },searchCache: {},search: function(c, a, b) {
        if (!c || c == "")
            return false;
        this.searchCache[c] && $.isFunction(a) && a(this.searchCache[c]);
        var g = "jQueryVimeo" + OAuth.nonce(10), h = {per_page: 10,query: c,method: "vimeo.videos.search",full_response: 1,format: "jsonp",callback: g}, m = this.API_URL;
        OAuth.completeRequest({method: "GET",action: m,parameters: h}, {consumerKey: this.API_KEY,consumerSecret: this.API_SECRET});
        h = OAuth.getParameterMap(h);
        m = m + "?" + _.httpBuildQuery(h);
        $.ajax({url: m,
            success: this.callback("searchSuccess", a, b, c),error: this.callback("searchFailed", b),dataType: "jsonp",jsonp: false,jsonpCallback: g,cache: true})
    },searchSuccess: function(c, a, b, g) {
        if (g.videos && g.videos.video) {
            var h = [];
            _.forEach(g.videos.video, function(m) {
                h.push({Description: m.description || "",Duration: parseInt(m.duration),Height: parseInt(m.height),Width: parseInt(m.width),VideoID: m.id,Plays: parseInt(m.number_of_plays),Title: m.title || "",URL: "http://vimeo.com/" + m.id,Thumbnails: m.thumbnails.thumbnail})
            });
            this.searchCache[b] = 
            h;
            $.isFunction(c) && c(h)
        } else {
            this.lastError = g;
            $.isFunction(a) && a(g)
        }
    },searchFailed: function(c, a) {
        this.lastError = a;
        $.isFunction(c) && c(a)
    }});
(function() {
    function c(m) {
        return ["<span class='slick-column-name' data-translate-text='", m.name, "'>", $.localize.getString(m.name), "</span>"].join("")
    }
    function a(m, k, n, o, q) {
        m = _.ucwords(o.name);
        k = $("#grid").controller();
        if (q.IsVerified == 0.5)
            return o.name == "ARTIST" ? k.filter.hasOwnProperty("onlyVerified") && !k.filter.onlyVerified ? ['<div class="showMore showingMore" data-translate-text="SEARCH_RESULTS_SHOW_LESS">', $.localize.getString("SEARCH_RESULTS_SHOW_LESS"), "</div>"].join("") : ['<div class="showMore" data-translate-text="SEARCH_RESULTS_SHOW_MORE">', 
                $.localize.getString("SEARCH_RESULTS_SHOW_MORE"), "</div>"].join("") : "";
        else {
            o = o.name == "SONG" ? "javascript:_.redirectSong(" + q.SongID + ", event)" : o.name == "USER" ? _.cleanUrl(q.Name, q.UserID, "user") : o.name == "AUTHOR" ? _.cleanUrl(q.UserName, q.UserID, "user") : _.cleanUrl(q[m + "Name"], q[m + "ID"], o.name.toLowerCase());
            return q && q.Collaborative ? ['<a class="field" href="', o, '" class="ellipsis" title="', n, '">', n, '</a><span class="collabMsg right">', _.getString("PLAYLIST_COLLABORATIVE"), "</span>"].join("") : ['<a class="field" href="', 
                o, '" class="ellipsis" title="', n, '">', n, "</a>"].join("")
        }
    }
    function b(m, k, n) {
        return ['<span class="filter field ellipsis" title="', n, '">', n, '</span><span class="arrow rowOption"></span>'].join("")
    }
    function g(m, k, n, o, q) {
        if (q.IsVerified == 0.5)
            return "";
        else {
            m = GS.getGuts();
            k = q.isFavorite ? " isFavorite" : "";
            o = q.fromLibrary ? " inLibrary" : "";
            var x = q.fromLibrary ? "SONG_ROW_REMOVE_SONG_LIBRARY_TITLE" : "SONG_ROW_ADD_SONG_LIBRARY_TITLE", v = q.isFavorite ? "SONG_ROW_REMOVE_SONG_FAVORITE_TITLE" : "SONG_ROW_ADD_SONG_FAVORITE_TITLE", 
            A = GS.player.getCurrentQueue(), t = "SONG_ROW_ADD_SONG_PLAY_TITLE";
            if (A && A.songs && A.songs.length > 0)
                t = "SONG_ROW_ADD_SONG_ADD_TO_PLAYING_TITLE";
            A = m.currentTest && m.currentTest.name == "gridRowPlayV2" ? " AB_" + m.currentTest.name + "_" + m.currentGroup : "";
            if (m.currentTest && m.currentTest.name == "gridRowPlayV2" && m.currentGroup > 1) {
                var w = "";
                if (m.currentGroup > 4)
                    w = ['<a class="addToQueue rowOption', A, '" rel="', q.SongID, '"></a>'].join("");
                return ['<a class="play rowOption', A, '" data-translate-title="', t, '" title="', $.localize.getString(t), 
                    '" rel="', q.SongID, '"></a>', w, '<div class="options ', k, " ", o, '"><a class="rowOption favorite option', k, '" data-translate-title="', v, '" title="', $.localize.getString(v), '" rel="', q.SongID, '"></a><a class="rowOption library option', o, '" data-translate-title="', x, '" title="', $.localize.getString(x), '" rel="', q.SongID, '"></a><a class="rowOption more option grid_song_more', o, '" data-translate-title="OPTIONS" title="', $.localize.getString("OPTIONS"), '" rel="', q.SongID, '"></a></div><span class="songName ellipsis"><a class="songLinkPlay ellipsis" title="', 
                    n, '" rel="', q.SongID, '">', n, "</a></span>"].join("")
            } else
                return ['<a class="play rowOption', A, '" data-translate-title="', t, '" title="', $.localize.getString(t), '" rel="', q.SongID, '"></a><div class="options ', k, " ", o, '"><a class="rowOption favorite option', k, '" data-translate-title="', v, '" title="', $.localize.getString(v), '" rel="', q.SongID, '"></a><a class="rowOption library option', o, '" data-translate-title="', x, '" title="', $.localize.getString(x), '" rel="', q.SongID, '"></a><a class="rowOption more option grid_song_more', 
                    o, '" data-translate-title="OPTIONS" title="', $.localize.getString("OPTIONS"), '" rel="', q.SongID, '"></a></div><span class="songName"><a class="songLink ellipsis" title="', n, '" rel="', q.SongID, '">', n, "</a></span>"].join("")
        }
    }
    function h(m, k, n) {
        n = n == "0" ? "&nbsp;" : n;
        return ['<span class="track">', n, "</span>"].join("")
    }
    GS.Controllers.BaseController.extend("GS.Controllers.GridController", {columns: {song: [{id: "song",name: "SONG",field: "SongName",cssClass: "song",minWidth: 150,formatter: g,behavior: "selectAndMove",
                    sortable: true,columnFormatter: c}, {id: "artist",name: "ARTIST",field: "ArtistName",cssClass: "artist",minWidth: 100,formatter: a,behavior: "selectAndMove",sortable: true,columnFormatter: c}, {id: "album",name: "ALBUM",field: "AlbumName",cssClass: "album",minWidth: 100,formatter: a,behavior: "selectAndMove",sortable: true,columnFormatter: c}, {id: "track",name: "TRACK_NUM",field: "TrackNum",cssClass: "track",minWidth: 70,maxWidth: 90,formatter: h,behavior: "selectAndMove",sortable: true,columnFormatter: c}],albumSongs: [{id: "song",
                    name: "SONG",field: "SongName",cssClass: "song",minWidth: 150,formatter: g,behavior: "selectAndMove",sortable: true,columnFormatter: c,minWidth: 300}, {id: "artist",name: "ARTIST",field: "ArtistName",cssClass: "artist",minWidth: 100,formatter: a,behavior: "selectAndMove",sortable: true,columnFormatter: c}, {id: "track",name: "TRACK_NUM",field: "TrackNum",cssClass: "track",minWidth: 70,maxWidth: 90,formatter: h,behavior: "selectAndMove",sortable: true,columnFormatter: c}],queuesong: [{id: "song",name: "SONG",field: "SongName",cssClass: "song",
                    minWidth: 150,formatter: function(m, k, n, o, q) {
                        m = q.isFavorite ? " isFavorite" : "";
                        k = q.fromLibrary ? " inLibrary" : "";
                        o = q.fromLibrary ? "SONG_ROW_REMOVE_SONG_LIBRARY_TITLE" : "SONG_ROW_ADD_SONG_LIBRARY_TITLE";
                        return ['<a class="play rowOption ', GS.player.isPlaying ? "" : "paused", '" rel="', q.SongID, '"></a><div class="options ', m, " ", k, '"><a class="rowOption favorite option', m, '" rel="', q.SongID, '"></a><a class="rowOption library option', k, '" data-translate-title="', o, '" title="', $.localize.getString(o), '" rel="', q.SongID, 
                            '"></a><a class="rowOption more option', k, '" rel="', q.SongID, '"></a></div><span class="songName"><a class="songLink ellipsis" title="', n, '" rel="', q.SongID, '">', n, "</a></span>"].join("")
                    },behavior: "selectAndMove",sortable: true,columnFormatter: c}, {id: "artist",name: "ARTIST",field: "ArtistName",cssClass: "artist",minWidth: 100,formatter: function(m, k, n, o, q) {
                        m = q.autoplayVote == 1 || q.autoplayVote == 0 && q.source === "user" ? "selected" : "";
                        k = q.autoplayVote == -1 ? "selected" : "";
                        var x = _.ucwords(o.name);
                        o = _.cleanUrl(q[x + 
                        "Name"], q[x + "ID"], o.name.toLowerCase());
                        return ['<div class="options"><a class="rowOption smile rowOption ', m, '"></a><a class="rowOption frown rowOption ', k, '"></a></div><a class="field ellipsis" href="', o, '" title="', n, '">', n, "</a>"].join("")
                    },behavior: "selectAndMove",sortable: true,columnFormatter: c}, {id: "album",name: "ALBUM",field: "AlbumName",cssClass: "album",minWidth: 100,formatter: a,behavior: "selectAndMove",sortable: true,columnFormatter: c}, {id: "track",name: "TRACK_NUM",field: "TrackNum",cssClass: "track",
                    minWidth: 70,maxWidth: 90,formatter: h,behavior: "selectAndMove",sortable: true,columnFormatter: c}],playlistsong: [{id: "song",name: "SONG",field: "SongName",cssClass: "song",minWidth: 150,formatter: g,behavior: "selectAndMove",sortable: false,columnFormatter: c}, {id: "artist",name: "ARTIST",field: "ArtistName",cssClass: "artist",minWidth: 100,formatter: a,behavior: "selectAndMove",sortable: false,columnFormatter: c}, {id: "album",name: "ALBUM",field: "AlbumName",cssClass: "album",minWidth: 100,formatter: a,behavior: "selectAndMove",
                    sortable: false,columnFormatter: c}],album: [{id: "album",name: "ALBUM",field: "AlbumName",cssClass: "albumDetail",formatter: function(m, k, n, o, q) {
                        return ['<a href="', q.toUrl(), '" class="image insetBorder height30"><img src="', q.getImageURL(30), '" width="30" height="30" class="avatar" /></a><a href="', q.toUrl(), '" class="title ellipsis">', q.AlbumName, "</a>"].join("")
                    },behavior: "selectAndMove",sortable: true,columnFormatter: c}, {id: "artist",name: "ARTIST",field: "ArtistName",cssClass: "albumArtist",formatter: a,behavior: "selectAndMove",
                    sortable: true,columnFormatter: c}],artist: [{id: "artist",name: "ARTIST",field: "ArtistName",cssClass: "artist-row",formatter: function(m, k, n, o, q) {
                        return ['<a href="', q.toUrl(), '" class="image insetBorder height30"><img src="', q.getImageURL(30), '" width="30" height="30" class="avatar" /></a><a href="', q.toUrl(), '" class="title ellipsis">', q.ArtistName, "</a>"].join("")
                    },behavior: "selectAndMove",sortable: true,columnFormatter: c}],playlist: [{id: "playlist",name: "PLAYLIST",field: "PlaylistName",cssClass: "playlist",
                    formatter: function(m, k, n, o, q) {
                        k = q.isSubscribed() ? "subscribed" : "";
                        n = GS.page.activePage.objType == "subscribed" ? "alternate" : "";
                        m = q && q.NumSongs && q.Artists ? true : false;
                        if (GS.page.activePage && GS.page.activePage.objType == "collaborative") {
                            o = $.localize.getString("REMOVE");
                            k = q.UserID === GS.user.UserID ? "" : ['<a class="removePlaylist ', k, n, '" rel="', q.PlaylistID, '"><span>', o, "</span></a>"].join("")
                        } else {
                            o = q.isSubscribed() ? $.localize.getString("PLAYLIST_UNSUBSCRIBE") : $.localize.getString("PLAYLIST_SUBSCRIBE");
                            k = q.UserID === 
                            GS.user.UserID ? "" : ['<a class="subscribe ', k, n, '" rel="', q.PlaylistID, '"><span>', o, "</span></a>"].join("")
                        }
                        if (m) {
                            m = q.Artists.split(",");
                            n = m.length;
                            m.splice(3, m.length);
                            n = n > m.length ? "..." : "";
                            return ['<a href="', _.cleanUrl(q.PlaylistName, q.PlaylistID, "playlist"), '" class="image insetBorder height30"><img src="', q.getImageURL(30), '" width="30" height="30" class="albumart" /></a>', k, '<p><span class="title"><a class="v-ellip" href="', _.cleanUrl(q.PlaylistName, q.PlaylistID, "playlist"), '">', _.cleanText(q.PlaylistName), 
                                " (", q.NumSongs, ' Songs) </a></span><span class="artists">', m.join(", "), n, "</span></p>"].join("")
                        } else
                            return ['<a href="', _.cleanUrl(q.PlaylistName, q.PlaylistID, "playlist"), '" class="image insetBorder height30"><img src="', q.getImageURL(30), '" width="30" height="30" class="albumart" /></a>', k, '<p><span class="title"><a class="v-ellip" href="', _.cleanUrl(q.PlaylistName, q.PlaylistID, "playlist"), '">', _.cleanText(q.PlaylistName), "</a></span></p>"].join("")
                    },behavior: "selectAndMove",sortable: true,columnFormatter: c}, 
                {id: "username",name: "AUTHOR",field: "UserName",cssClass: "playlistAuthor",formatter: a,behavior: "selectAndMove",sortable: true,columnFormatter: c}],user: [{id: "username",name: "USER",field: "Name",cssClass: "user",formatter: function(m, k, n, o, q) {
                        m = q.isFavorite ? " following" : "";
                        k = q.isFavorite ? "UNFOLLOW" : "FOLLOW";
                        m = q.UserID === GS.user.UserID ? "" : ['<a class="follow ', m, '" data-follow-userid="', q.UserID, '"><span data-translate-text="' + k + '">', $.localize.getString(k), "</span></a>"].join("");
                        k = _.cleanUrl(q.Name, q.UserID, 
                        "user");
                        n = '<div class="status ' + q.getVipPackage() + '"></div>';
                        return ['<a href="', k, '" class="who image">', n, '<img src="', q.getImageURL(30), '" width="30" height="30" class="avatar" /></a>', m, '<a href="', k, '" class="username">', q.Name, '</a><span class="location">', q.Country, "</span>"].join("")
                    },behavior: "selectAndMove",sortable: true,columnFormatter: c}],albumFilter: [{id: "album",name: "ALBUM",field: "AlbumName",cssClass: "cell-title",formatter: b,behavior: "selectAndMove",sortable: false,collapsable: true,columnFormatter: c}],
            artistFilter: [{id: "artist",name: "ARTIST",field: "ArtistName",cssClass: "cell-title",formatter: b,behavior: "selectAndMove",sortable: false,collapsable: true,columnFormatter: c}],event: [{id: "date",name: "DATE",field: "StartTime",cssClass: "cell-title",formatter: function(m, k, n, o, q) {
                        m = q.StartTime.split(" ");
                        k = m[1] ? m[1].split(":") : "00:00:00";
                        m = m[0].split("-");
                        newDate = new Date(parseInt(m[0], 10), parseInt(m[1], 10) - 1, parseInt(m[2], 10), parseInt(k[0], 10), parseInt(k[1], 10), parseInt(k[2], 10));
                        return ['<div class="field event_calendar" title="', 
                            newDate.format("D M j Y"), '"><span class="field month" >', newDate.format("M"), '</span><span class="field day" >', newDate.format("j"), "</span></div>"].join("")
                    },behavior: "none",sortable: false,columnFormatter: c,minWidth: 40,maxWidth: 45}, {id: "artist",name: "ARTISTS",field: "ArtistName",cssClass: "cell-title",formatter: function(m, k, n) {
                        m = (n || "").split(", ");
                        k = [];
                        n = 0;
                        for (var o = m.length, q = o - 1; n < o; n++)
                            k.push(m[n], n !== q ? ",&nbsp;" : "");
                        return ['<div class="filter"><a class="field url event_tickets" title="', $.localize.getString("BUY_TICKETS"), 
                            '">', $.localize.getString("BUY_TICKETS"), '</a><span class="field artist ellipsis">', k.join(""), "</span></div>"].join("")
                    },behavior: "none",sortable: false,columnFormatter: c}, {id: "location",name: "LOCATION",field: "Location",cssClass: "cell-title",formatter: function(m, k, n, o, q) {
                        return ['<div class="filter venues"><div class="venue-container"><span class="field ellipsis venue" title="', q.VenueName, '">', q.VenueName, '</span><span class="field ellipsis city" title="', q.City, '">', q.City, "</span></div></div>"].join("")
                    },
                    behavior: "none",sortable: false,columnFormatter: c}],topSongs: [{id: "song",name: "TRACK",field: "SongName",cssClass: "song",formatter: g,behavior: "selectAndMove",sortable: false,columnFormatter: c}, {id: "album",name: "ALBUM",field: "AlbumName",cssClass: "album",formatter: a,behavior: "selectAndMove",sortable: true,columnFormatter: c}],station: [{id: "station",name: "STATIONS",field: "StationTitle",cssClass: "station",formatter: function(m, k, n, o, q) {
                        return ['<a class="play rowOption" data-translate-title="STATION_ROW_PLAY_TITLE" title="', 
                            $.localize.getString("STATION_ROW_PLAY_TITLE"), '" data-tagid="', q.TagID, '"></a><span class="field ellipsis stationName" data-translate-text="', n, '" title="', $.localize.getString(n), '">', $.localize.getString(n), "</span>"].join("")
                    },behavior: "selectAndMove",sortable: true,columnFormatter: c}]},options: {enableCellNavigation: true,enableCellRangeSelection: true,onCellRangeSelected: function() {
                console.log("cell range select", arguments)
            },onSelectedRowChanged: function() {
                console.log("selectd row change", arguments)
            },
            forceFitColumns: true,rowHeight: 25,editable: false,enableAddRow: false,rowCssClasses: function(m, k, n) {
                var o = "";
                if (m && m.IsVerified == 1)
                    o = "verified";
                else if (m && m.IsVerified == 0.5)
                    o = "verifiedDivider";
                if (k == n - 1)
                    o += " slick-row-last";
                return o
            },isSelectable: function(m) {
                return m.IsVerified === 0.5 ? false : true
            },dragProxy: function(m) {
                var k = m;
                if (m.length > 1)
                    if (m[0] instanceof GS.Models.Song)
                        k = _.getString("SELECTION_SONGS_COUNT", {count: m.length});
                    else if (m[0] instanceof GS.Models.Playlist)
                        k = _.getString("SELECTION_PLAYLIST_COUNT", 
                        {count: m.length});
                    else if (m[0] instanceof GS.Models.Album)
                        k = _.getString("SELECTION_ALBUM_COUNT", {count: m.length});
                    else {
                        if (m[0] instanceof GS.Models.Artist)
                            k = _.getString("SELECTION_ARTIST_COUNT", {count: m.length})
                    }
                else if (m instanceof Array)
                    k = m[0].toProxyLabel ? m[0].toProxyLabel() : m[0];
                return ['<div class="status"></div><span class="info"><span class="text">', k, "</span></span>"].join("")
            },disableMultiSelect: false},rowHeights: {song: 25,album: 41,artist: 41,playlist: 41,user: 41,event: 41,station: 25},columnsByName: {song: "song",
            SongName: "song",album: "album",AlbumName: "album",artist: "artist",ArtistName: "artist",playlist: "playlist",PlaylistName: "playlist",user: "user",Name: "user",TrackNum: "track",tracknum: "track",track: "track",event: "user",Event: "user"},defaultSort: {song: "ArtistName",album: "TrackNum",artist: "Popularity",user: "Name",playlist: "PlaylistName"},defaultMultiSorts: {SongName: ["SongName", "SongID", "GridKey"],ArtistName: ["ArtistName", "AlbumName", "TrackNum", "SongName", "SongID", "GridKey"],AlbumName: ["AlbumName", "TrackNum", 
                "SongName", "SongID", "GridKey"],TrackNum: ["TrackNum", "SongName", "SongID"],Popularity: ["Popularity", "Weight", "NumPlays", "ArtistName", "AlbumName", "TrackNum", "SongName", "SongID"]},numericColumns: {Rank: true,Sort: true,TrackNum: true,Popularity: true,Weight: true,NumPlays: true,Score: true,IsVerified: true,GridKey: true},forcedSortDirections: {TSAdded: false,TSFavorited: false,Popularity: false,TrackNum: true},init: function() {
            this._super();
            window.ctrlDown = false;
            $(document).keydown(this.callback(function(m) {
                if (!window.ctrlDown && 
                (m.ctrlKey || m.metaKey || m.shiftKey || m.keyCode == 16 || m.keyCode == 17)) {
                    $("div.gs_grid.songs .grid-canvas").addClass("noLinks");
                    window.ctrlDown = true
                }
            }));
            $(document).keyup(this.callback(function(m) {
                if (window.ctrlDown && (!(m.ctrlKey || m.metaKey || m.shiftKey) || m.keyCode == 16 || m.keyCode == 17)) {
                    $("div.gs_grid.songs .grid-canvas").removeClass("noLinks");
                    window.ctrlDown = false
                }
            }))
        },resizeTimer: null,resizeAfterRender: function() {
            this.resizeTimer && clearTimeout(this.resizeTimer);
            this.resizeTimer = setTimeout(function() {
                GS.resize();
                $(".gs_grid").resize()
            }, 500)
        }}, {dataView: null,grid: null,idProperty: null,selectedRowIDs: [],currentRow: 0,filter: {artistIDs: false,albumIDs: false,onlyVerified: false},sortCol: "",sortCols: [],sortDir: 1,origSortDir: 1,onInitSort: true,sortNumeric: false,pastSorts: {},searchString: "",data: null,columns: null,options: null,type: null,resizeSelf: function() {
            if (this.element)
                this.element.hasClass("songList") ? this.element.css({height: Math.min(200, Math.max(25, (this.data || []).length * this.options.rowHeight)),width: this.element.parent().innerWidth()}) : 
                this.element.css({height: Math.min(this.element.parent().height(), $("#page").height()),width: this.element.parent().width()});
            this.grid && this.grid.resizeAndRender()
        },init: function(m, k, n, o, q, x, v) {
            function A(D, G) {
                var H, B, L, F, K, N = 1;
                if (t.options.isFilter || t.options.useVerifiedSort)
                    t.sortCols = ["IsVerified", t.sortCol];
                L = 0;
                for (F = t.sortCols.length; L < F; L++) {
                    K = t.sortCols[L];
                    if (N != 1)
                        N = 1;
                    if (K == "IsVerified")
                        N = t.sortDir ? -1 : 1;
                    if (t.Class.numericColumns[K]) {
                        H = parseFloat(_.notDefined(D) || _.notDefined(D[K]) ? -5000000 : 
                        D[K], 10);
                        B = parseFloat(_.notDefined(G) || _.notDefined(G[K]) ? -5000000 : G[K], 10);
                        if (isNaN(H))
                            H = 0;
                        if (isNaN(B))
                            B = 0;
                        if (K === "TrackNum") {
                            if (H !== 0 && B === 0)
                                return t.sortDir ? -1 : 1;
                            if (B !== 0 && H === 0)
                                return t.sortDir ? 1 : -1
                        }
                    } else {
                        H = _.notDefined(D) || !_.isString(D[K]) ? "" : D[K].toString().toLowerCase();
                        B = _.notDefined(G) || !_.isString(G[K]) ? "" : G[K].toString().toLowerCase()
                    }
                    if (H !== B)
                        return (H > B ? 1 : -1) * N
                }
                return 0
            }
            q = _.orEqual(q, "song");
            o = _.orEqual(o, {});
            o.rowHeight = _.orEqual(o.rowHeight, GS.Controllers.GridController.rowHeights[q]);
            o.allowDragSort = _.orEqual(o.allowDragSort, false);
            o.allowDropOn = _.orEqual(o.allowDropOn, false);
            o.allowDuplicates = _.orEqual(o.allowDuplicates, false);
            o.useVerifiedSort = _.orEqual(o.useVerifiedSort, false);
            o.searchText = _.orEqual(o.searchText, "searchText");
            o = $.extend({}, GS.Controllers.GridController.options, o);
            if (o.allowDragSort)
                o.autoDragScroll = true;
            GS.getGuts().logEvent("gridInitialized", {type: q});
            this.subscribe("gs.auth." + q + ".update", this.callback(q + "Change"));
            v && this.subscribe("gs.auth.favorites." + q + 
            "s.update", this.callback(q + "FavoritesChange"));
            this.subscribe("gs.player.queue.change", this.callback("queueChange"));
            v = GS.player.getCurrentQueue();
            this.element.toggleClass("hasSongs", v && v.songs && v.songs.length > 0);
            this.data = k;
            this.columns = n;
            this.options = o;
            this.type = q;
            this.idProperty = this.grid = this.dataView = null;
            this.selectedRowIDs = [];
            this.currentRow = 0;
            this.filter = _.orEqual(o.filters, {artistIDs: false,albumIDs: false,onlyVerified: false});
            this.sortCol = _.orEqual(o.sortCol, GS.Controllers.GridController.defaultSort[q]);
            this.sortCols = _.orEqual(GS.Controllers.GridController.defaultMultiSorts[this.sortCol], $.makeArray(this.sortCol));
            this.origSortDir = this.sortDir = (this.sortDir = _.orEqual(o.sortDir, 1)) ? true : false;
            this.onInitSort = _.orEqual(o.onInitSort, false);
            this.sortNumeric = GS.Controllers.GridController.numericColumns[this.sortCol] ? true : false;
            this.pastSorts = {};
            this.searchString = "";
            this.allowDragSort = _.orEqual(o.allowDragSort, false);
            this.allowDropOn = _.orEqual(o.allowDropOn, false);
            var t = this;
            this.idProperty = _.orEqual(x, 
            _.ucwords(q) + "ID");
            this.dataView = new Slick.Data.DataView;
            this.grid = new Slick.Grid($(m), this.dataView.rows, this.columns, this.options);
            this.dataView.setAllowDuplicates(this.options.allowDuplicates);
            this.grid.onContextMenu = function(D, G) {
                D.preventDefault();
                var H = t.grid.getSelectedRows().sort(function(F, K) {
                    return F - K
                }), B = [];
                if (!(H.length > 1) || H.indexOf(G) === -1) {
                    t.currentRow = G;
                    t.grid.setSelectedRows([G]);
                    t.grid.onSelectedRowsChanged();
                    H = [G]
                }
                switch (t.type) {
                    case "artist":
                        B = GS.Models.Artist.getOneFromCache(t.dataView.rows[G].ArtistID).getContextMenu();
                        break;
                    case "album":
                        B = GS.Models.Album.getOneFromCache(t.dataView.rows[G].AlbumID).getContextMenu();
                        break;
                    case "song":
                        if (H.length > 1) {
                            B = [];
                            for (var L = 0; L < H.length; L++)
                                B.push(t.dataView.rows[H[L]].SongID);
                            B = t.getContextMenuMultiselectForSong(B)
                        } else
                            B = t.getContextMenuForSong(t.dataView.rows[G].SongID);
                        break;
                    case "playlist":
                        H = GS.Models.Playlist.getOneFromCache(t.dataView.rows[G].PlaylistID);
                        if (!H && GS.user.PageNameData.CollabPlaylists)
                            H = GS.Models.Playlist.wrap(GS.user.PageNameData.CollabPlaylists[t.dataView.rows[G].PlaylistID], 
                            false);
                        B = H.getContextMenu();
                        break;
                    case "station":
                        B = GS.Models.Station.getOneFromCache(t.dataView.rows[G].StationID).getContextMenu();
                        break;
                    case "user":
                        B = GS.Models.User.getOneFromCache(t.dataView.rows[G].UserID).getContextMenu();
                        break
                }
                $(D.target).jjmenu(D, B, null, {xposition: "mouse",yposition: "mouse",show: "show",className: "contextmenu",shouldLog: true})
            };
            this.grid.onDblClick = function(D, G) {
                var H = t.dataView.rows[G];
                if (!($(D.target).parents(".options").length > 0))
                    if (!$(D.target).is("a.play"))
                        if (t.options.isNowPlaying && 
                        H.queueSongID)
                            GS.player.playSong(H.queueSongID);
                        else if (H.SongID) {
                            var B = GS.Controllers.PageController.getActiveController().getPlayContext();
                            GS.player.addSongAndPlay(H.SongID, B);
                            B = {songID: H.SongID,rank: parseInt(G, 10) + 1};
                            if (H.ppVersion)
                                B.ppVersion = H.ppVersion;
                            GS.getGuts().logEvent("doubleClickToPlay", B)
                        } else
                            H.StationID && GS.player.setAutoplay(true, H.StationID)
            };
            this.grid.onKeyDown = function(D) {
                if (D.which === 65 && (D.ctrlKey || D.metaKey)) {
                    D = [];
                    t.selectedRowIDs = [];
                    for (var G = 0; G < t.dataView.rows.length; G++) {
                        D.push(G);
                        t.selectedRowIDs.push(t.dataView.rows[G].id)
                    }
                    t.currentRow = t.dataView.rows.length - 1;
                    t.grid.setSelectedRows(_.arrUnique(D));
                    t.grid.onSelectedRowsChanged();
                    return true
                }
                if (t.handleKeyPress(D))
                    return true;
                return $(D.target).is("input,textarea,select") ? true : false
            };
            this.grid.onSelectedRowsChanged = function() {
                t.selectedRowIDs = [];
                var D, G, H = t.grid.getSelectedRows().sort(function(L, F) {
                    return L - F
                }), B = {};
                if (t.options.isFilter) {
                    if (H.length === 1 && H[0] === 0 && t.dataView.getItemByIdx(0)[t.idProperty] === -1)
                        H = [];
                    D = H.indexOf(0);
                    if (D > -1) {
                        H.splice(D, 1);
                        t.grid.setSelectedRows(H);
                        t.grid.onSelectedRowsChanged();
                        return
                    }
                    H.length === 0 ? $(".slick-row[row=0]", t.element).addClass("selected") : $(".slick-row[row=0]", t.element).removeClass("selected")
                }
                D = 0;
                for (l = H.length; D < l; D++)
                    if (G = t.dataView.rows[H[D]]) {
                        t.selectedRowIDs.push(G[t.idProperty]);
                        B[G[t.idProperty]] = true
                    }
                t.selectedRowIDs = _.arrUnique(t.selectedRowIDs);
                if (t.options.isFilter)
                    if (t.type === "album") {
                        if (H.length === 0)
                            $(".gs_grid.songs").controller().filter.albumIDs = false;
                        else
                            $(".gs_grid.songs").controller().filter.albumIDs = 
                            B;
                        $(".gs_grid.songs").controller().dataView.refresh()
                    } else if (t.type === "artist") {
                        if (H.length === 0) {
                            $(".gs_grid.songs").controller().filter.artistIDs = false;
                            $(".gs_grid.albums").controller().filter.artistIDs = false
                        } else {
                            $(".gs_grid.songs").controller().filter.artistIDs = B;
                            $(".gs_grid.albums").controller().filter.artistIDs = B
                        }
                        $(".gs_grid.songs").controller().dataView.refresh();
                        $(".gs_grid.albums").controller().dataView.refresh();
                        $(".gs_grid.albums").controller().grid.onSelectedRowsChanged()
                    }
                t.currentRow = 
                _.orEqual(t.grid.getSelectedRows()[H.length - 1], 0);
                $.publish("gs.grid.selectedRows", {len: t.selectedRowIDs.length,type: t.type})
            };
            $(".slick-header-column").click(function() {
                $(this).addClass("selected");
                $(this).siblings().removeClass("selected")
            });
            this.grid.onSort = function(D, G, H) {
                var B, L;
                if (_.notDefined(G))
                    G = _.defined(t.pastSorts[D]) && D == t.sortCol ? !t.pastSorts[D] : true;
                t.sortColData = D;
                t.sortName = D.name ? D.name : null;
                t.sortCol = D.field ? D.field : D;
                t.sortCols = _.orEqual(GS.Controllers.GridController.defaultMultiSorts[t.sortCol], 
                $.makeArray(t.sortCol));
                t.sortDir = G ? true : false;
                t.element.find(".slick-sort-indicator").removeClass("slick-sort-indicator-asc").removeClass("slick-sort-indicator-desc");
                B = GS.Controllers.GridController.columnsByName[t.sortCol];
                L = GS.Controllers.GridController.forcedSortDirections[t.sortCol];
                if (_.defined(B))
                    t.grid.setSortColumn(B, t.sortDir);
                else
                    t.sortDir = _.defined(L) ? L : t.origSortDir;
                t.pastSorts[t.sortCol] = t.sortDir;
                t.sortNumeric = GS.Controllers.GridController.numericColumns[t.sortCol] ? true : false;
                t.dataView.sort(A, 
                t.sortDir);
                if (!H && D) {
                    H = $("button.dropdownButton.sort").find("span.label");
                    if (t.sortName) {
                        if (t.sortName == "PLAYLIST" || t.sortName == "USER")
                            t.sortName = "NAME";
                        H.attr("data-translate-text", "SORT_BY_" + t.sortName);
                        H.text($.localize.getString("SORT_BY_" + t.sortName))
                    } else if (t.columns) {
                        B = 0;
                        for (L = t.columns.length; B < L; B++)
                            if (t.columns[B] && t.columns[B].field === t.sortCol) {
                                B = "SORT_BY_" + t.columns[B].name;
                                if (GS.page.activePageName === "UserMusicController" && B == "SORT_BY_PLAYLIST")
                                    B = "SORT_BY_NAME";
                                H.attr("data-translate-text", 
                                B);
                                H.text($.localize.getString(B));
                                break
                            }
                    }
                    if (GS.page.activePageName === "UserMusicController" && GS.page.activePageIdentifier == GS.user.UserID) {
                        B = "gs.sort.user.music";
                        H = GS.page.getActiveController().subpage;
                        if (H == "playlists")
                            B = "gs.sort.user.playlists";
                        else if (H == "subscribed")
                            B = "gs.sort.user.subscribed";
                        GS.store.set(B, {sortCol: D,sortDir: G,onInitSort: false})
                    }
                }
            };
            t.dataView.onRowCountChanged.subscribe(function() {
                t.grid.updateRowCount()
            });
            t.dataView.onRowsChanged.subscribe(function(D) {
                t.grid.removeRows(D);
                t.grid.resizeAndRender();
                if (t.selectedRowIDs.length > 0) {
                    D = [];
                    for (var G, H = 0, B = t.selectedRowIDs.length; H < B; H++) {
                        G = t.dataView.getRowById(t.selectedRowIDs[H]);
                        G !== undefined && D.push(G)
                    }
                    t.currentRow = _.orEqual(G, 0);
                    t.grid.setSelectedRows(_.arrUnique(D))
                } else {
                    t.currentRow = 0;
                    t.grid.setSelectedRows([])
                }
                t.grid.onSelectedRowsChanged()
            });
            t.grid.onBeforeMoveRows = function() {
                return t.allowDragSort
            };
            t.grid.onMoveRows = function(D, G) {
                var H = [], B = [], L = [], F = t.dataView.getItems(), K, N, r, s;
                if (!(!t.allowDragSort || t.sortCol !== 
                "Sort"))
                    if (t.options.playlistID) {
                        H = GS.Models.Playlist.getOneFromCache(t.options.playlistID);
                        if (!H && GS.user.PageNameData.CollabPlaylists)
                            H = GS.Models.Playlist.wrap(GS.user.PageNameData.CollabPlaylists[t.options.playlistID], false);
                        H && H.moveSongsTo(D, G)
                    } else {
                        K = F.slice(0, G);
                        N = F.slice(G, F.length);
                        r = 0;
                        for (s = D.length; r < s; r++) {
                            F[D[r]].Sort = r;
                            H.push(F[D[r]])
                        }
                        D.sort().reverse();
                        r = 0;
                        for (s = D.length; r < s; r++) {
                            F = D[r];
                            F < G ? K.splice(F, 1) : N.splice(F - G, 1);
                            B.push(K.length + r)
                        }
                        F = K.concat(H.concat(N));
                        r = 0;
                        for (s = F.length; r < 
                        s; r++)
                            F[r].Sort = r + 1;
                        t.data = F;
                        B = _.arrUnique(B);
                        t.currentRow = B[B.length - 1];
                        t.dataView.beginUpdate();
                        t.grid.setSelectedRows(B);
                        t.grid.onSelectedRowsChanged();
                        t.dataView.setItems(t.data, t.idProperty);
                        t.dataView.endUpdate();
                        t.dataView.refresh();
                        if (t.options.isNowPlaying) {
                            K = G;
                            r = 0;
                            for (s = H.length; r < s; r++) {
                                L.push(H[r].queueSongID);
                                B = $("#queue .queueSong:nth-child(" + G + ")");
                                B.after($("#" + H[r].queueSongID).remove());
                                G += 1
                            }
                            GS.player.moveSongsTo(L, K)
                        }
                    }
            };
            if (t.allowDragSort || t.allowDropOn) {
                o = t.grid.getOptions();
                var w = 
                $("#grid .slick-viewport"), E = o.scrollPane ? $(o.scrollPane) : w, I = function(D, G) {
                    var H = D.clientY - w.find(".grid-canvas").offset().top;
                    if (w.within(D.clientX, D.clientY).length > 0) {
                        $(G.proxy).addClass("valid").removeClass("invalid");
                        if (t.allowDragSort) {
                            H = Math.max(0, Math.min(Math.round(H / o.rowHeight), t.dataView && t.dataView.rows ? t.dataView.rows.length : 0));
                            if (H !== G.gridInsertIndex) {
                                if (t.onBeforeMoveRows && t.onBeforeMoveRows(t.grid.getSelectedRows(), H) === false) {
                                    $("div.slick-reorder-guide").css("top", -1000).show();
                                    G.canMove = false
                                } else {
                                    $("div.slick-reorder-guide").css({top: H * o.rowHeight + o.padding}).show();
                                    G.canMove = true
                                }
                                G.gridInsertIndex = H
                            }
                        } else {
                            H = $(".slick-row").within(G.clientX, G.clientY).eq(0);
                            if (H.length) {
                                H.addClass("hover").siblings().removeClass("hover");
                                G.gridInsertIndex = parseInt(H.attr("row"), 10)
                            }
                        }
                    } else {
                        $(G.proxy).addClass("invalid").removeClass("valid");
                        $("div.slick-reorder-guide").hide()
                    }
                    if (o.autoDragScroll) {
                        var B = E.within(D.clientX, D.clientY).length > 0;
                        H = Math.ceil(E.height() * 0.2);
                        var L = o.rowHeight * 
                        (k ? k.length : 0);
                        if (B)
                            if (!($("#shortcuts").within(D.clientX, D.clientY).length > 0 || $("#footer").within(D.clientX, D.clientY).length > 0))
                                if (G.gridAutoScrollWaitTimeout) {
                                    B = function() {
                                        var K = (new Date).valueOf();
                                        if (G.gridAutoScrollHasWaited && (!G.gridAutoScrollLast || K - G.gridAutoScrollLast >= 200)) {
                                            G.gridAutoScrollLast = K;
                                            E.scrollTop(Math.max(0, E.scrollTop() - 41))
                                        }
                                    };
                                    var F = function() {
                                        var K = (new Date).valueOf();
                                        if (G.gridAutoScrollHasWaited && (!G.gridAutoScrollLast || K - G.gridAutoScrollLast >= 200)) {
                                            G.gridAutoScrollLast = 
                                            K;
                                            E.scrollTop(Math.min(L, E.scrollTop() + 41))
                                        }
                                    };
                                    if (E.offset().top + H > D.clientY) {
                                        B();
                                        clearInterval(G.gridAutoScrollInterval);
                                        G.gridAutoScrollInterval = setInterval(B, 200)
                                    } else if (E.offset().top + E.height() - H < D.clientY) {
                                        F();
                                        clearInterval(G.gridAutoScrollInterval);
                                        G.gridAutoScrollInterval = setInterval(F, 200)
                                    } else {
                                        clearTimeout(G.gridAutoScrollWaitTimeout);
                                        G.gridAutoScrollWaitTimeout = false;
                                        G.gridAutoScrollHasWaited = false;
                                        clearInterval(G.gridAutoScrollInterval);
                                        G.gridAutoScrollInterval = false
                                    }
                                } else
                                    G.gridAutoScrollWaitTimeout = 
                                    setTimeout(function() {
                                        G.gridAutoScrollHasWaited = true;
                                        G.gridAutoScrollWaitTimeout = false
                                    }, 500)
                    }
                };
                E.data("ignoreForOverDrop", true).bind("dropinit", function() {
                    this.updateDropOnDrag = I
                }).bind("dropstart", function(D, G) {
                    if (!G.draggedItems) {
                        this.updateDropOnDrag = null;
                        return false
                    }
                    $("<div class='slick-reorder-guide'/>").css({position: "absolute",zIndex: "99998",width: w.innerWidth() - o.padding * 2,top: -1000,right: o.padding}).appendTo(w);
                    G.gridInsertIndex = -1;
                    G.gridAutoScrollHasWaited = false;
                    G.gridAutoScrollWaitTimeout = 
                    false
                }).bind("dropend", function(D, G) {
                    w.find(".slick-reorder-guide").remove();
                    w.find(".slick-row").removeClass("hover");
                    clearInterval(G.gridAutoScrollInterval);
                    G.gridAutoScrollInterval = false
                }).bind("drop", function(D, G) {
                    function H(L, F) {
                        F = _.orEqual(F, new GS.Models.PlayContext);
                        var K, N = [], r;
                        for (K = 0; K < L.length; K++)
                            N.push(L[K].SongID);
                        if (t.allowDropOn)
                            (K = t.dataView.getItemByIdx(G.gridInsertIndex)) && K instanceof GS.Models.Playlist && K.addSongs(N, null, true);
                        else if (t.options.playlistID) {
                            K = GS.Models.Playlist.getOneFromCache(t.options.playlistID);
                            if (!K && GS.user.PageNameData.CollabPlaylists)
                                K = GS.Models.Playlist.wrap(GS.user.PageNameData.CollabPlaylists[t.options.playlistID], false);
                            r = G.gridInsertIndex !== -1 ? G.gridInsertIndex : null;
                            K.addSongs(N, r, true)
                        } else {
                            r = G.gridInsertIndex !== -1 ? G.gridInsertIndex : GS.player.INDEX_DEFAULT;
                            GS.player.addSongsToQueueAt(N, r, false, F)
                        }
                    }
                    var B;
                    if (w.within(D.clientX, D.clientY).length > 0)
                        if (G.draggedItemsSource == "grid" && t.grid.onMoveRows && G.canMove) {
                            t.grid.onMoveRows(t.grid.getSelectedRows(), G.gridInsertIndex);
                            GS.getGuts().gaTrackEvent("grid", 
                            "dragSuccess")
                        } else {
                            G.draggedItemsType = G.draggedItemsType || _.guessDragType(G.draggedItems);
                            switch (G.draggedItemsType) {
                                case "song":
                                    H(G.draggedItems, G.draggedItemsContext);
                                    break;
                                case "album":
                                    for (B = 0; B < G.draggedItems.length; B++)
                                        G.draggedItems[B].getSongs(function(L) {
                                            L.sort(GS.Models.Album.defaultSongSort);
                                            H(L, new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_ALBUM, G.draggedItems[B]))
                                        }, null, true, {async: false});
                                    break;
                                case "artist":
                                    for (B = 0; B < G.draggedItems.length; B++)
                                        G.draggedItems[B].getSongs(function(L) {
                                            L.sort(GS.Models.Artist.defaultSongSort);
                                            H(L, new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_ARTIST, G.draggedItems[B]))
                                        }, false, null, {async: false});
                                    break;
                                case "playlist":
                                    for (B = 0; B < G.draggedItems.length; B++)
                                        G.draggedItems[B].getSongs(function(L) {
                                            H(L, new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_PLAYLIST, G.draggedItems[B]))
                                        }, null, {async: false});
                                    break;
                                case "user":
                                    for (B = 0; B < G.draggedItems.length; B++)
                                        G.draggedItems[B].getFavoritesByType("Song", function(L) {
                                            H(L, new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_USER, G.draggedItems[B]))
                                        }, null, 
                                        {async: false});
                                    break;
                                default:
                                    console.error("grid drop, invalid drag type", G.draggedItemsType);
                                    return
                            }
                        }
                })
            }
            t.dataView.beginUpdate();
            t.dataView.setItems(t.data, t.idProperty);
            t.dataView.setFilter(function(D) {
                if (t.options.isFilter && D.isFilterAll)
                    return true;
                if (t.searchString != "" && (!D.hasOwnProperty(t.options.searchText) || D[t.options.searchText].toLowerCase().indexOf(t.searchString) == -1))
                    return false;
                if (t.filter.hasOwnProperty("onlyVerified") && t.filter.onlyVerified && D.IsVerified === 0)
                    return false;
                if (t.filter.artistIDs && 
                !t.filter.artistIDs[D.ArtistID])
                    return false;
                if (t.filter.albumIDs && !t.filter.albumIDs[D.AlbumID])
                    return false;
                return true
            });
            t.sortCol !== "" && t.grid.onSort(t.sortCol, t.sortDir, t.onInitSort);
            $(window).resize();
            t.dataView.endUpdate();
            if (t.options.isFilter) {
                t.grid.setSelectedRows([0]);
                t.grid.onSelectedRowsChanged()
            }
            this.Class.resizeAfterRender()
        },update: function() {
        },songChange: function(m) {
            var k = $("#page").is(".gs_page_playlist") ? GS.Controllers.PageController.getActiveController() : false;
            k = k ? k.playlist.songIDLookup[m.SongID] : 
            this.dataView.getItemById(m[this.idProperty]);
            if (!k)
                return false;
            var n = ["IsVerified", "TSAdded", "TSFavorited", "Sort", "Popularity"];
            for (var o in m)
                if (m.hasOwnProperty(o) && n.indexOf(o) == -1)
                    k[o] = m[o];
            this.dataView.updateItem(k[this.idProperty], k)
        },albumChange: function(m) {
            var k = this.dataView.getItemById(m[this.idProperty]);
            if (!k)
                return false;
            for (var n in m)
                if (m.hasOwnProperty(n))
                    k[n] = m[n];
            this.dataView.updateItem(k.AlbumID, k)
        },artistChange: function(m) {
            var k = this.dataView.getItemById(m[this.idProperty]);
            if (!k)
                return false;
            for (var n in m)
                if (m.hasOwnProperty(n))
                    k[n] = m[n];
            this.dataView.updateItem(k.ArtistID, k)
        },playlistChange: function(m) {
            var k = this.dataView.getItemById(m[this.idProperty]);
            if (k) {
                for (var n in m)
                    if (m.hasOwnProperty(n))
                        k[n] = m[n];
                this.dataView.updateItem(k.PlaylistID, k)
            }
        },userChange: function(m) {
            var k = this.dataView.getItemById(m[this.idProperty]);
            if (!k)
                return false;
            for (var n in m)
                if (m.hasOwnProperty(n))
                    k[n] = m[n];
            this.dataView.updateItem(k.UserID, k)
        },songFavoritesChange: function() {
            this.data = 
            this.dataView.getItems();
            for (var m = 0; m < this.data.length; m++)
                if (GS.user.favorites.songs[this.data[m].SongID]) {
                    this.data[m].isFavorite = 1;
                    this.data[m].fromLibrary = 1;
                    this.dataView.updateItem(this.data[m].SongID, this.data[m])
                }
            this.dataView.beginUpdate();
            this.dataView.setItems(this.data, "SongID");
            this.dataView.endUpdate()
        },albumFavoritesChange: function() {
            this.data = this.dataView.getItems();
            for (var m = 0; m < this.data.length; m++)
                if (GS.user.favorites.albums[this.data[m].AlbumID]) {
                    this.data[m].isFavorite = 1;
                    this.dataView.updateItem(this.data[m].SongID, 
                    this.data[m])
                }
            this.dataView.beginUpdate();
            this.dataView.setItems(this.data, "AlbumID");
            this.dataView.endUpdate()
        },artistFavoritesChange: function() {
            this.data = this.dataView.getItems();
            for (var m = 0; m < this.data.length; m++)
                if (GS.user.favorites.artists[this.data[m].ArtistID])
                    this.data[m].isFavorite = 1;
            this.dataView.beginUpdate();
            this.dataView.setItems(this.data, "ArtistID");
            this.dataView.endUpdate()
        },playlistFavoritesChange: function() {
            this.data = this.dataView.getItems();
            for (var m = 0; m < this.data.length; m++)
                if (GS.user.favorites.playlists[this.data[m].PlaylistID])
                    this.data[m].isFavorite = 
                    1;
            this.dataView.beginUpdate();
            this.dataView.setItems(this.data, "PlaylistID");
            this.dataView.endUpdate()
        },userFavoritesChange: function() {
            this.data = this.dataView.getItems();
            for (var m = 0; m < this.data.length; m++)
                if (GS.user.favorites.users[this.data[m].UserID])
                    this.data[m].isFavorite = 1
        },queueChange: function(m) {
            m || (m = GS.player.getCurrentQueue());
            if (this.element) {
                this.element.toggleClass("hasSongs", m && m.songs && m.songs.length > 0);
                m && m.songs && m.songs.length > 0 ? $(".grid-canvas a.play").attr("data-translate-title", 
                "SONG_ROW_ADD_SONG_ADD_TO_PLAYING_TITLE").attr("title", $.localize.getString("SONG_ROW_ADD_SONG_ADD_TO_PLAYING_TITLE")) : $(".grid-canvas a.play").attr("data-translate-title", "SONG_ROW_ADD_SONG_PLAY_TITLE").attr("title", $.localize.getString("SONG_ROW_ADD_SONG_PLAY_TITLE"))
            }
        },getContextMenuForSong: function(m) {
            var k = GS.Controllers.PageController.getActiveController().getPlayContext(), n = GS.Models.Song.getOneFromCache(m), o = GS.getGuts().extractSongItemInfo(this), q = [{title: $.localize.getString("CONTEXT_PLAY_SONG_NOW"),
                    action: {type: "fn",callback: function() {
                            GS.player.addSongAndPlay(m, k)
                        },log: this.callback(function() {
                            GS.getGuts().onContextMenuClick("contextPlaySongNow", "rightClickSingleSong", false, o)
                        })},customClass: "last jj_menu_item_hasIcon jj_menu_item_play"}, {title: $.localize.getString("CONTEXT_PLAY_SONG_NEXT"),action: {type: "fn",callback: function() {
                            GS.player.addSongsToQueueAt([m], GS.player.INDEX_NEXT, false, k)
                        },log: this.callback(function() {
                            GS.getGuts().onContextMenuClick("contextPlaySongNext", "rightClickSingleSong", 
                            false, o)
                        })},customClass: "last jj_menu_item_hasIcon jj_menu_item_play_next"}, {title: $.localize.getString("CONTEXT_PLAY_SONG_LAST"),action: {type: "fn",callback: function() {
                            GS.player.addSongsToQueueAt([m], GS.player.INDEX_LAST, false, k)
                        },log: this.callback(function() {
                            GS.getGuts().onContextMenuClick("contextPlaySongLast", "rightClickSingleSong", false, o)
                        })},customClass: "last jj_menu_item_hasIcon jj_menu_item_play_last"}, {customClass: "separator"}];
            if (n)
                q = q.concat(n.getContextMenu({menuType: "rightClickSingleSong",
                    gridController: this}));
            var x = GS.getGuts();
            x.currentTest && x.currentTest.name == "gridRowPlayV2" && x.currentGroup > 1 && q.push({customClass: "separator"}, {title: "Song Page",action: {type: "fn",callback: function() {
                        GS.router.setHash(n.toUrl())
                    },log: this.callback(function() {
                        GS.getGuts().onContextMenuClick("contextNavigateSongPage", "rightClickSingleSong", false, o)
                    })},customClass: "last jj_menu_item_hasIcon jj_menu_item_song_page"});
            return q
        },getContextMenuMultiselectForSong: function(m) {
            var k = GS.Controllers.PageController.getActiveController().getPlayContext(), 
            n = GS.getGuts().extractMultiSongInfo(this, m), o = {menuType: "rightClickMultiSong",multiClick: true,gridController: this}, q = [{title: $.localize.getString("CONTEXT_PLAY_SONGS_NOW"),customClass: "jj_menu_item_hasIcon jj_menu_item_play",action: {type: "fn",callback: function() {
                            GS.player.addSongsToQueueAt(m, GS.player.INDEX_DEFAULT, true, k)
                        },log: this.callback(function() {
                            GS.getGuts().onContextMenuClick("contextPlaySongsNow", "rightClickMultiSong", true, n)
                        })}}, {title: $.localize.getString("CONTEXT_PLAY_SONGS_NEXT"),customClass: "jj_menu_item_hasIcon jj_menu_item_play_next",
                    action: {type: "fn",callback: function() {
                            GS.player.addSongsToQueueAt(m, GS.player.INDEX_NEXT, false, k)
                        },log: this.callback(function() {
                            GS.getGuts().onContextMenuClick("contextPlaySongsNext", "rightClickMultiSong", true, n)
                        })}}, {title: $.localize.getString("CONTEXT_PLAY_SONGS_LAST"),customClass: "jj_menu_item_hasIcon jj_menu_item_play_last",action: {type: "fn",callback: function() {
                            GS.player.addSongsToQueueAt(m, GS.player.INDEX_LAST, false, k)
                        },log: this.callback(function() {
                            GS.getGuts().onContextMenuClick("contextPlaySongsLast", 
                            "rightClickMultiSong", true, n)
                        })}}, {customClass: "separator"}], x = true;
            if (GS.user.library)
                for (i in m) {
                    if (m.hasOwnProperty(i)) {
                        songID = m[i];
                        if (parseInt(songID) && !GS.user.library.songs[songID]) {
                            x = false;
                            break
                        }
                    }
                }
            else
                x = false;
            x ? q.push({title: $.localize.getString("CONTEXT_REMOVE_FROM_LIBRARY"),customClass: "jj_menu_item_hasIcon jj_menu_item_remove_music",action: {type: "fn",callback: function() {
                        GS.user.removeFromLibrary(m)
                    },log: this.callback(function() {
                        GS.getGuts().onContextMenuClick("contextRemoveFromLibrary", 
                        "rightClickMultiSong", true, n)
                    })}}) : q.push({title: $.localize.getString("CONTEXT_ADD_TO_LIBRARY"),customClass: "jj_menu_item_hasIcon jj_menu_item_music",action: {type: "fn",callback: function() {
                        GS.user.addToLibrary(m)
                    },log: this.callback(function() {
                        GS.getGuts().onContextMenuClick("contextAddToLibrary", "rightClickMultiSong", true, n)
                    })}});
            q.push({customClass: "separator"});
            if (_.isEmpty(GS.user.playlists))
                q.push({title: $.localize.getString("CONTEXT_NEW_PLAYLIST"),customClass: "jj_menu_item_hasIcon jj_menu_item_new_playlist",
                    action: {type: "fn",callback: function() {
                            GS.getLightbox().open("newPlaylist", m)
                        }}});
            else {
                q.push({title: $.localize.getString("CONTEXT_ADD_TO_PLAYLIST"),type: "sub",customClass: "jj_menu_item_hasIcon jj_menu_item_playlists",src: GS.Models.Playlist.getPlaylistsMenu(m, function(v) {
                        v.addSongs(m, null, true)
                    }, null, null, o)});
                k.type == "playlist" && GS.page.activePage && GS.page.activePage.playlist && GS.page.activePage.playlist.songs && q.push({title: $.localize.getString("CONTEXT_REMOVE_FROM_PLAYLIST"),customClass: "jj_menu_item_hasIcon jj_menu_item_remove_music",
                    action: {type: "fn",callback: this.callback(function() {
                            var v = o.gridController, A = [], t = GS.page.activePage.playlist;
                            if (v && v.selectedRowIDs.length > 0)
                                for (var w = 0; w < v.selectedRowIDs.length; w++) {
                                    var E = t.gridKeyLookup[v.selectedRowIDs[w]];
                                    E && A.push(t.songs.indexOf(E))
                                }
                            A.length && t.removeSongs(A)
                        })}})
            }
            q.push({customClass: "separator"}, {title: $.localize.getString("CONTEXT_SHARE_SONGS"),customClass: "jj_menu_item_hasIcon jj_menu_item_share",action: {type: "fn",callback: function() {
                        GS.getLightbox().open("widget", {type: "manySongs",
                            id: m})
                    },log: this.callback(function() {
                        GS.getGuts().onContextMenuClick("contextShareSongs", "rightClickMultiSong", true, n)
                    })}}, {customClass: "separator"}, {title: $.localize.getString("CONTEXT_REPLACE_ALL_SONGS"),customClass: "jj_menu_item_hasIcon jj_menu_item_now_playing",action: {type: "fn",callback: function() {
                        GS.player.addSongsToQueueAt(m, GS.player.INDEX_REPLACE, GS.player.isPlaying, k)
                    },log: this.callback(function() {
                        GS.getGuts().onContextMenuClick("contextReplaceAllSongs", "rightClickMultiSong", true, n)
                    })}});
            return q
        },"input.search keyup": function(m) {
            Slick.GlobalEditorLock.cancelCurrentEdit();
            if (e.which == 27)
                m.value = "";
            this.searchString = m.value.toLowerCase();
            this.dataView.refresh()
        },".grid-canvas click": function(m, k) {
            if ($(k.target).parents(".slick-row").length === 0) {
                self.currentRow = 0;
                this.grid.setSelectedRows([]);
                this.grid.onSelectedRowsChanged()
            }
        },"* keydown": function(m, k) {
            this.handleKeyPress(k)
        },".slick-collapse-indicator click": function(m, k) {
            k.preventDefault();
            var n = $(m).parents("div.page_column"), o = 
            GS.page.getActiveController().Class, q = n.attr("id") + "Collapse";
            o[q] || (o[q] = {});
            n.toggleClass("collapsed");
            n.addClass("suppressAutoCollapse");
            if (n.hasClass("collapsed")) {
                n.addClass("manualCollapse").removeClass("manualOpen");
                $(".page_column_fixed.collapsed").width(this.grid.getScrollWidth());
                o[q].manualCollapse = true;
                o[q].manualOpen = false;
                o[q].collapsed = true
            } else {
                n.addClass("manualOpen").removeClass("manualCollapse");
                $(".page_column_fixed").width(175);
                o[q].manualOpen = true;
                o[q].manualCollapse = false;
                o[q].collapsed = 
                false
            }
            o.storeFilterCollapseState();
            GS.resize();
            $(this.element).resize()
        },handleKeyPress: function(m) {
            if ((m.which === 38 || m.which === 40) && m.shiftKey) {
                var k = this.grid.getSelectedRows().sort(function(q, x) {
                    return q - x
                });
                _.orEqual(k[k.length - 1], 1);
                var n, o;
                n = this.currentRow + (m.which === 38 ? -1 : 1);
                n = Math.max(0, Math.min(this.dataView.rows.length - 1, n));
                if ($.inArray(n, k) === -1) {
                    k.push(n);
                    this.selectedRowIDs.push(this.dataView.getItemByIdx(n).SongID);
                    this.currentRow = n;
                    this.grid.setSelectedRows(_.arrUnique(k));
                    this.grid.onSelectedRowsChanged()
                } else if (m.which === 
                38) {
                    if (n < this.currentRow) {
                        o = $.inArray(this.currentRow, k);
                        _.arrRemove(k, o, o);
                        this.currentRow = n;
                        o = $.inArray(this.currentRow, k);
                        _.arrRemove(k, o, o);
                        k.push(this.currentRow);
                        this.grid.setSelectedRows(_.arrUnique(k));
                        this.grid.onSelectedRowsChanged()
                    }
                } else if (n > this.currentRow) {
                    o = $.inArray(this.currentRow, k);
                    _.arrRemove(k, o, o);
                    this.currentRow = n;
                    o = $.inArray(this.currentRow, k);
                    _.arrRemove(k, o, o);
                    k.push(this.currentRow);
                    this.grid.setSelectedRows(_.arrUnique(k));
                    this.grid.onSelectedRowsChanged()
                }
                m.preventDefault();
                return true
            }
            if (m.which === 13 && this.type == "song") {
                m = this.selectedRowIDs;
                if (this.idProperty == "GridKey") {
                    m = [];
                    k = 0;
                    for (n = this.selectedRowIDs.length; k < n; k++)
                        m.push(this.dataView.getItemByIdx(this.selectedRowIDs[k] - 1).SongID)
                }
                GS.player.addSongsToQueueAt(m, GS.player.INDEX_DEFAULT, true);
                self.currentRow = 0;
                this.grid.setSelectedRows([]);
                this.grid.onSelectedRowsChanged()
            }
            return false
        },"#grid.songs a.songLink, #grid.feeds div.songs a.songLink click": function(m, k) {
            k.preventDefault();
            var n = parseInt($(m).attr("rel"), 
            10);
            if (n && _.defined(k.which) && !$(m).closest(".grid-canvas").hasClass("noLinks")) {
                var o = $(m).data("clickCount");
                o || (o = 0);
                o++;
                o == 1 && setTimeout(this.callback(function() {
                    if ($(m).data("clickCount") == 1)
                        if (m[0].href) {
                            var v = $(m).attr("href");
                            if (v.indexOf("#") > 1) {
                                v = v.split("#");
                                GS.router.setHash(v[1])
                            } else
                                GS.router.setHash($(m).attr("href"))
                        } else
                            GS.Models.Song.getSong(n, this.callback(function(A) {
                                if (A) {
                                    A = A.toUrl();
                                    GS.router.setHash(A);
                                    var t = parseInt(this.grid.getSelectedRows()[0]) + 1, w = t <= this.data.length ? 
                                    this.data[t - 1].ppVersion : 0;
                                    GS.getGuts().handleFieldClick(A, t, n, w)
                                }
                            }));
                    $(m).data("clickCount", 0)
                }), 300);
                $(m).data("clickCount", o);
                if (o = $(m).attr("href")) {
                    var q = parseInt(this.grid.getSelectedRows()[0]) + 1, x = q <= this.data.length ? this.data[q - 1].ppVersion : 0;
                    GS.getGuts().handleFieldClick(o, q, n, x)
                }
            } else if (!_.defined(k.which))
                return false
        },"#grid .grid-canvas.noLinks mouseenter": function(m, k) {
            if (window.ctrlDown && !k.shiftKey && !k.ctrlKey && !k.metaKey) {
                $("#grid .grid-canvas").removeClass("noLinks");
                window.ctrlDown = 
                false
            }
        },"#grid.radioStations .station a click": function(m, k) {
            k.stopPropagation();
            var n = m.attr("data-tagid");
            GS.player.setAutoplay(true, n);
            return false
        },"#grid.songs a.field click": function(m) {
            m = $(m).attr("href");
            var k = this.grid.getSelectedRows()[0];
            if (m) {
                var n = parseInt(k) + 1;
                k = this.dataView.rows[k].SongID;
                var o = n <= this.data.length ? this.data[n - 1].ppVersion : 0;
                GS.getGuts().handleFieldClick(m, n, k, o)
            }
        },"#grid.songs .songLinkPlay click": function(m, k) {
            k.preventDefault();
            var n = m.attr("rel");
            if (n) {
                GS.player.addSongAndPlay(n);
                GS.getGuts().logEvent("gridSongsRowSongTitlePlay", {})
            }
        },"#grid.songs .slick-row click": function() {
            GS.getGuts().logEvent("gridSongsRowClick", {})
        }})
})();
GS.Controllers.BaseController.extend("GS.Controllers.GUTSController", {isGSSingleton: true,segments: [{targetRange: [0, 0.12],dateRange: ["2012-04-19", "2012-04-23"],name: "gridRowPlayV2",groups: ["a", "b", "c", "d", "e", "f"]}, {targetRange: [0.5, 0.55],dateRange: ["2012-05-01", "2012-05-09"],name: "interleaving_songclicks_htp4",groups: ["a"]}],loggingStatusDuration: 6048E5}, {shouldLog: false,server: "/guts",appID: "html",context: false,debug: false,abTest: null,bufferLength: 10,localLogs: [],searchClickLpid: "searchClick",loggedNormally: false,
    eligibleForABTest: false,abTestBucket: null,currentTest: null,currentGroup: null,loggingStatusExpirationDate: null,init: function() {
        this.context = {};
        this.server = _.orEqual(gsConfig.gutsServer, false);
        this.setLoggingStatus();
        if (this.debug = false) {
            this.bufferLength = 1;
            this.shouldLog = true
        }
        this.currentPage = {};
        this.currentPage.pageType = "home";
        this.currentPage.section = "";
        this.currentPage.subpage = "";
        this.currentPage.id = "";
        if (gsConfig.isPreview) {
            this.appID = "preview";
            this.shouldLog = true
        }
        var c = _.browserDetect();
        this.beginContext({sessionID: GS.service.sessionID});
        this.beginContext({initTime: (new Date).getTime()});
        this.beginContext({country: gsConfig.country.ID});
        GS.user && GS.user.UserID && GS.user.UserID > 0 && this.beginContext({userID: GS.user.UserID});
        window.chrome && window.chrome.app && window.chrome.app.isInstalled ? this.gaTrackEvent("chromeApp", "isInstalled") : this.gaTrackEvent("chromeApp", "notInstalled");
        this.logEvent("init", {browser: c.browser,browserVersion: c.version,os: navigator.platform,ip: gsConfig.remoteAddr,locale: GS.getLocale().locale});
        this._super()
    },setLoggingStatus: function() {
        var c, 
        a, b, g, h = GS.Controllers.GUTSController.segments;
        g = GS.store.get("currentTest");
        var m = GS.store.get("currentGroup");
        if (g) {
            c = GS.store.get("abTestBucket");
            a = GS.store.get("eligibleForABTest");
            b = GS.store.get("loggedNormally");
            if (typeof c == "number" && c >= 0 && c <= 1 && a && b == false && g.name && typeof m == "number")
                for (c = 0; c < h.length; c++)
                    if (h[c].name == g.name && g.dateRange) {
                        h = new Date;
                        c = new Date(g.dateRange[0]);
                        var k = new Date(g.dateRange[1]);
                        if (h >= c && h < k) {
                            this.eligibleForABTest = a;
                            this.loggedNormally = b;
                            this.currentTest = g;
                            this.currentGroup = 
                            m;
                            this.beginContext({abtest: this.currentTest.name,group: this.currentGroup});
                            this.shouldLog = true;
                            return
                        }
                        break
                    }
            this.clearLoggingStatus()
        }
        c = GS.store.get("abTestBucket");
        a = GS.store.get("eligibleForABTest");
        b = GS.store.get("loggedNormally");
        if (g = GS.store.get("loggingStatusExpirationDate"))
            g = new Date(g);
        m = Math.random();
        h = new Date;
        if (g && h > g) {
            this.clearLoggingStatus();
            b = GS.store.get("loggedNormally");
            a = GS.store.get("eligibleForABTest");
            c = GS.store.get("abTestBucket");
            GS.store.get("currentTest");
            GS.store.get("currentGroup")
        }
        if (c && 
        a && b == false) {
            this.abTestBucket = c;
            this.setCurrentTest()
        } else {
            if (typeof b == "undefined" || b == null) {
                b = m <= 0.1;
                GS.store.set("loggedNormally", b)
            }
            if (this.loggedNormally = b) {
                this.eligibleForABTest = false;
                this.shouldLog = true;
                GS.store.set("eligibleForABTest", false)
            } else if (typeof a == "undefined" || a == null) {
                this.eligibleForABTest = m > 0.1 && m <= 0.2;
                GS.store.set("eligibleForABTest", this.eligibleForABTest)
            } else
                this.eligibleForABTest = a;
            this.abTestBucket = this.eligibleForABTest ? Math.random() : null;
            GS.store.set("abTestBucket", 
            this.abTestBucket);
            this.loggingStatusExpirationDate = new Date(h.getTime() + GS.Controllers.GUTSController.loggingStatusDuration);
            GS.store.set("loggingStatusExpirationDate", this.loggingStatusExpirationDate);
            this.abTestBucket && this.setCurrentTest()
        }
    },forceABTest: function(c, a) {
        if (c && typeof a == "number") {
            this.currentTest = {};
            this.currentTest.name = c;
            this.currentGroup = a;
            this.debug = this.shouldLog = true;
            this.loggedNormally = false;
            this.eligibleForABTest = true
        }
    },forceExistingABTest: function(c, a, b) {
        if (c && typeof a == 
        "number")
            for (var g = GS.Controllers.GUTSController.segments, h = 0; h < g.length; h++) {
                var m = g[h];
                if (m.name == c) {
                    this.currentTest = m;
                    this.currentGroup = a;
                    this.debug = this.shouldLog = true;
                    this.loggedNormally = false;
                    this.eligibleForABTest = true;
                    this.abTestBucket = (m.targetRange[0] + m.targetRange[1]) / 2;
                    if (b) {
                        GS.store.set("loggedNormally", false);
                        GS.store.set("eligibleForABTest", true);
                        GS.store.set("abTestBucket", this.abTestBucket);
                        GS.store.set("currentTest", this.currentTest);
                        GS.store.set("currentGroup", this.currentGroup)
                    }
                }
            }
    },
    clearLoggingStatus: function() {
        GS.store.set("loggedNormally", null);
        GS.store.set("eligibleForABTest", null);
        GS.store.set("abTestBucket", null);
        GS.store.set("currentTest", null);
        GS.store.set("currentGroup", null);
        GS.store.set("loggingStatusExpirationDate", null);
        this.shouldLog = false;
        this.currentGroup = this.currentTest = this.abTestBucket = this.eligibleForABTest = this.loggedNormally = null
    },setCurrentTest: function() {
        if (this.abTestBucket)
            for (var c = GS.Controllers.GUTSController.segments, a, b = new Date, g, h, m = 0; m < c.length; m++) {
                a = 
                c[m];
                g = new Date(a.dateRange[0]);
                h = new Date(a.dateRange[1]);
                if (a.targetRange[0] <= this.abTestBucket && a.targetRange[1] >= this.abTestBucket && g <= b && h >= b) {
                    this.currentTest = a;
                    GS.store.set("currentTest", a);
                    this.currentGroup = Math.min(Math.floor((this.abTestBucket - a.targetRange[0]) / ((a.targetRange[1] - a.targetRange[0]) / a.groups.length)), a.groups.length - 1);
                    GS.store.set("currentGroup", this.currentGroup);
                    this.beginContext({abtest: a.name,group: this.currentGroup});
                    this.shouldLog = true;
                    return a
                }
            }
        return null
    },beginContext: function(c) {
        _.forEach(c, 
        function(a, b) {
            if (c.hasOwnProperty(b))
                this.context[b] = c[b]
        }, this)
    },endContext: function(c) {
        _.defined(this.context[c]) && delete this.context[c]
    },doLogEvent: function(c, a) {
        var b = this.currentTest;
        if (b && b.dateRange && b.dateRange.length == 2)
            if (new Date > new Date(b.dateRange[1])) {
                this.clearLoggingStatus();
                this.setLoggingStatus();
                if (!this.shouldLog)
                    return
            }
        var g = {time: (new Date).getTime(),lpID: c,state: {},context: {}};
        currentContext = this.context;
        _.forEach(currentContext, function(h, m) {
            if (currentContext.hasOwnProperty(m))
                if ($.isArray(currentContext[m])) {
                    this.context[m] = 
                    [];
                    _.forEach(currentContext[m], function(k, n) {
                        this.push(n)
                    }, this.context[m])
                } else
                    this.context[m] = _.orEqual(currentContext[m], "").toString()
        }, g);
        _.forEach(a, function(h, m) {
            if (a.hasOwnProperty(m))
                g.state[m] = _.orEqual(h, "").toString()
        }, g);
        this.localLogs.push(g);
        if (this.debug)
            this.forceSend();
        else
            this.checkSendCondition() && this.sendLogs()
    },logEvent: function(c, a) {
        this.shouldLog && this.doLogEvent(c, a)
    },forceLogEvent: function(c, a) {
        this.doLogEvent(c, a)
    },checkSendCondition: function() {
        return this.localLogs.length >= 
        this.bufferLength
    },forceSend: function() {
        this.sendLogs(true)
    },sendLogsTimeout: false,sendLogsWait: 3E4,sendLogs: function(c) {
        clearTimeout(this.sendLogsTimeout);
        if (c)
            this._internalSend(false);
        else
            this.sendLogsTimeout = setTimeout(this.callback(this._internalSend), this.sendLogsWait)
    },_internalSend: function(c) {
        c = _.orEqual(c, true);
        if (this.localLogs.length > 0) {
            var a = this.toTransmissionFormat(this.localLogs);
            this.debug && console.log(a);
            this.currentTest ? $.ajax({contentType: "text/xml",type: "POST",data: a,url: "/guts-ab.php",
                cache: false,async: c,success: function() {
                },error: function() {
                }}) : $.ajax({contentType: "text/xml",type: "POST",data: a,url: this.server,cache: false,async: c,success: function() {
                },error: function() {
                }});
            this.localLogs = []
        }
    },toTransmissionFormat: function(c) {
        var a = {result: (new Date).getTime() + "\n",appID: this.appID};
        _.forEach(c, function(b, g) {
            var h = /\:/g, m = /\\/g, k = c[g];
            this.result += this.appID + "\t";
            this.result += k.lpID + "\t";
            var n = k.context;
            _.forEach(n, function(q, x) {
                if (n.hasOwnProperty(x))
                    this.result += x + ":" + n[x].replace(m, 
                    "\\\\").replace(h, "\\:") + "\t"
            }, this);
            var o = k.state;
            _.forEach(o, function(q, x) {
                if (o.hasOwnProperty(x))
                    this.result += x + ":" + o[x].replace(m, "\\\\").replace(h, "\\:") + "\t"
            }, this);
            this.result += k.time + "\n"
        }, a);
        return a.result
    },handlePageLoad: function(c, a) {
        var b = {};
        b.destinationPageType = c;
        switch (c) {
            case "home":
                if (a && a.redeemingPromoCard)
                    b.reason = "redeem";
                break;
            case "user":
                switch (a.length) {
                    case 2:
                        b.destinationPageID = a.id;
                        break;
                    case 3:
                        b.destinationPageID = a.id;
                        b.destinationSubpageType = a.section;
                        break;
                    case 4:
                        b.destinationPageID = 
                        a.id;
                        b.destinationSubpageType = a.subpage;
                        break
                }
                b.destinationSubpageType = _.orEqual(b.destinationSubpageType, "profile");
                break;
            case "playlist":
            case "album":
            case "artist":
                b.destinationPageID = a.id;
                b.destinationSubpageType = c == "album" && !a.subpage ? "tracklist" : c == "artist" && !a.subpage ? "overview" : a.subpage;
                break;
            case "search":
                b.destinationSubpageType = a.type == "everything" ? "everything" : a.type;
                break;
            case "popular":
                b.destinationSubpageType = a.pageType;
                break;
            case "song":
                b.destinationPageID = a.token;
                b.destinationSubpageType = 
                a.subpage;
                break;
            case "notFound":
                this.logEvent("pageNotFound", {pageSought: a.page});
                b.destinationPageType = "home";
                b.reason = "pageNotFound";
                break;
            case "settings":
                b.destinationSubpageType = _.orEqual(a.subpage, "profile");
                break;
            case "surveys":
                if (a.subpage)
                    b.destinationSubpageType = a.subpage;
                break;
            case "signup":
                if (a.subpage)
                    b.destinationSubpageType = a.subpage;
                break;
            case "explore":
                if (a.subpage && a.subpage == "popular") {
                    b.destinationPageType = "popular";
                    b.destinationSubpageType = a.type || "daily"
                } else
                    b.destinationSubpageType = 
                    a.subpage || "featured";
                break;
            case "music":
                if (a.subpage)
                    b.destinationSubpageType = a.subpage;
            default:
                b.destinationPageType = c;
                break
        }
        if (this.pageParamsAreDifferent(b)) {
            this.logEvent("loadPage", b);
            this.beginContext({currentPageType: b.destinationPageType});
            b.destinationSubpageType ? this.beginContext({currentSubpage: b.destinationSubpageType}) : this.endContext("currentSubpage");
            b.destinationPageID ? this.beginContext({currentPageID: b.destinationPageID}) : this.endContext("currentPageID")
        }
    },updateCurrentPage: function(c) {
        this.currentPage.pageType = 
        c.type;
        this.currentPage.id = c.id;
        this.currentPage.section = c.section;
        this.currentPage.subpage = c.subpage
    },logPageLoad: function(c) {
        c.id ? this.logEvent("loadPage", {type: c.type,id: c.id}) : this.logEvent("loadPage", {type: c.type});
        this.beginContext({currentPageType: c.type});
        this.endContext("currentSubpage")
    },logSubpageLoad: function(c) {
        this.logEvent("loadSubpage", {type: c.type});
        this.beginContext({currentSubpage: c.type})
    },handleFieldClick: function(c, a, b, g) {
        a = {songID: b,rank: a};
        if (g != null && g.length > 0)
            a.ppVersion = 
            g;
        g = "";
        g = c.indexOf("artist") > -1 ? "OLartistPageLoad" : c.indexOf("album") > -1 ? "OLalbumPageLoad" : "OLSongPageLoad";
        GS.getGuts().logEvent(g, a)
    },handleFeedEventClick: function(c) {
        var a = {};
        switch ($(c)[0].tagName) {
            case "A":
                feedEvent = $(c).parents(".event");
                if ($(c).attr("href")) {
                    var b = $(c).attr("href").split("/");
                    a.clickedType = b[1];
                    a.clickedID = b[3]
                } else
                    a.clickedType = $(c).attr("class");
                break;
            case "LI":
                feedEvent = $(c).parents(".event");
                c = $(c).attr("class").split(" ");
                c = c[c.length - 1];
                if (c == "option")
                    a.clickedType = 
                    "playSongs";
                else if (c == "show")
                    a.clickedType = "showSongs";
                break;
            default:
                break
        }
        a.rank = $(feedEvent).index() + 1;
        var g = $(feedEvent).attr("class");
        b = g.split(" ");
        a.whoseFeed = b[2].split("user")[1];
        _.forEach(b, function(n, o) {
            if (b[o].indexOf("type") > -1)
                a.eventType = b[o].substring(4, b[o].length)
        }, a);
        var h = {};
        $('.what>a[class!="showSongs"]', feedEvent).each(function() {
            var n = $(this).attr("href");
            if (n !== undefined) {
                n = n.split("/");
                var o = n[1];
                if (h[o])
                    h[o] += 1;
                else
                    h[o] = 1;
                a[o + h[o]] = n[3]
            }
        });
        var m = {};
        $("#feed>li").each(function() {
            g = 
            $(this).attr("class");
            b = g.split(" ");
            var n = b[1].substring(4, b[1].length);
            if (m[n])
                m[n] += 1;
            else
                m[n] = 1
        });
        var k = "";
        _.forEach(m, function(n, o) {
            k = k + o + ";" + n + ","
        }, k);
        k = k.slice(0, k.length - 1);
        a.counts = k;
        this.logEvent("feedEventClick", a)
    },objectListPlayAdd: function(c, a, b) {
        var g, h;
        switch (b) {
            case "play":
                g = "OLPlayClick";
                break;
            case "add":
                g = "OLAddClick";
                break;
            default:
                break
        }
        var m;
        a = $("#grid .slick-row.selected", a);
        if (a.length > 0) {
            h = "";
            $(a).each(function() {
                m = parseInt($(this).attr("row"), 10);
                isNaN(m) || (h = h + (m + 1) + ",")
            });
            h = h.slice(0, h.length - 1)
        } else
            h = "all";
        this.logEvent(g, {songIDs: c,ranks: h})
    },songItemLibraryClick: function(c) {
        this.logEvent("OLlibraryClick", c)
    },songItemFavoriteClick: function(c) {
        this.logEvent("OLfavoriteClick", c)
    },songsRemovedFromQueue: function(c) {
        var a = c.details.items;
        if (c) {
            var b = "";
            _.forEach(a, function(g, h) {
                b = b + h[g].songID + ","
            }, b);
            b = b.slice(0, b.length - 1);
            GS.getGuts().logEvent("songsRemovedFromQueue", {songIDs: b})
        }
    },handleSearchSidebarClick: function(c, a, b) {
        if (a = c.attr("href")) {
            a = a.split("/");
            var g = 
            a[1], h = a[3], m = c.parents("li").attr("row");
            if ($(c).hasClass("image"))
                if (b == "user") {
                    g = "user";
                    this.logEvent("searchSidebarClick", {section: b,linkType: g,username: a[1],imageClick: "true",userID: h,rank: m})
                } else if (b == "playlist")
                    this.logEvent("searchSidebarClick", {section: b,linkType: g,id: h,playlistID: h,rank: m,imageClick: "true"});
                else if (b == "album")
                    this.logEvent("searchSidebarClick", {section: b,linkType: g,id: h,albumID: h,rank: m,imageClick: "true"});
                else
                    b == "artist" ? this.logEvent("searchSidebarClick", {section: b,
                        linkType: g,id: h,artistID: h,rank: m,imageClick: "true"}) : this.logEvent("searchSidebarClick", {section: b,linkType: g,id: h,rank: m,imageClick: "true"});
            else if (b == "user")
                this.logEvent("searchSidebarClick", {section: b,linkType: g,id: h,userID: h,rank: m});
            else if (b == "playlist")
                this.logEvent("searchSidebarClick", {section: b,linkType: g,id: h,playlistID: h,rank: m});
            else if (b == "album")
                this.logEvent("searchSidebarClick", {section: b,linkType: g,id: h,albumID: h,rank: m});
            else
                b == "artist" ? this.logEvent("searchSidebarClick", {section: b,
                    linkType: g,id: h,artistID: h,rank: m}) : this.logEvent("searchSidebarClick", {section: b,linkType: g,id: h,rank: m})
        } else if (c.hasClass("searchLink")) {
            g = "seeAll";
            this.logEvent("searchSidebarClick", {section: b,linkType: g})
        }
    },handleSearchSidebarEventClick: function(c) {
        if (c.hasClass("searchLink"))
            this.logEvent("searchSidebarClick", {section: "event",linkType: "seeAll"});
        else
            (c = c.attr("href")) && this.logEvent("searchSidebarClick", {section: "event",linkType: "event",href: c})
    },handleAutoplayOff: function() {
        this.forceLogEvent("autoplayOff", 
        {});
        this.endContext("autoplay");
        this.endContext("autoplaySeedSongs")
    },isSearchPage: function() {
        var c = $("#page").controller();
        if (c)
            return "GS.Controllers.Page.SearchController" == c.Class.fullName;
        return false
    },onContextMenuClick: function(c, a, b, g, h) {
        if (c && a && typeof b !== "undefined" && g && this.isSearchPage())
            if (b) {
                if (g && g.songIDs && g.ranks) {
                    var m = g.songIDs, k = g.ranks, n = g.ppVersions;
                    b = {};
                    var o = m.length;
                    if ((b = k.length == o) && n)
                        b = n.length == o;
                    if (b) {
                        b = {menuType: a,multiClick: "brokenDown"};
                        for (var q = 0; q < o; q++) {
                            var x = 
                            k[q], v = m[q];
                            if (n)
                                b.ppVersions = g.ppVersions[q];
                            if (h)
                                b.playlistID = h;
                            this.logSearchSingleSongClick(c, x, v, b)
                        }
                        m = g.songIDs.join();
                        k = g.ranks.join();
                        b = {menuType: a,multiClick: "multi"};
                        if (g.ppVersions)
                            b.ppVersions = g.ppVersions.join();
                        if (h)
                            b.playlistID = h;
                        this.logSearchMultiSongClick(c, k, m, b)
                    }
                }
            } else if (g && g.songID && g.rank) {
                v = g.songID;
                x = g.rank;
                b = {menuType: a,multiClick: "single"};
                if (g.ppVersion)
                    b.ppVersion = g.ppVersion;
                if (h)
                    b.playlistID = h;
                this.logSearchSingleSongClick(c, x, v, b)
            }
    },logSearchSingleSongClick: function(c, 
    a, b, g) {
        if (c && a && b) {
            var h = {};
            if (g)
                h = g;
            h.clickType = c;
            h.rank = a;
            h.songID = b;
            GS.getGuts().logEvent(this.searchClickLpid, h)
        }
    },logSearchMultiSongClick: function(c, a, b, g) {
        if (c && a && b) {
            var h = {};
            if (g)
                h = g;
            h.clickType = c;
            h.ranks = a;
            h.songIDs = b;
            GS.getGuts().logEvent(this.searchClickLpid, h)
        }
    },extractSongItemInfo: function(c) {
        if (c) {
            var a = c.grid.getSelectedRows(), b = "", g = "";
            b = "";
            g = {};
            if (a.length == 1) {
                b = a[0];
                g = c.selectedRowIDs[0];
                g = {rank: b + 1,songID: g};
                if (c.data[b])
                    if (b = c.data[b].ppVersion)
                        g.ppVersion = b;
                return g
            }
        } else
            return null
    },
    logMultiSongDrag: function(c, a) {
        if (a.songIDs && a.songIDs.length > 0 && a.ranks && a.ranks.length > 0) {
            var b, g = a.songIDs.length;
            for (b = 0; b < g; b++)
                a.ppVersions && a.ppVersions[b] ? this.logSearchSingleSongClick("drag", a.ranks[b], a.songIDs[b], {ppVersion: a.ppVersions[b]}) : this.logSearchSingleSongClick("drag", a.ranks[b], a.songIDs[b])
        }
        GS.getGuts().logEvent(c, a)
    },extractMultiSongInfo: function(c, a) {
        if (c && a) {
            var b = c.grid.getSelectedRows().sort(_.numSortA), g = [], h = [];
            _.forEach(b, function(m) {
                g.push(m + 1);
                (m = c.dataView.rows[m].ppVersion) && 
                h.push(m)
            });
            b = {songIDs: a,ranks: g};
            if (h.length > 0)
                b.ppVersions = h;
            return b
        } else
            return null
    },handleExtrasDeviceButtonClick: function(c) {
        this.logEvent("extrasDeviceButtonClick", {device: $(c).attr("rel").split("_")[2]})
    },logQueueSaveInitiated: function() {
        this.logEvent("queueSaveInitiated", {})
    },pageParamsAreDifferent: function(c) {
        if (!this.context.currentPageType || !this.context.currentSubpage || !this.context.currentPageID)
            return true;
        if (c && c.destinationPageType && c.destinationSubpageType && c.destinationPageID) {
            if (this.context.currentPageType != 
            c.destinationPageType)
                return true;
            if (this.context.currentSubpage != c.destinationSubpageType)
                return true;
            if (this.context.currentPageID != c.destinationPageID)
                return true;
            return false
        } else
            return true
    },artistPageSidebarClick: function(c, a, b) {
        a = {};
        a.section = b;
        if (c.hasClass("view_more"))
            a.linkType = "seeAll";
        else {
            a.linkType = "notSeeAll";
            if (c = c.attr("href")) {
                var g = c.split("/");
                switch (b) {
                    case "similarArtists":
                        a.linkType = "artist";
                        a.id = g[3];
                        break;
                    case "fans":
                        a.linkType = "user";
                        a.id = g[3];
                        break;
                    case "events":
                        a.linkType = 
                        "event";
                        a.href = c;
                        break;
                    default:
                        break
                }
            }
        }
        this.logEvent("artistPageSidebarClick", a)
    },gaTrackEvent: function(c, a, b, g) {
        if (_.notDefined(c) || _.notDefined(a))
            console.warn("guts.gaTrackEvent: bad category or action", c, a);
        else {
            b = "" + _.orEqual(b, "");
            g = parseFloat("" + _.orEqual(g, ""), 10);
            if (isNaN(g) || g == "")
                g = null;
            if (window._gaq && window._gaq.push)
                if (b && g)
                    window._gaq.push(["_trackEvent", c, a, b, g]);
                else if (b)
                    window._gaq.push(["_trackEvent", c, a, b]);
                else
                    g ? window._gaq.push(["_trackEvent", c, a, null, g]) : window._gaq.push(["_trackEvent", 
                        c, a])
        }
    }});
(function() {
    var c = 0, a = null, b, g;
    GS.Controllers.BaseController.extend("GS.Controllers.FacebookController", {isGSSingleton: true,preSetup: function() {
            var h = GS.Controllers.BaseController.singletonCallback, m = $.subscribe;
            m("gs.auth.update", h("facebook", "update"));
            m("gs.auth.favorites.songs.add", h("facebook", "onFavoriteSong"));
            m("gs.auth.playlists.add", h("facebook", "onPlaylistCreate"));
            m("gs.player.nowplaying", h("facebook", "onNowPlaying"));
            m("gs.player.playing.continue", h("facebook", "onSongPlaying"));
            m("gs.player.playstatus", 
            h("facebook", "onPlayStatusChange"));
            m("gs.theme.set", h("facebook", "parseTheme"))
        }}, {APPLICATION_ID: "111132365592157",SERVICE_ID: 4,FACEBOOK_ONLY_SERVICE_ID: 16,PERMISSIONS: "offline_access,publish_stream,email,user_about_me,user_likes,user_interests,user_location,user_birthday,publish_actions",REQUIRED_PERMISSIONS: "offline_access,publish_stream,email,user_about_me,user_location,user_birthday",PUBLISH_PERMISSION: "publish_stream",USER_ACTIONS: "publish_actions",WALL_FAVORITES: 8,WALL_PLAYLIST_CREATE: 16,
        SCROBBLING_OFF_FLAG: 32,AUTO_RATE_LIMIT: 18E6,MINIMUM_DURATION: 15,profile: null,friends: null,registeredWithFacebook: false,facebookUserID: false,loggedIntoFacebook: false,flags: 0,lastError: null,facebookLoaded: false,connectStatus: "unknown",connected: false,onLoginSaveData: null,initialXFBML: null,onUpdateCallback: null,lastUser: null,friendPermissions: {},userPermissions: {},forceLogin: false,subXFBML: null,canUpdate: false,scrobblingEnabled: false,currentListening: null,loginOnLoad: null,init: function() {
            this.LISTEN_APPLICATION_ID = 
            "111132365592157";
            if (window.location.host.indexOf("grooveshark.com") > -1 && this.APPLICATION_ID !== this.LISTEN_APPLICATION_ID || !this.APPLICATION_ID)
                this.APPLICATION_ID = this.LISTEN_APPLICATION_ID;
            this._super()
        },appReady: function() {
            c = this.subscribe("gs.cowbell.ready", this.callback("commReady"))
        },commReady: function() {
            if (_.browserDetect().browser != "msie" || _.browserDetect().version > 6) {
                window.fbAsyncInit = GS.getFacebook().callback("initFacebook");
                window.fbLoadAttempts = 0;
                var h = function() {
                    if ($.browser.msie && this.readyState) {
                        if (this.readyState === 
                        "complete" || this.readyState === "loaded") {
                            this.onload = this.onreadystatechange = null;
                            setTimeout(function() {
                                window.FB && GS.getFacebook().initFacebook()
                            }, 10)
                        }
                    } else {
                        this.onload = this.onreadystatechange = null;
                        setTimeout(function() {
                            window.FB && GS.getFacebook().initFacebook()
                        }, 10)
                    }
                };
                window.loadFacebook = function() {
                    try {
                        if (document.getElementById("fb-root") && document.getElementById("fb-root").getElementsByTagName("script").length) {
                            document.getElementById("fb-root").removeChild(document.getElementById("fb-root").getElementsByTagName("script")[0]);
                            document.getElementById("fb-root") && document.getElementById("fb-root").getElementsByTagName("div").length && document.getElementById("fb-root").removeChild(document.getElementById("fb-root").getElementsByTagName("div")[0]);
                            window.FB = null;
                            GS.getFacebook().facebookloaded = false
                        }
                        var m = document.createElement("script");
                        m.async = true;
                        m.src = document.location.protocol + "//connect.facebook.net/en_US/all.js?20120211";
                        m.onload = m.onreadystatechange = h;
                        document.getElementById("fb-root").appendChild(m);
                        window.fbLoadAttempts++;
                        window.facebookLoadTimeout = setTimeout(function() {
                            if ((!window.FB || !GS.getFacebook().facebookloaded) && window.fbLoadAttempts < 3)
                                window.loadFacebook();
                            else if (!window.FB && window.fbLoadAttempts >= 3)
                                $.publish("gs.notification", {type: "error",message: $.localize.getString("POPUP_UNABLE_LOAD_FACEBOOK")});
                            else
                                GS.getFacebook().facebookloaded || GS.getFacebook().initFacebook()
                        }, 2E4)
                    } catch (k) {
                        console.error("Could not load Facebook Connect JS. Fatal Error: ", k);
                        GS.getFacebook().lastError = k;
                        $.publish("gs.notification", 
                        {type: "error",message: $.localize.getString("POPUP_UNABLE_LOAD_FACEBOOK")})
                    }
                };
                window.loadFacebook()
            }
            if (c) {
                $.unsubscribe(c);
                c = 0
            }
        },initFacebook: function() {
            if (window.FB && window.FB.init && (!window.FB._apiKey || !this.facebookLoaded)) {
                FB.init({appId: this.APPLICATION_ID,status: false,cookie: false,xfbml: false,oauth: true,channelUrl: "//" + window.location.hostname + "/channel.html"});
                this.facebookLoaded = true;
                window.facebookLoadTimeout && clearTimeout(window.facebookLoadTimeout);
                var h = _.browserDetect();
                if (h.browser == 
                "chrome" && h.version < 15) {
                    FB.XD._origin = window.location.protocol + "//" + document.domain + "/" + FB.guid();
                    FB.XD.Flash.init();
                    FB.XD._transport = "flash"
                } else if (h.browser == "opera") {
                    FB.XD._transport = "fragment";
                    FB.XD.Fragment._channelUrl = window.location.protocol + "//" + window.location.host + "/"
                } else if (h.browser == "msie" && h.version == 8) {
                    FB.XD._origin = window.location.protocol + "//" + document.domain + "/" + FB.guid();
                    FB.XD.Flash.init();
                    FB.XD._transport = "flash"
                }
                FB.Event.subscribe("auth.statusChange", this.callback(this.onFacebookLoginStatus, 
                false));
                FB.Event.subscribe("auth.authResponseChange", this.callback(this.onFacebookAuthChanged));
                FB.getLoginStatus();
                FB.Event.subscribe("edge.create", function(m) {
                    window._gaq && window._gaq.push && window._gaq.push(["_trackSocial", "facebook", "like", m]);
                    if (GS.page && GS.page.activePage && GS.page.activePage.likeWidth == "48px") {
                        GS.page.activePage.likeWidth = "77px";
                        GS.page.activePage.likeWidthCache[GS.page.activePage.fbUrl] = "77px";
                        $("#page_content_social_buttons .fblike").css("width", GS.page.activePage.likeWidth)
                    }
                });
                FB.Event.subscribe("edge.remove", function(m) {
                    window._gaq && window._gaq.push && window._gaq.push(["_trackSocial", "facebook", "unlike", m])
                });
                if (!window.document.getElementById("theme_home") || window.location.hash && window.location.hash.indexOf("/s/") > -1) {
                    $.publish("gs.facebook.xfbml.ready", true);
                    GS.getFacebook().initialXFBML = true;
                    this.subXFBML = $.subscribe("gs.facebook.xfbml.ready", this.callback(this.parseTheme))
                } else
                    this.parseTheme();
                setTimeout(this.callback(function() {
                    if (FB.Auth._loadState == "loading") {
                        FB.Auth._loadState = 
                        null;
                        FB.getLoginStatus(this.callback(this.onFacebookLoginStatus, true))
                    }
                }), 1E4);
                console.log("FB initialized");
                this.canUpdate = true;
                this.loginOnLoad ? this.login(this.loginOnLoad.callback, this.loginOnLoad.errback, this.loginOnLoad.flags) : this.update()
            }
        },parseTheme: function() {
            if (window.FB)
                window.document.getElementById("theme_home") && FB.XFBML.parse(window.document.getElementById("theme_home"), this.callback(function() {
                    this.subXFBML && $.unsubscribe(this.subXFBML);
                    setTimeout(function() {
                        $.publish("gs.facebook.xfbml.ready")
                    }, 
                    100);
                    GS.getFacebook().initialXFBML = true
                }));
            else
                this.initFacebook()
        },update: function() {
            if (this.canUpdate)
                this.canUpdate = false
        },cleanSession: function(h) {
            if (h.accessToken.indexOf("|") >= 0) {
                h = h.accessToken.split("|");
                var m = h[1].split("-"), k = {};
                k.facebookUserID = m[1];
                k.sessionKey = m[0];
                k.accessToken1 = h[0];
                k.accessToken3 = h[2];
                return k
            } else
                return false
        },onFacebookAuthChanged: function(h) {
            if (h.status == "connected" && h.authResponse && h.authResponse.userID == this.facebookUserID && this.facebookUserID != g && a != h.authResponse.accessToken)
                this.save(this.flags);
            else if (this.connected && h.authResponse && h.authResponse.userID != this.facebookUserID || !this.connected && h.authResponse && h.authResponse.userID == this.facebookUserID && this.facebookUserID != g)
                this.onFacebookLoginStatus(false, h)
        },onFacebookLoginStatus: function(h, m) {
            if (m) {
                var k = false;
                if (this.connectStatus == m.status && this.connectStatus == "connected" && this.connected && a == m.authResponse.accessToken)
                    k = true;
                else if (this.connectStatus == m.status && this.connectStatus == "unknown" && !this.connected && !a)
                    k = true;
                this.connectStatus = 
                m.status;
                switch (this.connectStatus) {
                    case "connected":
                        this.loggedIntoFacebook = true;
                        if (!this.profile || this.facebookUserID != this.profile.id)
                            if (m.authResponse.userID == this.facebookUserID)
                                FB.api("/me", this.callback("onGetMyProfile", null, null));
                            else
                                this.facebookUserID && FB.api("/?id=" + this.facebookUserID, this.callback("onGetMyProfile", null, null));
                        break;
                    case "not_authorized":
                        this.loggedIntoFacebook = true;
                        break;
                    case "unknown":
                    default:
                        if (b)
                            return;
                        this.loggedIntoFacebook = false;
                        break
                }
                this.connected = this.loggedIntoFacebook && 
                m.authResponse && m.authResponse.userID && m.authResponse.userID == this.facebookUserID ? true : false;
                if (!k) {
                    this.updateFacebookAuth();
                    $.publish("gs.facebook.status.update")
                }
                if ($.isFunction(this.onUpdateCallback)) {
                    this.onUpdateCallback();
                    this.onUpdateCallback = null
                }
            }
        },updateFacebookAuth: function() {
            if (this.facebookUserID && a) {
                var h = FB.getAuthResponse();
                if (a && (!h || !h.accessToken))
                    FB.Auth.setAuthResponse({accessToken: a,expiresIn: 0,signedRequest: "",userID: this.facebookUserID}, "connected");
                if (this.connected) {
                    if ((this.flags & 
                    this.WALL_FAVORITES) > 0 || (this.flags & this.WALL_PLAYLIST_CREATE) > 0) {
                        g = this.facebookUserID;
                        this.checkUserPermissions(this.PUBLISH_PERMISSION, this.callback(function(m) {
                            m || $.publish("gs.facebook.notification.cannotPost", {notifLocale: "POPUP_LOGIN_FACEBOOK_FLAGS_PERMS",successButton: "NOTIF_FACEBOOK_CONNECT_BUTTON"});
                            g = null
                        }), this.callback(function(m) {
                            if (m && m.error_code == 190) {
                                a = null;
                                this.showReAuthLightbox()
                            } else
                                $.publish("gs.facebook.notification.cannotPost")
                        }))
                    }
                    if (!(this.flags & this.SCROBBLING_OFF_FLAG)) {
                        g = 
                        this.facebookUserID;
                        this.checkUserPermissions(this.USER_ACTIONS, this.callback(function(m) {
                            if (!m) {
                                $.publish("gs.facebook.notification.cannotPost", {notifLocale: "POPUP_LOGIN_FACEBOOK_FLAGS_LISTEN_PERMS",cancelButton: "NOTIF_FACEBOOK_LISTENS_DISABLE",successButton: "SURE"});
                                this.scrobblingEnabled = false
                            }
                            g = null
                        }), this.callback(function(m) {
                            if (m && m.error_code == 190) {
                                a = null;
                                this.showReAuthLightbox()
                            } else {
                                $.publish("gs.facebook.notification.cannotPost", {notifLocale: "POPUP_LOGIN_FACEBOOK_FLAGS_LISTEN",successButton: "NOTIF_FACEBOOK_CONNECT_BUTTON"});
                                this.scrobblingEnabled = false
                            }
                        }))
                    }
                } else if (this.scrobblingEnabled)
                    $.publish("gs.facebook.notification.cannotPost", {notifLocale: "POPUP_LOGIN_FACEBOOK_FLAGS_LISTEN"});
                else
                    (this.flags & this.WALL_FAVORITES) > 0 || (this.flags & this.WALL_PLAYLIST_CREATE) > 0 ? $.publish("gs.facebook.notification.cannotPost") : $.publish("gs.notification", {type: "error",message: $.localize.getString("POPUP_LOGOUT_FACEBOOK")})
            }
        },onUserFacebookData: function(h) {
            try {
                if (window.FB && h && h.FacebookUserID) {
                    a = h.AccessToken1 ? h.AccessToken1 + "|" + h.SessionKey + 
                    "-" + h.FacebookUserID + "|" + h.AccessToken3 : h.AccessTokenEx;
                    this.facebookUserID = h.FacebookUserID;
                    this.flags = h.Flags;
                    if ((this.flags & this.SCROBBLING_OFF_FLAG) == 0)
                        this.scrobblingEnabled = true;
                    if (FB.Auth._loadState == "loading")
                        FB.Auth._loadState = null;
                    FB.getLoginStatus(this.callback(this.onFacebookLoginStatus, false))
                } else
                    this.connected = false
            } catch (m) {
                this.connected = false
            }
        },onAuthFacebookUser: function(h, m, k) {
            if (k)
                if (k.userID == 0)
                    this.register(h, m);
                else {
                    FB.getLoginStatus(this.callback(this.onFacebookLoginStatus, 
                    false));
                    $.isFunction(h) && h(k);
                    GS.getGuts().logEvent("facebookAuthenticated", {authenticated: true})
                }
            else
                $.isFunction(m) && m({error: "POPUP_SIGNUP_LOGIN_FORM_FACEBOOK_ERROR"})
        },showReAuthLightbox: function() {
            GS.getLightbox().close();
            GS.getLightbox().open({type: "reAuthFacebook",view: {header: "POPUP_FACEBOOK_REAUTH_TITLE",message: "POPUP_FACEBOOK_REAUTH_MESSAGE",buttonsRight: [{label: "POPUP_REAUTH_SUBMIT",className: "submit"}],buttonsLeft: [{label: "POPUP_FACEBOOK_REAUTH_CANCEL",className: "cancel"}]},callbacks: {".submit": function() {
                        var h = 
                        GS.getFacebook().flags;
                        GS.getFacebook().logout(function() {
                            GS.getFacebook().login(function() {
                                GS.getLightbox().close()
                            }, null, h)
                        })
                    },".cancel": function() {
                        if (GS.getFacebook().registeredWithFacebook) {
                            GS.getLightbox().close("reAuthFacebook");
                            GS.getLightbox().open("resetPassword", function() {
                                var h = GS.getFacebook().flags;
                                GS.getFacebook().logout(this.callback(function() {
                                    GS.getLightbox().close()
                                }), h)
                            })
                        } else
                            GS.getFacebook().logout(function() {
                                GS.getLightbox().close()
                            })
                    }}})
        },showInvalidPermissionsLightbox: function(h) {
            if ($.isFunction(h)) {
                GS.getLightbox().close();
                GS.getLightbox().open({type: "invalidPermissionsFacebook",view: {header: "POPUP_FACEBOOK_PERMS_TITLE",message: "POPUP_FACEBOOK_PERMS_MESSAGE",buttonsRight: [{label: "POPUP_REAUTH_AUTH_SUBMIT",className: "submit"}],buttonsLeft: [{label: "POPUP_FACEBOOK_PERMS_CANCEL",className: "close"}]},callbacks: {".submit": function() {
                            h()
                        },".close": function() {
                            GS.getFacebook().logout(function() {
                                GS.getLightbox().close()
                            })
                        }}})
            }
        },authErrors: [608, 450, 451, 452, 453, 454, 455, 200, 190, 10],queryFQL: function(h, m, k, n) {
            FB.api({method: "fql.query",
                query: h}, this.callback(function(o) {
                if (o.error_code) {
                    if ($.isFunction(k))
                        k(o);
                    else
                        n && $.inArray(o.error_code, this.authErrors) && this.showReAuthLightbox();
                    if (n) {
                        o = o.error_code + " (" + n + ")";
                        GS.getGuts().forceLogEvent("facebookFQLErr", {errCode: o})
                    }
                } else
                    $.isFunction(m) && m(o)
            }))
        },register: function(h, m) {
            if (window.FB && FB.getAuthResponse() && FB.getAuthResponse().userID)
                this.queryFQL("select uid,name,first_name,last_name,profile_url,username,about_me,birthday_date,sex,email,locale from user where uid = me()", function(k) {
                    if (k && 
                    k[0]) {
                        var n = {id: k[0].uid,name: k[0].name,first_name: k[0].first_name,last_name: k[0].last_name,link: k[0].profile_url,birthday: k[0].birthday_date,about: k[0].profile_blurb,gender: k[0].sex,email: k[0].email,locale: k[0].locale};
                        GS.getFacebook().gotProfileForRegister(h, m, k[0].username ? k[0].username : "", n)
                    } else
                        GS.getFacebook().gotProfileForRegister(h, m)
                }, function() {
                    var k = FB.getAccessToken();
                    FB.getLoginStatus(GS.getFacebook().callback(function(n) {
                        if (!n.authResponse || n.authResponse.accessToken != k) {
                            this.onFacebookLoginStatus(false, 
                            n);
                            this.login(h, m)
                        }
                    }), true)
                }, 4);
            else
                $.isFunction(m) && m({error: "POPUP_SIGNUP_LOGIN_FORM_FACEBOOK_ERROR"})
        },gotProfileForRegister: function(h, m, k, n) {
            if (n && !n.error)
                GS.service.getUsernameSuggestions(k, n.name ? n.name : "", n.id, this.callback("usernameSuggestSuccess", h, m, n), this.callback("usernameSuggestFailed", h, m, n));
            else
                m && m({error: "POPUP_SIGNUP_LOGIN_FORM_FACEBOOK_ERROR"})
        },usernameSuggestSuccess: function(h, m, k, n) {
            m = "";
            if (n && n.length > 0)
                m = n[0];
            this.openRegisterLightbox(h, m, k)
        },usernameSuggestFailed: function(h, 
        m, k) {
            h && m ? m({error: "POPUP_SIGNUP_LOGIN_FORM_FACEBOOK_ERROR"}) : this.openRegisterLightbox(null, "", k)
        },openRegisterLightbox: function(h, m, k) {
            h = {isFacebook: !_.isEmpty(k),username: m,session: this.cleanSession(FB.getAuthResponse()),fbFlags: 0,message: $.localize.getString("POPUP_SIGNUP_LOGIN_FORM_FACEBOOK_NOT_FOUND")};
            if (!h.session) {
                m = FB.getAuthResponse();
                h.session = {facebookUserID: m.userID,accessTokenEx: m.accessToken}
            }
            if (k) {
                if (k.birthday) {
                    m = k.birthday.split("/");
                    h.month = m[0];
                    h.day = m[1];
                    h.year = parseInt(m[2])
                }
                h.fname = 
                k.name ? k.name : "";
                if (k.gender == "female")
                    h.sex = "F";
                else if (k.gender == "male")
                    h.sex = "M";
                h.email = k.email ? k.email : ""
            }
            GS.user.defaultFromService = h;
            GS.getLightbox().close();
            GS.page.activePageName == "SignupController" ? GS.page.activePage.update(h) : GS.router.setHash("/signup");
            GS.getGuts().logEvent("facebookRegistered", {registered: true})
        },serviceLogout: function(h) {
            b = true;
            FB.logout(function() {
                FB.Auth.setAuthResponse({accessToken: null,expiresIn: 0,signedRequest: "",userID: null}, "unknown");
                $.isFunction(h) && h();
                b = 
                false
            })
        },login: function(h, m, k) {
            if (window.FB && window.FB.login)
                if (GS.airbridge && GS.airbridge.isDesktop)
                    this.connectStatus == "connected" && !this.forceLogin ? FB.getLoginStatus(this.callback("onAIRLogin", h, m, k)) : FB.login(this.callback("onAIRLogin", h, m, k), {scope: this.PERMISSIONS});
                else
                    this.connectStatus == "connected" && !this.forceLogin ? FB.getLoginStatus(this.callback("onLogin", h, m, k)) : FB.login(this.callback("onLogin", h, m, k), {scope: this.PERMISSIONS});
            else if (this.facebookLoaded)
                m && m({error: "POPUP_SIGNUP_LOGIN_FORM_FACEBOOK_ERROR"});
            else
                this.loginOnLoad = {callback: h,errback: m,flags: k}
        },onAIRLogin: function(h, m, k, n) {
            window.setTimeout(function() {
                GS.getFacebook().onLogin(h, m, k, n)
            }, 300)
        },onLogin: function(h, m, k, n) {
            n.authResponse && this.checkUserPermissions(this.REQUIRED_PERMISSIONS, this.callback(function(o) {
                if (o)
                    if (GS.user.isLoggedIn) {
                        if (!this.connected && this.facebookUserID && this.facebookUserID != n.authResponse.userID)
                            this.friends = this.profile = null;
                        this.save(k ? k : 0, h, m)
                    } else
                        (o = this.cleanSession(n.authResponse)) ? GS.service.authenticateFacebookUser(o.facebookUserID, 
                        o.sessionKey, o.accessToken1, o.accessToken3, null, this.callback("onAuthFacebookUser", h, m), function() {
                            $.isFunction(m) && m({error: "POPUP_SIGNUP_LOGIN_FORM_FACEBOOK_ERROR"})
                        }) : GS.service.authenticateFacebookUser(n.authResponse.userID, "", "", "", n.authResponse.accessToken, this.callback("onAuthFacebookUser", h, m), function() {
                            $.isFunction(m) && m({error: "POPUP_SIGNUP_LOGIN_FORM_FACEBOOK_ERROR"})
                        });
                else
                    GS.getFacebook().showInvalidPermissionsLightbox(GS.getFacebook().callback(function() {
                        GS.airbridge && GS.airbridge.isDesktop ? 
                        FB.login(this.callback("onAIRLogin", h, m, k), {scope: this.REQUIRED_PERMISSIONS}) : FB.login(this.callback("onLogin", h, m, k), {scope: this.REQUIRED_PERMISSIONS})
                    }))
            }), function() {
                $.isFunction(m) && m({error: "POPUP_SIGNUP_LOGIN_FORM_FACEBOOK_ERROR"});
                FB.getLoginStatus(GS.getFacebook().callback("onFacebookLoginStatus", false), true)
            })
        },save: function(h, m, k) {
            if (window.FB && FB.getAccessToken() && GS.user.isLoggedIn) {
                var n = FB.getAuthResponse();
                if (n) {
                    var o = this.cleanSession(n);
                    if (GS.user.Flags & this.SERVICE_ID || GS.user.Flags & 
                    this.FACEBOOK_ONLY_SERVICE_ID) {
                        o ? GS.service.updateUserFacebookData(o.facebookUserID, o.sessionKey, o.accessToken1, o.accessToken3, h ? h : 0, null, this.callback("onSaveUserFacebookData", m, k), k) : GS.service.updateUserFacebookData(n.userID, "", "", "", h ? h : 0, n.accessToken, this.callback("onSaveUserFacebookData", m, k), k);
                        if (!(h & this.SCROBBLING_OFF_FLAG) && (this.flags & this.SCROBBLING_OFF_FLAG) > 0)
                            this.scrobblingEnabled = true
                    } else {
                        o ? GS.service.saveUserFacebookData(o.facebookUserID, o.sessionKey, o.accessToken1, o.accessToken3, 
                        h ? h : 0, null, this.callback("onSaveUserFacebookData", m, k), k) : GS.service.saveUserFacebookData(n.userID, "", "", "", h ? h : 0, n.accessToken, this.callback("onSaveUserFacebookData", m, k), k);
                        if (!(h & this.SCROBBLING_OFF_FLAG))
                            this.scrobblingEnabled = true
                    }
                    this.flags = h;
                    if (this.flags & this.SCROBBLING_OFF_FLAG)
                        this.scrobblingEnabled = false;
                    else
                        this.checkUserPermissions(this.USER_ACTIONS, this.callback(function(q) {
                            if (q)
                                this.scrobblingEnabled = true;
                            else {
                                $.publish("gs.facebook.notification.cannotPost", {notifLocale: "POPUP_LOGIN_FACEBOOK_FLAGS_LISTEN_PERMS",
                                    cancelButton: "NOTIF_FACEBOOK_LISTENS_DISABLE",successButton: "SURE"});
                                this.scrobblingEnabled = false
                            }
                        }), function() {
                            $.publish("gs.facebook.notification.cannotPost", {notifLocale: "POPUP_LOGIN_FACEBOOK_FLAGS_LISTEN_PERMS",cancelButton: "NOTIF_FACEBOOK_LISTENS_DISABLE",successButton: "SURE"});
                            this.scrobblingEnabled = false
                        })
                } else
                    k && k({error: "POPUP_SIGNUP_LOGIN_FORM_FACEBOOK_ERROR"})
            }
        },onSaveUserFacebookData: function(h, m, k) {
            if (k == 1 && window.FB) {
                this.facebookUserID = FB.getAuthResponse().userID;
                this.connected = true;
                FB.api("/me", this.callback("onGetMyProfile", h, m));
                if (!(GS.user.Flags & this.SERVICE_ID) && !(GS.user.Flags & this.FACEBOOK_ONLY_SERVICE_ID) && this.lastUser !== GS.user.UserID) {
                    !$("#lightbox_wrapper:visible").length && GS.page.activePageName != "SettingsController" && GS.getLightbox().open("newFacebookUser");
                    GS.getGuts().logEvent("facebookNewSave", {newSave: true})
                }
                GS.user.Flags |= this.SERVICE_ID
            } else if (k == -1)
                m && m({error: "FACEBOOK_DUPLICATE_ACCOUNT_ERROR_MSG",signupError: 4096});
            else
                m && m({error: "POPUP_SIGNUP_LOGIN_FORM_FACEBOOK_ERROR"})
        },
        onGetMyProfile: function(h, m, k) {
            if (k && k.id) {
                this.profile = k;
                $.publish("gs.facebook.profile.update");
                h && h()
            } else {
                this.connected = false;
                this.lastError = k;
                GS.user && GS.user.isLoggedIn && k.error && k.error.type == "OAuthException" && this.APPLICATION_ID == this.LISTEN_APPLICATION_ID && this.showReAuthLightbox();
                m && m()
            }
        },logout: function(h) {
            if (GS.user.isLoggedIn)
                this.profile && this.profile.id ? GS.service.removeUserFacebookData(this.profile.id, this.callback("onLogout", h)) : GS.service.removeUserFacebookData(false, this.callback("onLogout", 
                h));
            else {
                this.clearInfo();
                $.isFunction(h) && h()
            }
        },onLogout: function(h) {
            if (!this.registeredWithFacebook) {
                GS.user.Flags = (GS.user.Flags | this.SERVICE_ID) - this.SERVICE_ID;
                this.lastUser = GS.user.UserID
            }
            this.clearInfo(h);
            this.forceLogin = true
        },clearInfo: function(h) {
            this.profile = {};
            this.friends = null;
            this.friendPermissions = {};
            this.userPermissions = {};
            this.registeredWithFacebook = this.connected = false;
            this.onLoginSaveData = this.loginOnLoad = null;
            this.facebookUserID = false;
            this.flags = 0;
            this.scrobblingEnabled = false;
            a = 
            null;
            this.onUpdateCallback = h;
            FB.getLoginStatus(this.callback("onFacebookLoginStatus", false), true);
            $.isFunction(this.onUpdateCallback) && setTimeout(this.callback(function() {
                if ($.isFunction(this.onUpdateCallback)) {
                    this.onUpdateCallback();
                    this.onUpdateCallback = null
                }
            }), 1E4);
            $.publish("gs.facebook.profile.update")
        },onFavoriteSong: function(h, m, k) {
            if (this.connected && (k || (this.flags & this.WALL_FAVORITES) > 0)) {
                var n = this.callback(function() {
                    $.isFunction(h.toUrl) ? this.postLink("me", "http://grooveshark.com" + h.toUrl().replace("#!/", 
                    "/"), m, "song", k ? "notif" : "auto", this.callback("initiateRateLimit"), this.callback("onFailedPostEvent"), !k, h) : GS.Models.Song.getSong(_.orEqualEx(h.SongID, h.songID, h), this.callback(function(o) {
                        if ($.isFunction(o.toUrl))
                            this.postLink("me", "http://grooveshark.com" + o.toUrl().replace("#!/", "/"), m, "song", k ? "notif" : "auto", this.callback("initiateRateLimit"), this.callback("onFailedPostEvent"), !k, o)
                    }), this.onFailedPostEvent)
                });
                this.autoRateLimited && !k ? setTimeout(function() {
                    $.publish("gs.facebook.notification.rateLimited", 
                    {callback: n,type: "song"})
                }, 300) : n()
            }
        },onPlaylistCreate: function(h, m, k) {
            if (this.connected && (k || (this.flags & this.WALL_PLAYLIST_CREATE) > 0)) {
                var n = this.callback(function() {
                    this.postLink("me", "http://grooveshark.com" + h.toUrl().replace("#!/", "/"), m, "playlist", k ? "notif" : "auto", this.callback("initiateRateLimit"), this.callback("onFailedPostEvent"), !k, h)
                });
                this.autoRateLimited && !k ? setTimeout(function() {
                    $.publish("gs.facebook.notification.rateLimited", {callback: n,type: "playlist"})
                }, 300) : n()
            }
        },onSubscribePlaylist: function(h, 
        m) {
            this.connected && this.postLink("me", "http://grooveshark.com" + h.toUrl().replace("#!/", "/"), m, "playlist", "notif", this.callback("initiateRateLimit"), this.callback("onFailedPostEvent"), false, h)
        },onFollowUser: function(h, m) {
            this.connected && this.postLink("me", "http://grooveshark.com" + h.toUrl().replace("#!/", "/"), m, "user", "notif", this.callback("initiateRateLimit"), this.callback("onFailedPostEvent"), false, h)
        },onFailedPostEvent: function() {
            $.publish("gs.facebook.notification.sent", {params: {type: "error",hideUndo: true},
                data: {},notifData: {}})
        },initiateRateLimit: function() {
            this.autoRateLimited && window.clearTimeout(this.autoRateLimited);
            this.autoRateLimited = setTimeout(this.callback(function() {
                this.autoRateLimited = null
            }), this.AUTO_RATE_LIMIT)
        },postToFeed: function(h, m, k, n, o, q, x, v, A) {
            h = _.orEqual(h, "me");
            this.postToFacebook("/" + h + "/feed", h, m, k, n, o, q, x, false, A)
        },postLink: function(h, m, k, n, o, q, x, v, A) {
            h = _.orEqual(h, "me");
            this.postToFacebook("/" + h + "/links", h, m, k, n, o, q, x, v, A)
        },postToFacebook: function(h, m, k, n, o, q, x, v, A, t) {
            if (this.connected) {
                var w = 
                {};
                w.link = k;
                w.message = n;
                w.access_token = FB.getAccessToken();
                w.type = _.orEqual(o, "song");
                w.ref = _.orEqual(q, "");
                k = $.extend(w, {hideUndo: !A,object: t});
                FB.api(h, "post", w, this.callback("onPostAPIReturn", k, h, m, x, v))
            } else
                $.isFunction(v) && v("No facebook session.")
        },onPostAPIReturn: function(h, m, k, n, o, q) {
            q.error ? this.onFailedPost(m, o, q.error, k, h) : this.onFeedPost(h, n, k, q)
        },onFeedPost: function(h, m, k, n) {
            n.target = k;
            h.type && $.publish("gs.facebook.notification.sent", {params: h,data: n,notifData: {}});
            m && m();
            GS.getGuts().forceLogEvent("facebookShareAPI", 
            {userID: GS.user.UserID,success: 1})
        },onFailedPost: function(h, m, k, n, o) {
            this.lastError = k;
            $.isFunction(m) && m(k);
            if (k.type == "OAuthException" && (k.message.indexOf("User not visible") > -1 || k.message.indexOf("Requires extended permission") > -1))
                k.message += " (Target: " + n + ")";
            else if (o && k.type == "OAuthException" && k.message.indexOf("Param message must be non-blank text") > -1)
                k.message += " (Message: " + _.cleanText(o.message) + ")";
            else if (o && k.type == "OAuthException" && k.message.indexOf("An active access token must be used to query information") > 
            -1)
                k.message = "An active access token needed.";
            if (GS.airbridge && GS.airbridge.isDesktop)
                k.message += " (Desktop)";
            k.message += FB.getAccessToken() && FB.getAccessToken() !== "" ? " (" + FB.getAccessToken().substring(0, 10) + ")" : " (No Access Token)";
            if (this.connected)
                k.message += " (Connected)";
            if (this.facebookUserID)
                k.message += " (FBUID: " + this.facebookUserID + ")";
            GS.getGuts().forceLogEvent("facebookShareErrMessage", {message: k.message,type: k.type});
            GS.getGuts().forceLogEvent("facebookShareAPI", {userID: GS.user.UserID,
                success: 0})
        },removeEvent: function(h) {
            if (window.FB && this.connected && h && h.id) {
                var m = (h.target == "me" ? FB.getAuthResponse().userID : h.user) + "_" + h.id;
                FB.api("/" + m + "?method=delete", this.callback("onRemoveEvent", h))
            }
        },onRemoveEvent: function(h, m) {
            if (m)
                $.publish("gs.facebook.notification.removed", {data: m,params: h});
            else {
                this.onFailedPost(null, null, m);
                $.publish("gs.notification", {type: "error",message: $.localize.getString("NOTIF_FACEBOOK_UNDO_FAILED")})
            }
        },onNowPlaying: function(h) {
            if (this.connected && this.scrobblingEnabled) {
                if (!this.currentListening || 
                h.queueSongID != this.currentListening.song.queueSongID || h.SongID != this.currentListening.song.SongID) {
                    this.currentListening && this.currentListening.id && this.currentListening.secondsListened < this.MINIMUM_DURATION && this.deleteListen(this.currentListening.id);
                    this.currentListening = {song: h,secondsListened: 0,id: null,tries: 0}
                } else if (GS.player.repeatMode == GS.player.REPEAT_ONE && h.queueSongID == this.currentListening.song.queueSongID) {
                    this.currentListening.secondsListened = 0;
                    if (this.currentListening.id) {
                        this.deleteListen(this.currentListening.id, 
                        this.callback(function() {
                            delete this.currentListening.id;
                            this.currentListening.tries = 0;
                            this.postListen(this.currentListening.song, this.callback("onNowPlayingComplete"))
                        }));
                        return
                    }
                } else
                    return;
                h && this.postListen(h, this.callback("onNowPlayingComplete"))
            }
        },onNowPlayingComplete: function(h, m) {
            if (!m || !m.id) {
                if (this.currentListening.tries > 1)
                    if (m.error && m.error.message && (m.error.message.indexOf("Timeline is not activated") !== -1 || m.error.message.indexOf("Requires extended permission") !== -1)) {
                        $.publish("gs.facebook.notification.cannotPost", 
                        {notifLocale: "POPUP_LOGIN_FACEBOOK_FLAGS_LISTEN_PERMS_FAILED",cancelButton: "NOTIF_FACEBOOK_LISTENS_DISABLE",successButton: "SURE",error: true});
                        this.scrobblingEnabled = false
                    } else {
                        if (m.error && m.error.message)
                            m.error.message += " (Scrobble)";
                        this.onFailedPost("scrobble", function() {
                            $.publish("gs.notification", {type: "error",message: $.localize.getString("POPUP_FAIL_LISTENS_FACEBOOK")})
                        }, m.error)
                    }
            } else
                this.currentListening.id = m.id
        },onSongPlaying: function(h) {
            if (this.connected && this.scrobblingEnabled) {
                h = h.activeSong;
                if (!this.currentListening || h.queueSongID != this.currentListening.song.queueSongID || h.SongID != this.currentListening.song.SongID)
                    this.onNowPlaying(h);
                else
                    this.currentListening.secondsListened += 0.5
            }
        },onPlayStatusChange: function(h) {
            if (this.connected && this.scrobblingEnabled && this.currentListening && this.currentListening.song)
                switch (h.status) {
                    case GS.player.PLAY_STATUS_FAILED:
                    case GS.player.PLAY_STATUS_PAUSED:
                    case GS.player.PLAY_STATUS_NONE:
                        if (this.currentListening.id && this.currentListening.secondsListened < 
                        this.MINIMUM_DURATION)
                            this.deleteListen(this.currentListening.id, this.callback(function() {
                                delete this.currentListening.id;
                                this.currentListening.tries = 0
                            }));
                        else if (this.currentListening.id && !this.currentListening.paused) {
                            var m = new Date;
                            this.updateListenEndTime(this.currentListening.id, m);
                            this.currentListening.paused = true
                        }
                        break;
                    case GS.player.PLAY_STATUS_PLAYING:
                        if (this.currentListening.id) {
                            if (this.currentListening.paused) {
                                m = new Date;
                                if (this.currentListening.expires && this.currentListening.expires - m < 
                                0)
                                    this.deleteListen(this.currentListening.id, this.callback(function() {
                                        delete this.currentListening.id;
                                        this.currentListening.tries = 0;
                                        this.postListen(this.currentListening.song, this.callback("onNowPlayingComplete"))
                                    }));
                                else {
                                    m = new Date;
                                    m.setTime(m.getTime() + h.duration - h.position);
                                    this.updateListenEndTime(this.currentListening.id, m)
                                }
                            }
                        } else
                            this.postListen(this.currentListening.song, this.callback("onNowPlayingComplete"));
                        this.currentListening.paused = false;
                        break
                }
        },postListen: function(h, m) {
            if (!(!FB.getAccessToken() || 
            this.currentListening && (this.currentListening.posting || this.currentListening.tries > 1))) {
                if (this.currentListening) {
                    this.currentListening.posting = true;
                    this.currentListening.tries++
                }
                var k = GS.player.getPlaybackStatus();
                setTimeout(this.callback(function() {
                    var n = {}, o = h.toUrl().replace("#!/", "/");
                    if (o.toLowerCase() == "/notfound")
                        $.publish("gs.notification", {type: "error",message: $.localize.getString("POPUP_FAIL_LISTENS_FACEBOOK")});
                    else {
                        n.song = "http://grooveshark.com" + o;
                        n.access_token = FB.getAccessToken();
                        if (h.AlbumID && h.AlbumName)
                            n.album = "http://grooveshark.com" + _.cleanUrl(h.AlbumName, h.AlbumID, "album").replace("#!/", "/");
                        if (h.ArtistID && h.ArtistName)
                            n.album = "http://grooveshark.com" + _.cleanUrl(h.ArtistName, h.ArtistID, "artist").replace("#!/", "/");
                        if (k.duration) {
                            n.expires_in = Math.round((k.duration - k.position) / 1E3);
                            o = new Date;
                            this.currentListening.expires = o.setTime(o.getTime() + k.duration)
                        }
                        FB.api("/me/grooveshark:listen", "post", n, this.callback(function(q) {
                            $.isFunction(m) && m(h, q);
                            delete this.currentListening.posting;
                            GS.getGuts().logEvent("facebookScrobbleSuccess", {userID: GS.user.UserID})
                        }))
                    }
                }), 50)
            }
        },updateListenEndTime: function(h, m) {
            function k(o) {
                return o < 10 ? "0" + o : o
            }
            var n = m.getUTCFullYear() + "-" + k(m.getUTCMonth() + 1) + "-" + k(m.getUTCDate()) + "T" + k(m.getUTCHours()) + ":" + k(m.getUTCMinutes()) + ":" + k(m.getUTCSeconds()) + "Z";
            FB.api("/" + h + "?end_time=" + n, "post")
        },deleteLastListen: function() {
            this.currentListening && this.currentListening.id && this.deleteListen(this.currentListening.id, this.callback(function() {
                delete this.currentListening.id;
                this.currentListening.tries = 0
            }))
        },deleteListen: function(h, m) {
            if (!this.currentListening.deleting) {
                this.currentListening.deleting = true;
                FB.api("/" + h + "?method=delete", this.callback("onDeleteListen", m))
            }
        },onDeleteListen: function(h, m) {
            if (m)
                $.isFunction(h) && h();
            else
                $.publish("gs.notification", {type: "error",message: $.localize.getString("POPUP_FAIL_LISTENS_FACEBOOK")});
            delete this.currentListening.deleting
        },getFriends: function(h) {
            if (this.friends)
                h(this.friends);
            else if (this.connected)
                FB.api("me/friends", 
                this.callback("onFacebookGetFriends", h));
            else
                $.isFunction(h) && h(null)
        },onFacebookGetFriends: function(h, m) {
            if (m.data) {
                var k = [];
                $.each(m.data, function(n, o) {
                    k.push(o)
                });
                k.sort(function(n, o) {
                    var q = (n.name || "").toLowerCase(), x = (o.name || "").toLowerCase();
                    if (q < x)
                        return -1;
                    else if (q > x)
                        return 1;
                    return 0
                });
                this.friends = k
            } else if (m.error) {
                this.lastError = m.error;
                $.publish("gs.notification", {type: "error",message: $.localize.getString("NOTIF_FACEBOOK_FINDFRIENDS_ERROR")});
                $.isFunction(h) && h(null)
            }
            $.isFunction(h) && 
            h(this.friends)
        },canPostToFriend: function(h, m) {
            (h = parseInt(h)) || $.isFunction(m) && m(false);
            if (this.friendPermissions[h] && typeof this.friendPermissions[h].canPost != "undefined")
                $.isFunction(m) && m(this.friendPermissions[h].canPost);
            else
                this.queryFQL("select can_post FROM user WHERE uid = " + h, this.callback(function(k) {
                    if (k[0] && k[0]) {
                        if (this.friendPermissions[h])
                            this.friendPermissions[h].canPost = k[0].can_post;
                        else
                            this.friendPermissions[h] = {canPost: k[0].can_post};
                        $.isFunction(m) && m(k[0].can_post)
                    }
                }), function() {
                }, 
                2)
        },checkUserPermissions: function(h, m, k) {
            if (!FB.getAccessToken()) {
                if (k)
                    k();
                else
                    m && m(false);
                return false
            }
            if (this.userPermissions)
                if (h.indexOf(",") > 0) {
                    for (var n = h.split(","), o = true, q = 0, x = n.length; q < x; q++)
                        if (!this.userPermissions[n[q]] || this.userPermissions[n[q]] == "0") {
                            o = false;
                            break
                        }
                    if (o)
                        if ($.isFunction(m)) {
                            m(true);
                            return
                        }
                } else if (this.userPermissions[h] && this.userPermissions[h] != "0")
                    if ($.isFunction(m)) {
                        m(true);
                        return
                    }
            this.queryFQL("SELECT " + h + " FROM permissions WHERE uid = me()", this.callback(function(v) {
                if (v && 
                v[0]) {
                    $.extend(this.userPermissions, v[0]);
                    for (var A in v[0])
                        if (A && v[0].hasOwnProperty(A))
                            if (v[0][A] == "0") {
                                $.isFunction(m) && m(false);
                                return
                            }
                    $.isFunction(m) && m(true)
                } else
                    $.isFunction(m) && m(false)
            }), k, false)
        },getFacebookDetails: function(h, m) {
            if (h.toUrl) {
                var k = "http://listen.grooveshark.com/" + h.toUrl().replace("#!/", "");
                GS.service.makeFacebookRequest("?ids=" + encodeURIComponent(k) + "&limit=100", null, "GET", function(n) {
                    try {
                        if (n) {
                            n = JSON.parse(n);
                            _.forEach(n, function(q) {
                                m(q)
                            })
                        }
                    } catch (o) {
                    }
                })
            }
        },getGroovesharkUsersFromFriends: function(h) {
            this.getFriends(this.callback(function(m) {
                if ($.isArray(m)) {
                    var k = 
                    [], n = [];
                    $.each(m, function(o, q) {
                        if (q && q.id) {
                            k.push(q.id);
                            n[q.id] = q.name
                        }
                    });
                    GS.service.getGroovesharkUsersFromFacebookUserIDs(k, this.callback("onGetGroovesharkUsers", n, h), function() {
                        $.publish("gs.notification", {type: "error",message: $.localize.getString("NOTIF_FACEBOOK_FINDFRIENDS_ERROR")});
                        $.isFunction(h) && h()
                    })
                } else {
                    $.publish("gs.notification", {type: "error",message: $.localize.getString("NOTIF_FACEBOOK_FINDFRIENDS_ERROR")});
                    $.isFunction(h) && h()
                }
            }))
        },onGetGroovesharkUsers: function(h, m, k) {
            var n = [], o = 
            false;
            if (k) {
                $.each(k, function(q, x) {
                    if (x && x.UserID && x.FacebookUserID && GS.user.favorites.users && !GS.user.favorites.users[x.UserID]) {
                        x.FacebookName = h[x.FacebookUserID];
                        n.push(x)
                    } else if (GS.user.favorites.users && GS.user.favorites.users[x.UserID])
                        o = true
                });
                if (n && n.length > 0)
                    GS.getLightbox().open("gsUsersFromThirdParty", {users: n,isTwitter: false,isFacebook: true});
                else
                    o ? $.publish("gs.facebook.notification.findFriends", {message: "NOTIF_FACEBOOK_FINDFRIENDS_ALREADY",inviteFriends: false}) : $.publish("gs.facebook.notification.findFriends", 
                    {message: "NOTIF_FACEBOOK_FINDFRIENDS_NONE",inviteFriends: true})
            } else
                $.publish("gs.notification", {type: "error",message: $.localize.getString("NOTIF_FACEBOOK_FINDFRIENDS_ERROR")});
            $.isFunction(m) && m()
        }})
})();
GS.Controllers.BaseController.extend("GS.Controllers.LastfmController", {isGSSingleton: true,preSetup: function() {
        var c = GS.Controllers.BaseController.singletonCallback, a = $.subscribe;
        a("gs.auth.update", c("lastfm", "update", true));
        a("gs.player.nowplaying", c("lastfm", "onNowPlaying"));
        a("gs.player.playing.continue", c("lastfm", "onSongPlaying"))
    }}, {SERVICE_ID: 2,API_KEY: "b1ecfd8a5f8ec4dbb4cdacb8f3638f6d",P_VERSION: "1.2.1",URL_USER_AUTH: "http://www.last.fm/api/auth",URL_AUDIOSCROBBLER: "http://ws.audioscrobbler.com/2.0/",
    CLIENT_ID: "gvs",CLIENT_VERSION: "1",MINIMUM_DURATION: 240,SCROBBLING_FLAG: 1,FAVORITES_FLAG: 2,DEFAULT_FLAGS: 1,authToken: null,sessionKey: null,username: null,sessionID: null,flags: 0,scrobblingEnabled: false,lastError: null,nowPlaying: null,lastPlayed: null,currentListening: null,canUpdate: false,onUpdateSubscription: "gs.lastfm.profile.update",init: function() {
        if (!window.confirmLastfmConnection)
            window.confirmLastfmConnection = this.callback(function(c) {
                console.log("last.fm confirm connection", c);
                if (this.lastfmOpenerWindow) {
                    this.lastfmOpenerWindow.close();
                    this.lastfmOpenerWindow = null
                }
                try {
                    c = JSON.parse(c)
                } catch (a) {
                    this.lastError = "parseError";
                    this.loginFailedCallback();
                    return
                }
                GS.airbridge && GS.airbridge.isDesktop ? window.setTimeout(function() {
                    GS.getLastfm().onLogin(c)
                }, 300) : this.onLogin(c)
            });
        this._super()
    },appReady: function() {
        this.subscribe("gs.cowbell.ready", this.callback("commReady"))
    },commReady: function() {
        this.canUpdate = true;
        this.update()
    },update: function() {
        if (this.canUpdate) {
            this.canUpdate = false;
            GS.user && GS.user.isLoggedIn && GS.user.UserID > 0 && GS.user.Flags & 
            this.SERVICE_ID ? GS.service.getLastfmService(this.callback("onGetService"), this.callback("onGetService")) : this.clearInfo();
            setTimeout(this.callback(function() {
                this.canUpdate = true
            }), 0);
            this.loaded = true
        }
    },onGetService: function(c) {
        if (c.Session) {
            this.username = c.LastfmUsername;
            this.sessionKey = c.Session;
            this.flags = 1;
            this.scrobblingEnabled = true;
            if (c.FlagScrb) {
                this.flags |= this.SCROBBLING_FLAG;
                this.scrobblingEnabled = true
            }
            if (c.FlagFav)
                this.flags |= this.FAVORITES_FLAG;
            this.connected = true;
            $.publish("gs.lastfm.profile.update")
        }
    },
    showReAuthLightbox: function() {
        GS.getLightbox().open({type: "reAuthLastfm",view: {header: "POPUP_LASTFM_REAUTH_TITLE",message: "POPUP_LASTFM_REAUTH_MESSAGE",buttonsRight: [{label: "POPUP_REAUTH_SUBMIT",className: "submit"}],buttonsLeft: GS.getLastfm().registeredWithLastfm ? [] : [{label: "POPUP_LASTFM_REAUTH_CANCEL",className: "close"}]},callbacks: {".submit": function() {
                    GS.getLastfm().logout(function() {
                        GS.getLastfm().login(function() {
                            GS.getLightbox().close()
                        })
                    })
                },".close": function() {
                    GS.getLastfm().logout(function() {
                        GS.getLightbox().close()
                    })
                }}})
    },
    login: function(c, a) {
        if (GS.user && GS.user.isLoggedIn) {
            this.loginSuccessCallback = c;
            this.loginFailedCallback = a;
            this.sessionKey = null;
            var b = "http://" + window.location.host + "/lastfmCallback.php?window=" + window.name, g = googleOpenIDPopup.getCenteredCoords(950, 700);
            this.lastfmOpenerWindow = window.open(this.URL_USER_AUTH + "?api_key=" + this.API_KEY + "&cb=" + b, "", "width=950,height=700,left=" + g[0] + ",top=" + g[1]);
            if (GS.airbridge && GS.airbridge.isDesktop)
                this.lastfmOpenerWindow.parentSandboxBridge = {confirmLastfmConnection: window.confirmLastfmConnection}
        } else
            a({error: "LASTFM_PROBLEM_NOT_LOGGED_IN_ERROR_MSG"})
    },
    onLogin: function(c) {
        if (c.error || !c.token) {
            this.lastError = c.error;
            this.loginFailedCallback()
        } else {
            if (!this.flags)
                this.flags = this.DEFAULT_FLAGS;
            if (GS.user.Flags & this.SERVICE_ID || GS.user.Flags & this.LASTFM_ONLY_SERVICE_ID)
                GS.service.updateLastfmService("", c.token, "", 0, 0, this.callback("onSaveLastfmService", this.loginSuccessCallback, this.loginFailedCallback), this.loginFailedCallback);
            else {
                GS.service.saveLastfmService("", c.token, "", this.flags, this.callback("onSaveLastfmService", this.loginSuccessCallback, 
                this.loginFailedCallback), this.loginFailedCallback);
                if ((this.flags & this.SCROBBLING_FLAG) > 0)
                    this.scrobblingEnabled = true
            }
        }
    },onSaveLastfmService: function(c, a, b) {
        if (b.result && b.lastfmData && b.lastfmData.user) {
            this.username = b.lastfmData.user;
            this.sessionKey = b.lastfmData.session;
            this.connected = true;
            $.publish("gs.lastfm.profile.update");
            GS.user.Flags |= this.SERVICE_ID;
            $.isFunction(a) && c()
        } else if (b.result == -1)
            if (GS.user.Flags & this.SERVICE_ID || GS.user.Flags & this.FACEBOOK_ONLY_SERVICE_ID)
                GS.service.getLastfmService(this.callback("onGetService", 
                c, function() {
                    $.isFunction(a) && a({error: "LASTFM_PROBLEM_CONNECTING_ERROR_MSG"})
                }), function() {
                    $.isFunction(a) && a({error: "LASTFM_PROBLEM_CONNECTING_ERROR_MSG"})
                });
            else
                $.isFunction(a) && a({error: "LASTFM_DUPLICATE_ACCOUNT_ERROR_MSG"});
        else
            $.isFunction(a) && a({error: "POPUP_SIGNUP_LOGIN_FORM_LASTFM_ERROR"})
    },saveFlags: function(c, a, b) {
        var g = 0, h = 0;
        if (c & this.SCROBBLING_FLAG && !(this.flags & this.SCROBBLING_FLAG)) {
            g |= this.SCROBBLING_FLAG;
            this.scrobblingEnabled = true
        } else if (!(c & this.SCROBBLING_FLAG) && this.flags & 
        this.SCROBBLING_FLAG)
            h |= this.SCROBBLING_FLAG;
        if (c & this.FAVORITES_FLAG && !(this.flags & this.FAVORITES_FLAG))
            g |= this.FAVORITES_FLAG;
        else if (!(c & this.FAVORITES_FLAG) && this.flags & this.FAVORITES_FLAG)
            h |= this.FAVORITES_FLAG;
        this.flags = c;
        GS.user.Flags & this.SERVICE_ID || GS.user.Flags & this.LASTFM_ONLY_SERVICE_ID ? GS.service.updateLastfmService("", this.sessionKey, this.username, g, h, this.callback("onSaveLastfmService", a, b), b) : GS.service.saveLastfmService("", this.sessionKey, this.username, g, this.callback("onSaveLastfmService", 
        a, b), b)
    },logout: function(c) {
        this.username ? GS.service.removeLastfmService(this.username, this.callback("onLogout", c)) : GS.service.removeLastfmService(false, this.callback("onLogout", c))
    },onLogout: function(c) {
        GS.user.Flags = (GS.user.Flags | this.SERVICE_ID) - this.SERVICE_ID;
        this.clearInfo();
        $.isFunction(c) && c()
    },clearInfo: function() {
        this.sessionKey = null;
        this.username = "";
        this.flags = null;
        this.scrobblingEnabled = this.connected = false;
        $.publish("gs.lastfm.profile.update")
    },onNowPlaying: function(c) {
        if (!this.currentListening || 
        c.queueSongID != this.currentListening.queueSongID || c.SongID != this.currentListening.songID)
            this.currentListening = {songID: c.SongID,queueSongID: c.queueSongID,secondsListened: 0,scrobbled: false};
        else if (GS.player.repeatMode == GS.player.REPEAT_ONE && c.queueSongID == this.currentListening.queueSongID) {
            this.currentListening.scrobbled = false;
            this.currentListening.secondsListened = 0
        } else
            return;
        if ((this.flags & this.SCROBBLING_FLAG) > 0 && this.scrobblingEnabled && c) {
            this.nowPlaying = {track: c.SongName,artist: c.ArtistName,
                album: c.AlbumName,method: "track.updateNowPlaying",sk: this.sessionKey,api_key: this.API_KEY};
            if (c.TrackNum)
                this.nowPlaying.trackNumber = String(c.TrackNum);
            if (c.EstimateDuration)
                this.nowPlaying.duration = Math.round(c.EstimateDuration / 1E3);
            this.getJSON(this.URL_AUDIOSCROBBLER, this.nowPlaying, this.callback("onNowPlayingComplete"), this.callback("onNowPlayingFailed"), true)
        }
    },onNowPlayingComplete: function(c) {
        if (!c || !c.nowplaying)
            this.onLastfmError("POPUP_FAIL_SCROBBLE_LASTFM", c);
        GS.getGuts().logEvent("lastfmScrobbleSuccess", 
        {userID: GS.user.UserID})
    },onLastfmError: function(c, a) {
        c || (c = "POPUP_FAIL_COMMUNICATE_LASTFM");
        (this.lastError = a) && a.error && a.error == 9 ? this.showReAuthLightbox() : $.publish("gs.notification", {type: "error",message: $.localize.getString(c)});
        GS.getGuts().forceLogEvent("lastfmScrobbleFailed", {userID: GS.user.UserID,message: a.message})
    },onSongPlaying: function(c) {
        var a = c.activeSong;
        c = Math.round(c.duration / 1E3);
        if (!this.currentListening || a.queueSongID != this.currentListening.queueSongID || a.SongID != this.currentListening.songID)
            this.currentListening = 
            {songID: a.SongID,queueSongID: a.queueSongID,secondsListened: 0,scrobbled: false};
        else
            this.currentListening.secondsListened += 0.5;
        if ((this.flags & this.SCROBBLING_FLAG) > 0 && this.scrobblingEnabled && a && c >= 30 && (this.currentListening.secondsListened >= this.MINIMUM_DURATION || this.currentListening.secondsListened >= c / 2) && !this.currentListening.scrobbled) {
            var b = Math.round((new Date).getTime() / 1E3);
            this.lastPlayed = {artist: a.ArtistName,track: a.SongName,timestamp: b,duration: c,album: a.AlbumName,method: "track.scrobble",
                sk: this.sessionKey,api_key: this.API_KEY};
            if (a.TrackNum)
                this.lastPlayed.trackNumber = String(a.TrackNum);
            if (a && a.context)
                if (a.context.type == GS.player.PLAY_CONTEXT_USER)
                    this.lastPlayed.chosenByUser = 1;
                else if (a.context.type == GS.player.PLAY_CONTEXT_RADIO)
                    this.lastPlayed.chosenByUser = 0;
            this.currentListening.scrobbled = true;
            this.currentListening.timestamp = b;
            this.getJSON(this.URL_AUDIOSCROBBLER, this.lastPlayed, this.callback("onSongPlayingComplete"), this.callback("onNowPlayingFailed"), true)
        }
    },onSongPlayingComplete: function(c) {
        if (!c || 
        !c.scrobbles)
            this.onLastfmError("POPUP_FAIL_SCROBBLE_LASTFM", c);
        GS.getGuts().logEvent("lastfmScrobbleCompleteSuccess", {userID: GS.user.UserID})
    },deleteLastScrobble: function() {
        var c = GS.player.getCurrentSong();
        this.currentListening && this.currentListening.scrobbled && this.getJSON(this.URL_AUDIOSCROBBLER, {artist: c.ArtistName,track: c.SongName,timestamp: this.currentListening.timestamp,method: "library.removeScrobble",sk: this.sessionKey,api_key: this.API_KEY}, this.callback("onUnScrobbleComplete"), null, true)
    },
    onUnScrobbleComplete: function() {
    },getJSON: function(c, a, b, g, h) {
        if (c && a && b)
            if (h)
                GS.service.makeLastfmRequest(a, function(m) {
                    try {
                        m = JSON.parse(m)
                    } catch (k) {
                        m = null
                    }
                    b(m)
                }, g ? g : b);
            else {
                a.format = "json";
                $.ajax({url: c,data: a,success: b,error: g ? g : b,dataType: "jsonp",cache: true})
            }
    }});
GS.Controllers.BaseController.extend("GS.Controllers.FlattrController", {isGSSingleton: true,preSetup: function() {
        var c = GS.Controllers.BaseController.singletonCallback, a = $.subscribe;
        a("gs.auth.update", c("flattr", "update"));
        a("gs.player.nowplaying", c("flattr", "onNowPlaying"));
        a("gs.player.flattr", c("flattr", "onAutoFlattr"))
    }}, {isInit: false,SERVICE_ID: 131072,CLIENT_ID: gsConfig.httpHost == "grooveshark.com" ? "8CcZbdokZ3QPwuXmgZAjRpwxYB89Ba8zCboDeDO4xuJUPx6Wmw54LssAUqAlqyKT" : "yhco3fS9czbOCaKPNJ3X6oordPkF8oWxvYLo3to6TpLlql03VURR969cMjHKxt7T",
    API_SECRET: gsConfig.httpHost == "grooveshark.com" ? "zZnEt1yQl8A1vxNITJDv1VWLbmXrKybaooEHf2or1PimcWVWvoima4YbhLtSauSo" : "iJ7b2m8LBJXSVOMGytoyqnA2w8DUrBDzaBB3OAFg9sYV6AruUGSaTj3ghx0zYuZZ",URL_USER_AUTH: "https://flattr.com/oauth/authorize",URL_REST_API: "https://api.flattr.com/rest/v2/",musicBrainzArtistURL: "http://musicbrainz.org/artist/",accessToken: null,flattrUsername: null,flattrUserAvatar: null,flattrUserLink: null,autoFlattrPerMonthEnabled: false,autoFlattrPerStreamEnabled: false,flags: 0,FLATTR_NO_AUTO_FLAG: 0,
    FLATTR_AUTO_PER_MONTH_FLAG: 1,FLATTR_AUTO_PER_STREAM_FLAG: 2,hasFlattrCollection: {},perMonthFlattrThrottleCollection: {},canFlattrCurrentArtist: false,tmpAutoOff: false,init: function() {
        console.log("Init Flattr");
        if (window.flattrTesting) {
            if (!window.confirmFlattrConnection)
                window.confirmFlattrConnection = this.callback(function(c) {
                    var a = c.token.split("&");
                    c = null;
                    for (var b = 0; b < a.length; b++)
                        if (a[b].indexOf("access_token") >= 0) {
                            a = a[b].split("=");
                            if (a.length > 1)
                                c = {accessToken: a[1]};
                            break
                        }
                    if (this.flattrOpenerWindow) {
                        this.flattrOpenerWindow.close();
                        this.flattrOpenerWindow = null
                    }
                    if (c)
                        GS.airbridge && GS.airbridge.isDesktop ? window.setTimeout(function() {
                            GS.getFlattr().onConnectFlattr(c)
                        }, 300) : this.onConnectFlattr(c);
                    else
                        this.loginFailedCallback()
                });
            this._super()
        }
    },connectFlattr: function(c, a) {
        if (GS.user && GS.user.isLoggedIn) {
            this.loginSuccessCallback = c;
            this.loginFailedCallback = a;
            this.flattrOpenerWindow = window.open(this.URL_USER_AUTH + "?response_type=token&client_id=" + this.CLIENT_ID + "&scope=flattr", "", "width=851,height=600");
            if (GS.airbridge && GS.airbridge.isDesktop)
                this.flattrOpenerWindow.parentSandboxBridge = 
                {confirmFlattrConnection: window.confirmFlattrConnection}
        }
    },onConnectFlattr: function(c) {
        if (c && c.accessToken) {
            this.accessToken = c.accessToken;
            this.getFlattrAuthenticatedUser(this.callback("onGetAuthUserForConnect"))
        }
    },appReady: function() {
        this.subscribe("gs.cowbell.ready", this.callback("commReady"))
    },commReady: function() {
        !window.FlattrLoader && window.flattrTesting && $.ajax({cache: true,dataType: "script",url: "http://api.flattr.com/js/0.6/load.js?mode=auto"});
        this.update()
    },update: function() {
        if (window.flattrTesting)
            GS.user && 
            GS.user.isLoggedIn && GS.user.UserID > 0 && GS.user.Flags & this.SERVICE_ID ? GS.service.getUserFlattrData(this.callback("onGetUserFlattrData"), this.callback("onGetUserFlattrData")) : this.clearInfo()
    },onGetUserFlattrData: function(c) {
        if (c.AccessToken) {
            this.accessToken = c.AccessToken;
            this.flags = 0;
            this.flattrUsername = c.FlattrUsername;
            if (c.Flags) {
                this.flags = c.Flags;
                if (c.Flags & this.FLATTR_AUTO_PER_MONTH_FLAG)
                    this.autoFlattrPerMonthEnabled = true;
                else if (c.Flags & this.FLATTR_AUTO_PER_STREAM_FLAG)
                    this.autoFlattrPerStreamEnabled = 
                    true
            }
            GS.getFlattr().connected = true;
            $.publish("gs.flattr.profile.update");
            if (GS.player && GS.player.currentSong) {
                this.canFlattrCurrentArtist = this.canFlattr(GS.player.currentSong.ArtistID);
                GS.player.player.setFlattr(this.canFlattrCurrentArtist)
            }
            this.isInit = true;
            this.getFlattrAuthenticatedUser(function(a) {
                try {
                    a = JSON.parse(a)
                } catch (b) {
                    console.warn("bad json");
                    return
                }
                if (a) {
                    if (a.avatar && a.avatar.length)
                        GS.getFlattr().flattrUserAvatar = a.avatar;
                    else
                        GS.getFlattr().flattrUserAvatar = gsConfig.assetHost + "webincludes/css/images/services/flattr-small.png";
                    GS.getFlattr().flattrUserLink = a.link
                }
                $.publish("gs.flattr.profile.update")
            })
        }
    },onGetAuthUserForConnect: function(c) {
        try {
            c = JSON.parse(c)
        } catch (a) {
            console.warn("onGetAuthUserForConnect - bad json");
            return
        }
        if (c.username) {
            this.flattrUsername = c.username;
            if (c.avatar && c.avatar.length)
                GS.getFlattr().flattrUserAvatar = c.avatar;
            else
                GS.getFlattr().flattrUserAvatar = gsConfig.assetHost + "webincludes/css/images/services/flattr-small.png";
            this.flattrUserLink = c.link;
            if (!this.flags)
                this.flags = this.FLATTR_NO_AUTO_FLAG;
            this.isInit = true;
            GS.service.saveUserFlattrData(this.accessToken, this.flattrUsername, this.flags, this.callback("onSaveUserFlattrData", this.loginSuccessCallback, this.loginFailedCallback), this.loginFailedCallback)
        }
    },updateFlattrData: function(c, a, b) {
        GS.service.updateUserFlattrData(this.accessToken, this.flattrUsername, c, a, b)
    },onSaveUserFlattrData: function(c, a, b) {
        if (b == 1) {
            GS.user.Flags |= this.SERVICE_ID;
            this.connected = true;
            $.publish("gs.flattr.profile.update")
        } else {
            b != -1 && this.clearInfo();
            this.onFlattrFailed()
        }
    },
    logout: function(c) {
        GS.service.removeUserFlattrData(this.callback("onLogout", c))
    },onLogout: function(c, a) {
        if (a) {
            GS.user.Flags = (GS.user.Flags | this.SERVICE_ID) - this.SERVICE_ID;
            this.clearInfo();
            $.isFunction(c) && c()
        } else
            this.onFlattrFailed()
    },clearInfo: function() {
        this.flattrUserLink = this.flattrUserAvatar = this.flattrUsername = this.accessToken = null;
        this.canFlattrCurrentArtist = this.autoFlattrPerStreamEnabled = this.autoFlattrPerMonthEnabled = false;
        GS.player.player.setFlattr(this.canFlattrCurrentArtist);
        this.tmpAutoOff = 
        false;
        this.flags = 0;
        this.connected = false;
        $.publish("gs.flattr.profile.update")
    },getFlattrAuthenticatedUser: function(c, a) {
        var b = {access_token: this.accessToken};
        $.isFunction(c) || (c = this.callback("onGetFlattrAuthenticatedUserComplete"));
        $.isFunction(a) || (a = this.callback("onFlattrFailed"));
        GS.service.makeFlattrRequest(this.URL_REST_API + "user?compat-errors", b, "GET", c, a)
    },onGetFlattrAuthenticatedUserComplete: function(c) {
        try {
            c = JSON.parse(c)
        } catch (a) {
            console.warn("onGetFlattrAuthenticatedUserComplete - bad json");
            c = null
        }
        if (c && c.error)
            console.warn("response.error", c.error);
        else if (c) {
            if (c.avatar && c.avatar.length)
                GS.getFlattr().flattrUserAvatar = c.avatar;
            else
                GS.getFlattr().flattrUserAvatar = gsConfig.assetHost + "webincludes/css/images/services/flattr-small.png";
            this.flattrUserLink = c.link
        }
    },thingLookup: function(c, a) {
        GS.service.makeFlattrRequest(this.URL_REST_API + "things/lookup?compat-errors", {url: c.url}, "GET", this.callback("onThingLookupComplete", a, c), this.callback("onFlattrFailed"))
    },onThingLookupComplete: function(c, 
    a, b) {
        try {
            b = JSON.parse(b)
        } catch (g) {
            b = null
        }
        if (b)
            if (b.error)
                console.warn("response.error", b.error);
            else if (b.id)
                console.warn("onThingLookupComplete: ", b);
            else if (b.message)
                if (b.message == "not_found") {
                    if (c) {
                        console.warn("not found");
                        this.createThing(a)
                    }
                } else
                    b.message == "flattrable" && console.warn("onThingLookupComplete response", b);
            else {
                console.warn("onThingLookupComplete: unknown error");
                this.onFlattrFailed()
            }
    },onAutoSubmitThingLookupComplete: function(c, a) {
        try {
            a = JSON.parse(a)
        } catch (b) {
            console.warn("onAutoSubmitThingLookupComplete - bad json");
            a = null
        }
        if (a)
            if (!a.error)
                if (a.id) {
                    this.renderEmbedButton(c);
                    this.hasFlattrCollection[c.attr("data-flattr-mbID")] = (new Date).getTime()
                } else
                    a.message && a.message == "flattrable" && this.renderAutoSubmitButton(c)
    },autoSubmitThingLookup: function(c, a) {
        $.isFunction(a) || (a = function(b) {
            try {
                JSON.parse(b)
            } catch (g) {
                console.warn("autoSubmitThingLookup - bad json")
            }
        });
        GS.service.makeFlattrRequest(this.URL_REST_API + "things/lookup/?compat-errors&url=http://flattr.com/submit/auto?url=" + encodeURIComponent(c.url), {}, "GET", 
        a, a)
    },flattrID: function(c) {
        c.id && GS.service.makeFlattrRequest(this.URL_REST_API + "things/" + c.id + "/flattr?compat-errors", {access_token: this.accessToken}, "POST", this.callback("onFlattrIDComplete"), this.callback("onFlattrFailed"))
    },onFlattrIDComplete: function() {
    },onAutoFlattr: function(c) {
        c && c.Data && c.Data.mbID && this.flattrURL(c.Data.mbID, c.ItemID)
    },flattrURL: function(c, a) {
        GS.service.makeFlattrRequest(this.URL_REST_API + "flattr?compat-errors", {access_token: this.accessToken,url: "http://flattr.com/submit/auto?url=" + 
            (this.musicBrainzArtistURL + c)}, "POST", this.callback("onFlattrURLComplete", a), this.callback("onFlattrFailed"))
    },onFlattrURLComplete: function(c, a) {
        try {
            a = JSON.parse(a)
        } catch (b) {
            console.warn("bad json");
            return
        }
        if (a.message && a.message == "ok") {
            console.log("Flattr Response: " + a.message);
            this.setFlattrThrottle(c)
        } else if (a.error)
            switch (a.error) {
                case "flattr_once":
                    console.log("Flattr Response: " + a.error);
                    this.setFlattrThrottle(c);
                    break;
                case "flattr_owner":
                    console.log("Flattr Response: " + a.error);
                    this.setFlattrThrottle(c);
                    break;
                case "no_means":
                    console.log("Flattr Response: " + a.error);
                    this.tmpAutoOff = true;
                    break;
                case "not_found":
                case "invalid_request":
                default:
                    console.log("Flattr Error: " + a.error);
                    break
            }
    },onFlattrFailed: function() {
        $.publish("gs.notification", {type: "error",message: "An error occurred while communicating with Flattr."})
    },canFlattr: function(c) {
        if (this.tmpAutoOff)
            return false;
        if (this.perMonthFlattrThrottleCollection[c]) {
            var a = new Date;
            a = a.getDate() + a.getMonth() + a.getYear();
            if (this.perMonthFlattrThrottleCollection[c] >= 
            a)
                return false
        }
        return this.connected && this.autoFlattrPerMonthEnabled
    },setFlattrThrottle: function(c) {
        var a = new Date;
        a = a.getDate() + a.getMonth() + a.getYear();
        this.perMonthFlattrThrottleCollection[c] = a
    },onNowPlaying: function(c) {
        if (window.flattrTesting)
            if (this.isInit && this.connected && this.autoFlattrPerMonthEnabled) {
                this.canFlattrCurrentArtist = this.canFlattr(c.ArtistID);
                console.warn("onNowPlaying", this.canFlattrCurrentArtist);
                GS.player.player.setFlattr(this.canFlattrCurrentArtist)
            }
    },initArtistFlattrButton: function(c, 
    a) {
        c.attr("data-flattr-mbID", a);
        if (c.attr("data-flattr-mbID") && c.attr("data-flattr-mbID").length)
            this.hasFlattrCollection[c.attr("data-flattr-mbID")] ? this.renderEmbedButton(c) : this.autoSubmitThingLookup({url: this.musicBrainzArtistURL + c.attr("data-flattr-mbID")}, this.callback("onAutoSubmitThingLookupComplete", c))
    },parseButtons: function() {
        window.FlattrLoader && $.each($("a.FlattrButton"), function(c, a) {
            window.FlattrLoader.loadButton(a)
        })
    },renderEmbedButton: function(c) {
        var a = $('<a class="FlattrButton" style="display:none;" rev="flattr;button:compact;popout:0;" href="' + 
        this.musicBrainzArtistURL + c.attr("data-flattr-mbID") + '"></a>');
        c.append(a);
        this.parseButtons()
    },renderAutoSubmitButton: function(c) {
        var a = $('<a class="flattrAutoSubmit" href="https://flattr.com/submit/auto?url=' + this.musicBrainzArtistURL + c.attr("data-flattr-mbID") + '" target="_blank"></a>');
        c.append(a)
    }});
(function() {
    var c = 0;
    GS.Controllers.BaseController.extend("GS.Controllers.GoogleController", {isGSSingleton: true}, {SERVICE_ID: 64,GOOGLE_ONLY_SERVICE_ID: 32,REQUIRED: "email,firstname,lastname",EXTENSIONS: {"openid.ns.ax": "http://openid.net/srv/ax/1.0","openid.ax.mode": "fetch_request","openid.ax.type.email": "http://axschema.org/contact/email","openid.ax.type.firstname": "http://axschema.org/namePerson/first","openid.ax.type.lastname": "http://axschema.org/namePerson/last","openid.ax.required": "email,firstname,lastname",
            "openid.ui.icon": "true"},googleOpener: null,googleOpenerWindow: null,googleOpenerInterval: null,connected: false,registeredWithGoogle: false,email: "",firstname: "",lastname: "",googleID: "",lastError: "",onLoginSaveData: null,googlePlusloaded: false,loginSuccessCallback: null,loginFailedCallback: null,init: function() {
            this.subscribe("gs.auth.update", this.callback("update"));
            if (!window.confirmGoogleConnection)
                window.confirmGoogleConnection = this.callback(function(a) {
                    if (this.googleOpenerWindow) {
                        this.googleOpenerWindow.close();
                        this.googleOpenerWindow = null
                    }
                    try {
                        a = JSON.parse(a)
                    } catch (b) {
                        this.lastError = "parseError";
                        this.loginFailedCallback();
                        return
                    }
                    if (a.mode == "cancel" || a.error == "cancel") {
                        this.lastError = "cancel";
                        this.onCancelledLogin()
                    } else
                        GS.airbridge && GS.airbridge.isDesktop ? window.setTimeout(function() {
                            GS.getGoogle().onLogin(a)
                        }, 300) : this.onLogin(a)
                });
            this._super()
        },appReady: function() {
            c = this.subscribe("gs.cowbell.ready", this.callback("commReady"));
            this.googleOpener = googleOpenIDPopup.createPopupOpener({realm: "http://*.grooveshark.com",
                opEndpoint: "https://www.google.com/accounts/o8/ud",returnToUrl: "http://" + window.location.hostname + "/googleCallback.php?window=" + window.name,shouldEncodeUrls: true,extensions: this.EXTENSIONS});
            if (!window.name)
                window.name = gsConfig.windowName
        },commReady: function() {
            if (_.browserDetect().browser != "msie" || _.browserDetect().version > 6) {
                window.goPLoadAttempts = 0;
                window.loadGooglePlus = function() {
                    try {
                        var a = document.getElementById("go-root");
                        if (a && a.getElementsByTagName("script").length) {
                            a.removeChild(a.getElementsByTagName("script")[0]);
                            a.getElementsByTagName("div").length && a.removeChild(a.getElementsByTagName("div")[0]);
                            window.gapi = null;
                            GS.getGoogle().googlePlusloaded = false
                        }
                        var b = document.createElement("script");
                        b.async = true;
                        b.src = document.location.protocol + "//apis.google.com/js/plusone.js";
                        b.text = "{parsetags: 'explicit'}";
                        b.onload = b.onreadystatechange = function() {
                            if ($.browser.msie && this.readyState) {
                                if (this.readyState === "complete" || this.readyState === "loaded") {
                                    this.onload = this.onreadystatechange = null;
                                    setTimeout(function() {
                                        window.gapi && 
                                        GS.getGoogle().initGooglePlus()
                                    }, 10)
                                }
                            } else {
                                this.onload = this.onreadystatechange = null;
                                setTimeout(function() {
                                    window.gapi && GS.getGoogle().initGooglePlus()
                                }, 10)
                            }
                        };
                        document.getElementById("go-root").appendChild(b);
                        window.goPLoadAttempts++;
                        window.googlePlusLoadTimeout = setTimeout(function() {
                            if ((!window.gapi || !GS.getGoogle().googlePlusloaded) && window.goPLoadAttempts < 3)
                                window.loadGooglePlus();
                            else
                                !window.gapi && window.goPLoadAttempts >= 3 || window.gapi && !GS.getGoogle().googlePlusloaded && GS.getGoogle().initGooglePlus()
                        }, 
                        2E4)
                    } catch (g) {
                        console.error("Could not load Google JS. Fatal Error: ", g);
                        GS.getGoogle().lastError = g
                    }
                };
                window.loadGooglePlus()
            }
            this.update();
            c && $.unsubscribe(c)
        },initGooglePlus: function() {
            this.googlePlusloaded = true;
            window.googlePlusLoadTimeout && clearTimeout(window.googlePlusLoadTimeout);
            this.parsePlusWidgets();
            $.subscribe("gs.theme.set", function() {
                window.document.getElementById("theme_home") && GS.getGoogle().parsePlusWidgets(window.document.getElementById("theme_home"))
            })
        },parsePlusWidgets: function(a) {
            if (window.gapi)
                try {
                    window.gapi.plusone.go(a ? 
                    a : document.body)
                } catch (b) {
                }
        },update: function() {
            if (GS.user && GS.user.isLoggedIn && GS.user.UserID > 0 && (GS.user.Flags & this.SERVICE_ID || GS.user.Flags & this.GOOGLE_ONLY_SERVICE_ID)) {
                this.registeredWithGoogle = (GS.user.Flags & this.GOOGLE_ONLY_SERVICE_ID) > 0;
                GS.service.getUserGoogleData(this.callback("onUserGoogleData", null, null))
            } else
                GS.user && GS.user.isLoggedIn && this.onLoginSaveData && this.onLoginSaveData == GS.user.Email ? GS.service.saveUserGoogleData(this.callback("onSaveUserGoogleData", null, null), function() {
                    GS.getGoogle().clearInfo()
                }) : 
                this.clearInfo()
        },showReAuthLightbox: function() {
            GS.getLightbox().open({type: "reAuthGoogle",view: {header: "POPUP_GOOGLE_REAUTH_TITLE",message: "POPUP_GOOGLE_REAUTH_MESSAGE",buttonsRight: [{label: "POPUP_REAUTH_SUBMIT",className: "submit"}],buttonsLeft: GS.getGoogle().registeredWithGoogle ? [] : [{label: "POPUP_GOOGLE_REAUTH_CANCEL",className: "close"}]},callbacks: {".submit": function() {
                        GS.getGoogle().logout(function() {
                            GS.getGoogle().login(function() {
                                GS.getLightbox().close()
                            })
                        })
                    },".close": function() {
                        GS.getGoogle().logout(function() {
                            GS.getLightbox().close()
                        })
                    }}})
        },
        onUserGoogleData: function(a, b, g) {
            try {
                if (g && g.GoogleEmailAddress && g.GoogleID) {
                    this.email = g.GoogleEmailAddress;
                    this.googleID = g.GoogleID;
                    this.connected = true;
                    $.publish("gs.google.profile.update");
                    a && a()
                } else if (g && (!g.GoogleEmailAddress || !g.GoogleID))
                    this.showReAuthLightbox();
                else {
                    GS.user.Flags = (GS.user.Flags | this.SERVICE_ID) - this.SERVICE_ID;
                    if (this.registeredWithGoogle)
                        GS.user.Flags = (GS.user.Flags | this.GOOGLE_ONLY_SERVICE_ID) - this.GOOGLE_ONLY_SERVICE_ID;
                    this.clearInfo();
                    $.isFunction(b) && b({error: "GOOGLE_MISSING_LOGIN_INFO_ERROR_MSG"})
                }
            } catch (h) {
                this.connected = 
                false;
                $.isFunction(b) && b({error: "GOOGLE_MISSING_LOGIN_INFO_ERROR_MSG"})
            }
        },onAuthGoogleUser: function(a, b, g) {
            if (g)
                if (g.userID === 0)
                    this.register(a, b);
                else {
                    a(g);
                    $.publish("gs.google.profile.update");
                    GS.getGuts().logEvent("googleAuthenticated", {authenticated: true})
                }
            else
                b && b(g)
        },onSaveUserGoogleData: function(a, b, g) {
            if (g == 1) {
                this.connected = true;
                $.publish("gs.google.profile.update");
                GS.user.Flags |= this.SERVICE_ID;
                $.isFunction(a) && a()
            } else if (g == -1)
                if (GS.user.Flags & this.SERVICE_ID || GS.user.Flags & this.GOOGLE_ONLY_SERVICE_ID)
                    GS.service.getUserGoogleData(this.callback("onUserGoogleData", 
                    a, function() {
                        b("GOOGLE_PROBLEM_CONNECTING_ERROR_MSG")
                    }), function() {
                        b("GOOGLE_PROBLEM_CONNECTING_ERROR_MSG")
                    });
                else
                    b && b({error: "GOOGLE_DUPLICATE_ACCOUNT_ERROR_MSG",signupError: 4096});
            else if (g == -2)
                b && b({error: "GOOGLE_MISSING_LOGIN_INFO_ERROR_MSG"});
            else
                b && b({error: "POPUP_SIGNUP_LOGIN_FORM_GOOGLE_ERROR"})
        },register: function(a, b) {
            var g = this.email.split("@")[0];
            if (g) {
                g = g.replace(/^[\.\-_]|[^a-zA-Z0-9\.\-_]|[\.\-_]$/g, "");
                g = g.replace(/([\.\-_]){2,}/g, "$1")
            }
            var h = this.firstname + " " + this.lastname, m = Math.floor(Math.random() * 
            997508) + 1005;
            h || g ? GS.service.getUsernameSuggestions(g, h, m, this.callback("usernameSuggestSuccess", a, b), this.callback("usernameSuggestFailed", a, b)) : this.usernameSuggestFailed("")
        },usernameSuggestSuccess: function(a, b, g) {
            b = "";
            if (g && g.length > 0)
                b = g[0];
            this.openRegisterLightbox(a, b)
        },usernameSuggestFailed: function(a, b) {
            a && b ? b({error: "POPUP_SIGNUP_LOGIN_FORM_GOOGLE_ERROR"}) : this.openRegisterLightbox(null, "")
        },openRegisterLightbox: function(a, b) {
            var g = {isGoogle: true,googleData: {email: this.email,googleID: this.googleID},
                username: b,email: this.email,fname: this.firstname + " " + this.lastname,message: $.localize.getString("POPUP_SIGNUP_LOGIN_FORM_GOOGLE_NOT_FOUND")};
            GS.user.defaultFromService = g;
            GS.getLightbox().close();
            GS.page.activePageName == "SignupController" ? GS.page.activePage.update(g) : GS.router.setHash("/signup");
            GS.getGuts().logEvent("googleRegistered", {registered: true})
        },login: function(a, b) {
            this.googleOpenerWindow = this.googleOpener.popup(450, 600);
            this.loginSuccessCallback = a;
            this.loginFailedCallback = b;
            if (GS.airbridge && 
            GS.airbridge.isDesktop)
                this.googleOpenerWindow.parentSandboxBridge = {confirmGoogleConnection: window.confirmGoogleConnection}
        },onLogin: function(a) {
            if (a.error) {
                this.lastError = a.error;
                this.loginFailedCallback()
            } else {
                if (a.firstName)
                    this.firstname = a.firstName;
                if (a.lastName)
                    this.lastname = a.lastName;
                if (a.email)
                    this.email = a.email;
                if (a.googleID)
                    this.googleID = a.googleID;
                if (GS.user.isLoggedIn)
                    GS.user.Flags & this.SERVICE_ID || GS.user.Flags & this.GOOGLE_ONLY_SERVICE_ID ? GS.service.updateUserGoogleData(this.callback("onSaveUserGoogleData", 
                    this.loginSuccessCallback, this.loginFailedCallback), this.loginFailedCallback) : GS.service.saveUserGoogleData(this.callback("onSaveUserGoogleData", this.loginSuccessCallback, this.loginFailedCallback), this.loginFailedCallback);
                else
                    GS.service.authenticateGoogleUser(this.callback("onAuthGoogleUser", this.loginSuccessCallback, this.loginFailedCallback), this.loginFailedCallback)
            }
        },onCancelledLogin: function() {
        },onLogout: function(a) {
            if (!this.registeredWithGoogle)
                GS.user.Flags = (GS.user.Flags | this.SERVICE_ID) - 
                this.SERVICE_ID;
            this.clearInfo();
            $.publish("gs.google.profile.update");
            this.registeredWithGoogle && GS.auth.logout();
            $.isFunction(a) && a()
        },clearInfo: function() {
            this.identity = null;
            this.lastname = this.firstname = this.email = "";
            this.registeredWithGoogle = this.connected = false;
            this.googleID = this.onLoginSaveData = null
        },logout: function(a) {
            this.googleID ? GS.service.removeUserGoogleData(this.googleID, this.callback("onLogout", a)) : GS.service.removeUserGoogleData(false, this.callback("onLogout", a))
        },serviceLogout: function() {
            var a = 
            googleOpenIDPopup.getCenteredCoords(890, 600);
            window.open("https://www.google.com/accounts/Logout", "", "width=890,height=600,status=1,location=1,resizable=yes,left=" + a[0] + ",top=" + a[1])
        }})
})();
(function() {
    var c = 0;
    GS.Controllers.BaseController.extend("GS.Controllers.TwitterController", {isGSSingleton: true,preSetup: function() {
            var a = GS.Controllers.BaseController.singletonCallback, b = $.subscribe;
            b("gs.auth.update", a("twitter", "update"))
        }}, {SERVICE_ID: 4096,TWITTER_ONLY_SERVICE_ID: 8192,twitterOpenerWindow: null,connected: false,registeredWithTwitter: false,profile: {},oauthToken: "",oauthSecret: "",friendIDs: false,friends: {},friendCount: 0,followerIDs: false,followers: {},followerCount: 0,canUpdate: false,
        loginSuccessCallback: null,loginFailedCallback: null,twitterLoaded: false,lastError: null,init: function() {
            if (!window.confirmTwitterConnection)
                window.confirmTwitterConnection = this.callback(function(a) {
                    if (this.twitterOpenerWindow)
                        this.twitterOpenerWindow = null;
                    try {
                        a = JSON.parse(a)
                    } catch (b) {
                        this.lastError = "parseError";
                        this.loginFailedCallback();
                        return
                    }
                    if (a.mode == "cancel" || a.error == "cancel") {
                        this.lastError = "cancel";
                        this.onCancelledLogin()
                    } else
                        GS.airbridge && GS.airbridge.isDesktop ? window.setTimeout(function() {
                            GS.getTwitter().onLogin(a)
                        }, 
                        300) : this.onLogin(a)
                });
            this._super()
        },appReady: function() {
            c = this.subscribe("gs.cowbell.ready", this.callback("commReady"));
            if (!window.name)
                window.name = gsConfig.windowName
        },commReady: function() {
            if (_.browserDetect().browser != "msie" || _.browserDetect().version > 6) {
                window.twLoadAttempts = 0;
                window.loadTwitter = function() {
                    try {
                        if (document.getElementById("tw-root") && document.getElementById("tw-root").getElementsByTagName("script").length) {
                            document.getElementById("tw-root").removeChild(document.getElementById("tw-root").getElementsByTagName("script")[0]);
                            document.getElementById("tw-root") && document.getElementById("tw-root").getElementsByTagName("div").length && document.getElementById("tw-root").removeChild(document.getElementById("tw-root").getElementsByTagName("div")[0]);
                            window.twttr = null;
                            GS.getTwitter().twitterloaded = false
                        }
                        var a = document.createElement("script");
                        a.async = true;
                        a.src = document.location.protocol + "//platform.twitter.com/widgets.js";
                        a.onload = a.onreadystatechange = function() {
                            if ($.browser.msie && this.readyState) {
                                if (this.readyState === "complete" || 
                                this.readyState === "loaded") {
                                    this.onload = this.onreadystatechange = null;
                                    setTimeout(function() {
                                        window.twttr && GS.getTwitter().initTwitter()
                                    }, 10)
                                }
                            } else {
                                this.onload = this.onreadystatechange = null;
                                setTimeout(function() {
                                    window.twttr && GS.getTwitter().initTwitter()
                                }, 10)
                            }
                        };
                        document.getElementById("tw-root").appendChild(a);
                        window.twLoadAttempts++;
                        window.twitterLoadTimeout = setTimeout(function() {
                            if ((!window.twttr || !GS.getTwitter().twitterloaded) && window.twLoadAttempts < 3)
                                window.loadTwitter();
                            else
                                !window.twttr && window.twLoadAttempts >= 
                                3 || window.twttr && !GS.getTwitter().twitterloaded && GS.getTwitter().initTwitter()
                        }, 2E4)
                    } catch (b) {
                        console.error("Could not load Twitter JS. Fatal Error: ", b);
                        GS.getTwitter().lastError = b
                    }
                };
                window.loadTwitter()
            }
            this.canUpdate = true;
            this.update();
            if (c) {
                $.unsubscribe(c);
                c = 0
            }
        },initTwitter: function() {
            this.twitterLoaded = true;
            window.twitterLoadTimeout && clearTimeout(window.twitterLoadTimeout);
            twttr.events.bind("tweet", function(a) {
                if (a) {
                    var b;
                    if (a.target && a.target.nodeName == "IFRAME" && a.target.src) {
                        a = decodeURI(a.target.src).split("&");
                        for (var g = 0, h; h = a[g]; ++g)
                            if (h.indexOf("url=") === 0)
                                b = unescape(h.split("=")[1])
                    }
                    window._gaq && window._gaq.push && window._gaq.push(["_trackSocial", "twitter", "tweet", b])
                }
            });
            $.subscribe("gs.theme.set", this.parseWidgets)
        },parseWidgets: function() {
            window.twttr && window.twttr.widgets.load()
        },getTwitterShareMessage: function(a, b, g, h, m) {
            var k = this.callback(function(n) {
                n = n.tinySongURL;
                var o = new GS.Models.DataString;
                switch (a) {
                    case "song":
                        var q = b.SongName;
                        if (q.length > 40)
                            q = q.substr(0, 40) + "...";
                        o.string = $.localize.getString("SHARE_TWITTER_SONG");
                        o.data = {SongName: q,ArtistName: b.ArtistName};
                        o = o.render();
                        break;
                    case "artist":
                        q = b.ArtistName;
                        if (q.length > 60)
                            q = q.substr(0, 60) + "...";
                        o.string = $.localize.getString("SHARE_TWITTER_ARTIST");
                        o.data = {ArtistName: q};
                        o = o.render();
                        break;
                    case "album":
                        q = b.AlbumName;
                        if (q.length > 40)
                            q = q.substr(0, 40) + "...";
                        o.string = $.localize.getString("SHARE_TWITTER_ALBUM");
                        o.data = {AlbumName: q,ArtistName: b.ArtistName};
                        o = o.render();
                        break;
                    case "playlist":
                        q = b.PlaylistName;
                        if (q.length > 40)
                            q = q.substr(0, 40) + "...";
                        o.string = $.localize.getString("SHARE_TWITTER_PLAYLIST");
                        o.data = {PlaylistName: q,UserName: b.UserName};
                        o = o.render();
                        break;
                    default:
                        o = "";
                        break
                }
                if (o.length < 129 - n.length - 18)
                    o += " #nowplaying";
                if (o.length < 128 - n.length - 18 && (new Date).format("D") === "Mon")
                    o += " #musicmonday";
                if (o.length < 131 - n.length - 18 && (new Date).format("D") === "Tue")
                    o += " #tunesday";
                h(o, n)
            });
            if (a == "playlist") {
                g = "http://tinysong.com/p/" + _.base62Encode(b.PlaylistID + "");
                k({tinySongURL: g})
            } else if (a == "song")
                GS.service.getDetailsForBroadcast(b.SongID, k, this.callback(function() {
                    k({tinySongURL: g})
                }));
            else
                m ? 
                k({tinySongURL: g}) : this.getTinySongURL(g, this.callback(function(n) {
                    k({tinySongURL: n})
                }))
        },getTinySongURL: function(a, b) {
            $.ajax({url: "http://api.bitly.com/v3/shorten?login=grooveshark&apiKey=R_44014f5c4cfe09348eced3baebeadcc3&longUrl=" + a,dataType: "jsonp",success: this.callback(function(g) {
                    g && g.data && g.data.url ? b(g.data.url) : b(a)
                }),error: this.callback(function() {
                    b(a)
                })})
        },update: function() {
            if (this.canUpdate) {
                this.canUpdate = false;
                if (GS.user && GS.user.isLoggedIn && (GS.user.Flags & this.SERVICE_ID || GS.user.Flags & 
                this.TWITTER_ONLY_SERVICE_ID)) {
                    this.registeredWithTwitter = (GS.user.Flags & this.TWITTER_ONLY_SERVICE_ID) > 0;
                    GS.service.getUserTwitterData(this.callback("onUserTwitterData", null, null))
                } else
                    this.clearInfo();
                setTimeout(this.callback(function() {
                    this.canUpdate = true
                }), 0)
            }
        },onUserTwitterData: function(a, b, g) {
            try {
                if (g) {
                    if (g.TwitterUserID && g.OAuthToken && g.OAuthSecret && g.twitterProfileURL) {
                        this.profile = {id_str: g.TwitterUserID};
                        this.oauthToken = g.OAuthToken;
                        this.oauthSecret = g.OAuthSecret;
                        this.getProfile(g.twitterProfileURL, 
                        g.twitterProfileCallback)
                    } else
                        this.showReAuthLightbox();
                    $.isFunction(a) && a(g)
                } else {
                    GS.user.Flags = (GS.user.Flags | this.SERVICE_ID) - this.SERVICE_ID;
                    if (this.registeredWithTwitter)
                        GS.user.Flags = (GS.user.Flags | this.TWITTER_ONLY_SERVICE_ID) - this.TWITTER_ONLY_SERVICE_ID;
                    this.clearInfo();
                    $.isFunction(b) && b({error: "TWITTER_MISSING_LOGIN_INFO_ERROR_MSG"})
                }
            } catch (h) {
                this.connected = false;
                $.isFunction(b) && b({error: "TWITTER_MISSING_LOGIN_INFO_ERROR_MSG"})
            }
        },showReAuthLightbox: function() {
            GS.getLightbox().close();
            GS.getLightbox().open({type: "reAuthTwitter",view: {header: "POPUP_TWITTER_REAUTH_TITLE",message: "POPUP_TWITTER_REAUTH_MESSAGE",buttonsRight: [{label: "POPUP_REAUTH_SUBMIT",className: "submit"}],buttonsLeft: GS.getTwitter().registeredWithTwitter ? [] : [{label: "POPUP_TWITTER_REAUTH_CANCEL",className: "close"}]},callbacks: {".submit": function() {
                        GS.getTwitter().logout(function() {
                            GS.getTwitter().login(function() {
                                GS.getLightbox().close()
                            })
                        })
                    },".close": function() {
                        GS.getTwitter().logout(function() {
                            GS.getLightbox().close()
                        })
                    }}})
        },
        onAuthTwitterUser: function(a, b, g) {
            if (g && g.TwitterProfile && g.TwitterProfile.name) {
                this.profile = g.TwitterProfile;
                if (g.userID == 0)
                    this.register(a, b);
                else {
                    $.isFunction(a) && a(g);
                    GS.getGuts().logEvent("twitterAuthenticated", {authenticated: true})
                }
            } else
                $.isFunction(b) && b({error: "TWITTER_MISSING_LOGIN_INFO_ERROR_MSG"})
        },onSaveUserTwitterData: function(a, b, g) {
            if (g.result == 1) {
                this.getProfile(g.twitterProfileURL, g.twitterProfileCallback);
                $.isFunction(a) && a();
                if (!(GS.user.Flags & this.SERVICE_ID) && !(GS.user.Flags & 
                this.TWITTER_ONLY_SERVICE_ID)) {
                    $.publish("gs.twitter.notification.findFriends");
                    GS.getGuts().logEvent("twitterNewSave", {newSave: true})
                }
            } else if (g.result == -1)
                if (GS.user.Flags & this.SERVICE_ID || GS.user.Flags & this.TWITTER_ONLY_SERVICE_ID)
                    GS.service.getUserTwitterData(this.callback("onUserTwitterData", a, function() {
                        b("TWITTER_PROBLEM_CONNECTING_ERROR_MSG")
                    }));
                else
                    $.isFunction(b) && b({error: "TWITTER_DUPLICATE_ACCOUNT_ERROR_MSG"});
            else if (g.result == -2)
                $.isFunction(b) && b({error: "TWITTER_MISSING_LOGIN_INFO_ERROR_MSG"});
            else
                b && b({error: "POPUP_SIGNUP_LOGIN_FORM_TWITTER_ERROR"})
        },register: function(a, b) {
            var g = this.profile.screen_name, h = this.profile.name || "", m = this.profile.id_str;
            h || g ? GS.service.getUsernameSuggestions(g, h, m, this.callback("usernameSuggestSuccess", a, b), this.callback("usernameSuggestFailed", a, b)) : this.usernameSuggestFailed("")
        },usernameSuggestSuccess: function(a, b, g) {
            b = "";
            if (g && g.length > 0)
                b = g[0];
            this.openRegisterLightbox(a, b)
        },usernameSuggestFailed: function(a, b) {
            a && b ? b({error: "POPUP_SIGNUP_LOGIN_FORM_TWITTER_ERROR"}) : 
            this.openRegisterLightbox(null, "")
        },openRegisterLightbox: function(a, b) {
            var g = {isTwitter: true,username: b,fname: this.profile.name,twitterData: {twitterUserID: this.profile.id_str,oauthToken: this.oauthToken,oauthSecret: this.oauthSecret},message: $.localize.getString("POPUP_SIGNUP_LOGIN_FORM_TWITTER_NOT_FOUND")};
            GS.user.defaultFromService = g;
            GS.getLightbox().close();
            GS.page.activePageName == "SignupController" ? GS.page.activePage.update(g) : GS.router.setHash("/signup");
            GS.getGuts().logEvent("twitterRegistered", 
            {registered: true})
        },login: function(a, b) {
            var g = googleOpenIDPopup.getCenteredCoords(650, 600);
            this.twitterOpenerWindow = window.open("http://" + window.location.host + "/twitterCallback.php?window=" + window.name, "", "width=650,height=600,left=" + g[0] + ",top=" + g[1]);
            this.loginSuccessCallback = a;
            this.loginFailedCallback = b;
            if (GS.airbridge && GS.airbridge.isDesktop)
                this.twitterOpenerWindow.parentSandboxBridge = {confirmTwitterConnection: window.confirmTwitterConnection}
        },onLogin: function(a) {
            if (a.error) {
                this.lastError = a.error;
                this.loginFailedCallback()
            } else {
                if (a.oauth_token && a.oauth_token_secret) {
                    this.profile = a;
                    this.oauthToken = a.oauth_token;
                    this.oauthSecret = a.oauth_token_secret
                }
                if (GS.user.isLoggedIn)
                    GS.user.Flags & this.SERVICE_ID || GS.user.Flags & this.TWITTER_ONLY_SERVICE_ID ? GS.service.updateUserTwitterData(this.profile.id_str, this.oauthToken, this.oauthSecret, this.callback("onSaveUserTwitterData", this.loginSuccessCallback, this.loginFailedCallback), this.loginFailedCallback) : GS.service.saveUserTwitterData(this.profile.id_str, 
                    this.oauthToken, this.oauthSecret, this.callback("onSaveUserTwitterData", this.loginSuccessCallback, this.loginFailedCallback), this.loginFailedCallback);
                else
                    GS.service.authenticateTwitterUser(this.profile.id_str, this.oauthToken, this.oauthSecret, this.callback("onAuthTwitterUser", this.loginSuccessCallback, this.loginFailedCallback), this.loginFailedCallback)
            }
        },getProfile: function(a, b) {
            $.ajax({url: a,success: this.callback("onGetProfile"),error: this.callback(function(g) {
                    this.lastError = g;
                    this.showReAuthLightbox()
                }),
                dataType: "jsonp",jsonp: false,jsonpCallback: b,cache: true})
        },onGetProfile: function(a) {
            if (a.id_str && a.profile_image_url) {
                this.profile = a;
                this.connected = true;
                $.publish("gs.twitter.profile.update")
            } else {
                this.lastError = a;
                this.showReAuthLightbox()
            }
        },onCancelledLogin: function() {
        },onLogout: function(a) {
            this.clearInfo();
            a && a()
        },clearInfo: function() {
            this.connected = false;
            this.oauthSecret = this.oauthToken = null;
            this.profile = {};
            this.friendIDs = this.registeredWithTwitter = false;
            this.friends = {};
            this.friendCount = 0;
            this.followers = 
            {};
            this.followersIDs = false;
            this.followerCount = 0;
            $.publish("gs.twitter.profile.update")
        },logout: function(a) {
            this.profile && this.profile.id_str ? GS.service.removeUserTwitterData(this.profile.id_str, this.callback("onLogout", a)) : GS.service.removeUserTwitterData(null, this.callback("onLogout", a))
        },serviceLogout: function() {
            var a = googleOpenIDPopup.getCenteredCoords(1E3, 580);
            window.open("https://twitter.com/logout", "", "width=1000,height=580,status=1,location=1,resizable=yes,left=" + a[0] + ",top=" + a[1])
        },postTweet: function(a, 
        b, g, h) {
            if (this.oauthToken && this.oauthSecret)
                GS.service.postTwitterStatus(a, this.oauthToken, this.oauthSecret, this.callback("onPostTweet", b, g, h), this.callback("onFailedPostTweet", h));
            else
                $.isFunction(h) && h()
        },onPostTweet: function(a, b, g, h) {
            if (h.success && h.response.id) {
                $.publish("gs.twitter.notification.sent", {type: a});
                $.isFunction(b) && b();
                GS.getGuts().forceLogEvent("twitterShareAPI", {userID: GS.user.UserID,success: 1})
            } else
                this.onFailedPostTweet(g, h)
        },onFailedPostTweet: function(a, b) {
            this.lastError = b;
            var g = {error: "POPUP_SHARE_TWITTER_ERROR"};
            if (b.response && b.response.error && b.response.error == "Status is over 140 characters.")
                g.error = "POPUP_SHARE_TWITTER_TOO_LONG";
            $.isFunction(a) && a(g);
            GS.getGuts().forceLogEvent("twitterShareAPI", {userID: GS.user.UserID,success: 0})
        },getFollowers: function(a, b) {
            this.followerIDs && this.followers && $.isFunction(a) ? a(this.followerIDs, this.followers) : GS.service.getTwitterFollowers(this.profile.id_str, this.oauthToken, this.oauthSecret, this.callback(function(g) {
                this.followers = 
                {};
                this.followerCount = 0;
                if (g.requests.length && g.ids.length)
                    _.forEach(g.requests, this.callback(function(h) {
                        $.ajax({url: h.url,success: this.callback("onGetFollowers", a, g.ids),error: b,dataType: "jsonp",jsonp: false,jsonpCallback: h.callback,cache: true})
                    }));
                else
                    $.isFunction(a) && a(g.ids, this.followers)
            }), this.callback(function(g) {
                this.lastError = g;
                $.publish("gs.notification", {type: "error",message: $.localize.getString("NOTIF_TWITTER_FOLLOWERS_ERROR")});
                $.isFunction(b) && b()
            }))
        },onGetFollowers: function(a, b, g) {
            _.forEach(g, 
            function(h) {
                GS.getTwitter().followers[h.id_str] = h;
                GS.getTwitter().followerCount++
            });
            $.publish("gs.twitter.followers.update");
            if (Math.ceil(b.length / 100) == Math.ceil(GS.getTwitter().followerCount / 100)) {
                GS.getTwitter().followerIDs = b;
                $.isFunction(a) && a(b, GS.getTwitter().followers)
            }
        },getFollowing: function(a, b) {
            this.friendIDs && this.friends && $.isFunction(a) ? a(this.friendIDs, this.friends) : GS.service.getTwitterFriends(this.profile.id_str, this.oauthToken, this.oauthSecret, this.callback(function(g) {
                this.friends = 
                {};
                this.friendCount = 0;
                if (g.requests && g.ids)
                    _.forEach(g.requests, this.callback(function(h) {
                        $.ajax({url: h.url,success: this.callback("onGetFollowing", a, g.ids),error: b,dataType: "jsonp",jsonp: false,jsonpCallback: h.callback,cache: true})
                    }));
                else
                    $.isFunction(a) && a(g.ids, this.friends)
            }), this.callback(function(g) {
                this.lastError = g;
                $.publish("gs.notification", {type: "error",message: $.localize.getString("NOTIF_TWITTER_FINDFRIENDS_ERROR")});
                $.isFunction(b) && b()
            }))
        },onGetFollowing: function(a, b, g) {
            _.forEach(g, function(h) {
                GS.getTwitter().friends[h.id_str] = 
                h;
                GS.getTwitter().friendCount++
            });
            $.publish("gs.twitter.friends.update");
            if (Math.ceil(b.length / 100) == Math.ceil(GS.getTwitter().friendCount / 100)) {
                GS.getTwitter().friendIDs = b;
                $.isFunction(a) && a(b, GS.getTwitter().friends)
            }
        },getGroovesharkUsersFromFollowing: function(a) {
            this.getFollowing(this.callback(function(b) {
                if (b)
                    GS.service.getGroovesharkUsersFromTwitterUserIDs(b, this.callback("onGetGroovesharkUsers", a), function() {
                        $.publish("gs.notification", {type: "error",message: $.localize.getString("NOTIF_TWITTER_FINDFRIENDS_ERROR")});
                        $.isFunction(a) && a()
                    });
                else {
                    $.publish("gs.notification", {type: "error",message: $.localize.getString("NOTIF_TWITTER_FINDFRIENDS_ERROR")});
                    $.isFunction(a) && a()
                }
            }), function() {
                $.publish("gs.notification", {type: "error",message: $.localize.getString("NOTIF_TWITTER_FINDFRIENDS_ERROR")});
                $.isFunction(a) && a()
            })
        },onGetGroovesharkUsers: function(a, b) {
            var g = [], h = false;
            if (b) {
                $.each(b, function(m, k) {
                    if (k && k.UserID && k.TwitterUserID && GS.user.favorites.users && !GS.user.favorites.users[k.UserID]) {
                        k.TwitterProfile = GS.getTwitter().friends[k.TwitterUserID];
                        g.push(k)
                    } else if (GS.user.favorites.users && GS.user.favorites.users[k.UserID])
                        h = true
                });
                if (g && g.length > 0)
                    GS.getLightbox().open("gsUsersFromThirdParty", {users: g,isTwitter: true,isFacebook: false});
                else
                    h ? $.publish("gs.twitter.notification.findFriends", {message: "NOTIF_TWITTER_FINDFRIENDS_ALREADY",inviteFriends: false}) : $.publish("gs.twitter.notification.findFriends", {message: "NOTIF_TWITTER_FINDFRIENDS_NONE",inviteFriends: true})
            } else
                $.publish("gs.notification", {type: "error",message: $.localize.getString("NOTIF_TWITTER_FINDFRIENDS_ERROR")});
            $.isFunction(a) && a()
        }})
})();
GS.Controllers.BaseController.extend("GS.Controllers.ApiController", {onDocument: true}, {_songStatusCallback: "",_statusLookup: {0: "none",1: "loading",2: "loading",3: "playing",4: "paused",5: "buffering",6: "failed",7: "completed"},_protocolActions: ["play", "add", "next"],_lastStatus: null,init: function() {
        this.subscribe("gs.player.playstatus", this.callback(this._doStatusCallback));
        this.subscribe("gs.player.song.change", this.callback(this._onSongChange));
        this._super()
    },getApplicationVersion: function() {
        return gsConfig.revision
    },getAPIVersion: function() {
        return 1.5
    },
    executeProtocol: function(c) {
        var a = c.toLowerCase();
        if (a.indexOf("gs://") != -1) {
            c = c.substring(5);
            a = a.substring(5)
        }
        if (c.charAt(c.length - 1) == "/") {
            c = c.substring(0, c.length - 1);
            a = a.substring(0, a.length - 1)
        }
        a = a.split("/");
        var b = a.pop();
        if (this._protocolActions.indexOf(b) == -1) {
            a.push(b);
            b = ""
        }
        if (a[0] == "themes")
            GS.getLightbox().open("themes");
        else {
            if (b) {
                c = c.substring(0, c.length - b.length - 1);
                var g = GS.player.INDEX_DEFAULT, h = false;
                switch (b) {
                    case "play":
                        h = true;
                        break;
                    case "next":
                        g = GS.player.INDEX_NEXT;
                        break
                }
                if (GS.player)
                    switch (a[0]) {
                        case "s":
                            GS.Models.Song.getSong(a[2], 
                            this.callback(function(m) {
                                GS.player.addSongsToQueueAt(m.SongID, g, h)
                            }), null);
                            break;
                        case "song":
                            GS.Models.Song.getSongFromToken(a[2], this.callback(function(m) {
                                GS.player.addSongsToQueueAt(m.SongID, g, h)
                            }), null);
                            break;
                        case "album":
                            GS.Models.Album.getAlbum(a[2], this.callback(function(m) {
                                m.play(g, h)
                            }), null);
                            break;
                        case "playlist":
                            GS.Models.Playlist.getPlaylist(a[2], this.callback(function(m) {
                                m.play(g, h)
                            }), null);
                            break
                    }
            }
            if (a[0] == "search") {
                a = a[a.length - 1];
                c = c.substring(0, c.length - a.length);
                c += "?q=" + a
            }
            GS.router.setHash("/" + 
            c)
        }
    },getCurrentSongStatus: function() {
        return this._buildCurrentPlayStatus()
    },setSongStatusCallback: function(c) {
        if ($.isFunction(c))
            this._songStatusCallback = c;
        else if (_.isString(c)) {
            c = c.split(".");
            c = this._getObjectChain(window, c);
            if ($.isFunction(c))
                this._songStatusCallback = c
        }
        return this._buildCurrentPlayStatus()
    },_getObjectChain: function(c, a) {
        var b = a.shift();
        return (b = c[b]) ? a.length ? this._getObjectChain(b, a) : b : null
    },_doStatusCallback: function(c) {
        if (c && this._lastStatus)
            if (c.status === this._lastStatus.status)
                if (!c.activeSong && 
                !this._lastStatus.activeSong) {
                    this._lastStatus = c;
                    return
                } else if (c.activeSong && this._lastStatus.activeSong)
                    if (c.activeSong.SongID === this._lastStatus.activeSong.SongID && c.activeSong.autoplayVote === this._lastStatus.activeSong.autoplayVote) {
                        this._lastStatus = c;
                        return
                    }
        this._lastStatus = c;
        $.isFunction(this._songStatusCallback) && this._songStatusCallback(this._buildCurrentPlayStatus())
    },_onSongChange: function(c) {
        if (!this._lastStatus || this._lastStatus.activeSong && this._lastStatus.activeSong.SongID === c.SongID && 
        this._lastStatus.activeSong.autoplayVote !== c.autoplayVote) {
            if (this._lastStatus)
                this._lastStatus.activeSong.autoplayVote = c.autoplayVote;
            $.isFunction(this._songStatusCallback) && this._songStatusCallback(this._buildCurrentPlayStatus())
        }
    },_buildCurrentPlayStatus: function() {
        var c = {song: null,status: "none"};
        if (GS.player) {
            var a = GS.player.getPlaybackStatus();
            if (a)
                if (a.activeSong) {
                    var b = GS.Models.Song.getOneFromCache(a.activeSong.SongID);
                    c.song = {songID: a.activeSong.SongID,songName: a.activeSong.SongName.replace(/&amp\;/g, 
                        "&"),artistID: a.activeSong.ArtistID,artistName: a.activeSong.ArtistName.replace(/&amp\;/g, "&"),albumID: a.activeSong.AlbumID,albumName: a.activeSong.AlbumName.replace(/&amp\;/g, "&"),trackNum: b ? b.TrackNum : 0,estimateDuration: a.activeSong.EstimateDuration,artURL: b ? b.getImageURL() : gsConfig.assetHost + "/webincludes/images/default/album_250.png",calculatedDuration: a.duration,position: a.position,vote: a.activeSong.autoplayVote};
                    c.status = this._statusLookup[a.status]
                }
        }
        return c
    },getPreviousSong: function() {
        var c = 
        null;
        if (GS.player && GS.player.queue && GS.player.queue.previousSong) {
            c = GS.player.queue.previousSong;
            var a = GS.Models.Song.getOneFromCache(c.SongID);
            c = {songID: c.SongID,songName: c.SongName.replace(/&amp\;/g, "&"),artistID: c.ArtistID,artistName: c.ArtistName.replace(/&amp\;/g, "&"),albumID: c.AlbumID,albumName: c.AlbumName.replace(/&amp\;/g, "&"),trackNum: a ? a.TrackNum : 0,estimateDuration: c.EstimateDuration,artURL: a ? a.getImageURL() : gsConfig.assetHost + "/webincludes/images/default/album_250.png",vote: c.autoplayVote}
        }
        return c
    },
    getNextSong: function() {
        var c = null;
        if (GS.player && GS.player.queue && GS.player.queue.nextSong) {
            c = GS.player.queue.nextSong;
            var a = GS.Models.Song.getOneFromCache(c.SongID);
            c = {songID: c.SongID,songName: c.SongName.replace(/&amp\;/g, "&"),artistID: c.ArtistID,artistName: c.ArtistName.replace(/&amp\;/g, "&"),albumID: c.AlbumID,albumName: c.AlbumName.replace(/&amp\;/g, "&"),trackNum: a ? a.TrackNum : 0,estimateDuration: c.EstimateDuration,artURL: a ? a.getImageURL() : gsConfig.assetHost + "/webincludes/images/default/album_250.png",
                vote: c.autoplayVote}
        }
        return c
    },addSongsByID: function(c, a) {
        GS.player && GS.player.addSongsToQueueAt(c, GS.player.INDEX_DEFAULT, a)
    },addSongByToken: function(c, a) {
        GS.player && GS.Models.Song.getSongFromToken(c, this.callback(function(b) {
            GS.player.addSongsToQueueAt([b.SongID], GS.player.INDEX_DEFAULT, a)
        }), null)
    },addAlbumByID: function(c, a) {
        GS.player && GS.Models.Album.getAlbum(c, this.callback(function(b) {
            b.play(GS.player.INDEX_DEFAULT, a)
        }), null, false)
    },addPlaylistByID: function(c, a) {
        GS.player && GS.Models.Playlist.getPlaylist(c, 
        this.callback(function(b) {
            b.play(GS.player.INDEX_DEFAULT, a)
        }), null, false)
    },play: function() {
        if (GS.player && GS.player.queue && GS.player.queue.activeSong)
            GS.player.isPaused ? GS.player.resumeSong() : GS.player.playSong(GS.player.queue.activeSong.queueSongID)
    },pause: function() {
        GS.player && GS.player.pauseSong()
    },seekToPosition: function(c) {
        GS.player && GS.player.seekTo(c)
    },togglePlayPause: function() {
        if (GS.player)
            GS.player.isPaused ? GS.player.resumeSong() : GS.player.pauseSong()
    },previous: function() {
        GS.player && GS.player.previousSong()
    },
    next: function() {
        GS.player && GS.player.nextSong()
    },setVolume: function(c) {
        GS.player && GS.player.setVolume(c)
    },getVolume: function() {
        if (GS.player)
            return GS.player.getVolume();
        return 0
    },setIsMuted: function(c) {
        GS.player && GS.player.setIsMuted(c)
    },getIsMuted: function() {
        if (GS.player)
            return GS.player.getIsMuted();
        return false
    },voteCurrentSong: function(c) {
        GS.player && GS.player.queue && GS.player.queue.activeSong && GS.player.voteSong(GS.player.queue.activeSong.queueSongID, c)
    },getVoteForCurrentSong: function() {
        if (GS.player && 
        GS.player.queue && GS.player.queue.activeSong)
            return GS.player.queue.activeSong.autoplayVote
    },favoriteCurrentSong: function() {
        GS.player && GS.player.queue && GS.player.queue.activeSong && GS.user.addToSongFavorites(GS.player.queue.activeSong.SongID)
    },addCurrentSongToLibrary: function() {
        GS.player && GS.player.queue && GS.player.queue.activeSong && GS.user.addToLibrary([GS.player.queue.activeSong.SongID])
    },removeCurrentSongFromQueue: function() {
        GS.player && GS.player.queue && GS.player.queue.activeSong && GS.player.removeSongs([GS.player.queue.activeSong.queueSongID])
    }});
(function() {
    function c(b) {
        b = b.replace(/\_/g, " ");
        b = _.ucwords(b);
        b = b.replace(/\s/g, "");
        return ["GS.Controllers.Page.", b, "Controller"].join("")
    }
    var a = {home: true,song: true,search: true,now_playing: true,settings: true,album: true,artist: true,music: true,user: true,user_music: true,playlist: true,surveys: true,signup: true,promotion: true,features: true};
    GS.Controllers.BaseController.extend("GS.Controllers.PageController", {activePage: null,activePageName: null,activePageIdentifier: null,activePageParams: null,SMALL_APP_LIMIT: 1200,
        _element: null,getPageClass: function(b) {
            if (a[b])
                return GS.ClassLoader.get(c(b));
            else {
                b = $.Deferred();
                b.resolve(undefined);
                return b.promise()
            }
        },activate: function(b, g) {
            if (!this._element)
                this._element = $("#page");
            $(".slick-reorder-proxy").remove();
            $("#tooltip").stop().remove();
            $application = $("#application");
            if (this.activePageName === b.shortName && this.activePageIdentifier === g.identifier) {
                this.activePageParams = g.params;
                $.publish("gs.page.view", this.activePageName);
                return this.activePage
            }
            this.activePage && this.activePage.destroy();
            this.activePage = new b(this._element);
            this.activePageName = b.shortName;
            this.activePageIdentifier = g.identifier;
            this.activePageParams = g.params;
            switch (b.shortName) {
                case "HomeController":
                case "BoxeeController":
                    if (GS.user.settings.local.persistPinboard)
                        GS.getSidebar().show();
                    else
                        GS.getSidebar.prototype.inst && GS.getSidebar().hide();
                    $("#theme_home *:not(.themehide)").show();
                    GS.theme.themeCenter();
                    break;
                case "SignupController":
                    GS.getSidebar.prototype.inst && GS.getSidebar().hide();
                    $("#theme_home *").hide();
                    break;
                case "UserMusicController":
                    if (g.identifier == GS.user.UserID || GS.user.settings.local.persistPinboard)
                        GS.getSidebar().show();
                    else
                        GS.getSidebar.prototype.inst && GS.getSidebar().hide();
                    break;
                case "PlaylistController":
                    if (GS.user.settings.local.persistPinboard || GS.user.playlists[this.activePageIdentifier] && $("#application").width() > GS.page.SMALL_APP_LIMIT)
                        GS.getSidebar().show();
                    else
                        GS.getSidebar.prototype.inst && GS.getSidebar().hide();
                    $("#theme_home *").hide();
                    $("ul.ui-autocomplete").remove();
                    break;
                case "AlbumController":
                case "MusicController":
                case "ArtistController":
                case "SearchController":
                case "UserController":
                default:
                    if (GS.user.settings.local.persistPinboard)
                        GS.getSidebar().show();
                    else
                        GS.getSidebar.prototype.inst && GS.getSidebar().hide();
                    $("#theme_home *").hide();
                    $("ul.ui-autocomplete").remove();
                    break
            }
            GS.getGuts().currentTest && GS.getGuts().currentTest.name == "persistPinboard" && GS.getSidebar().show();
            if (b.shortName !== "HomeController" && GS.getAd()) {
                $("#sidebarCapital_160").removeClass("capital");
                GS.getAd().hideAdBar()
            }
            GS.getLocale();
            $("#theme_page_header").hide().removeClass("measure");
            $("#theme_page_header_expandable").height(0);
            $.publish("gs.page.view", this.activePageName);
            this.activePage.showPageLoading();
            return this.activePage
        },titlePrepend: "Grooveshark - ",titlePostpend: " - Grooveshark",title: function(b, g) {
            g = typeof g === "undefined" ? true : g;
            document.title = g ? b + this.titlePostpend : this.titlePrepend + b
        },ALLOW_LOAD: true,justDidConfirm: false,lastPage: "",confirmMessage: $.localize.getString("ONCLOSE_PAGE_CHANGES"),
        checkLock: function() {
            if (GS.Controllers.PageController.justDidConfirm || !GS.Controllers.PageController.ALLOW_LOAD && !confirm($.localize.getString("ONCLOSE_SAVE_PLAYLIST"))) {
                GS.Controllers.PageController.justDidConfirm = true;
                location.replace([location.protocol, "//", location.host, location.pathname, GS.Controllers.PageController.lastPage].join(""));
                setTimeout(function() {
                    GS.Controllers.PageController.justDidConfirm = false
                }, 500);
                return false
            } else {
                GS.Controllers.PageController.justDidConfirm = false;
                GS.Controllers.PageController.ALLOW_LOAD = 
                true;
                GS.Controllers.PageController.lastPage = location.hash;
                GS.Controllers.PageController.confirmMessage = $.localize.getString("ONCLOSE_PAGE_CHANGES");
                $.publish("gs.router.before");
                return true
            }
        },getActiveController: function() {
            return this.activePage
        },loadFilterCollapseState: function() {
            this.artistFiltersCollapse = GS.store.get(this.shortName + "_artistFiltersCollapse");
            this.albumFiltersCollapse = GS.store.get(this.shortName + "_albumFiltersCollapse");
            if (!this.artistFiltersCollapse)
                this.artistFiltersCollapse = {collapsed: true,
                    manualCollapse: true,manualOpen: false};
            if (!this.albumFiltersCollapse)
                this.albumFiltersCollapse = {collapsed: true,manualCollapse: true,manualOpen: false};
            this.storeFilterCollapseState()
        },storeFilterCollapseState: function() {
            _.defined(this.artistFiltersCollapse) && GS.store.set(this.shortName + "_artistFiltersCollapse", this.artistFiltersCollapse);
            _.defined(this.albumFiltersCollapse) && GS.store.set(this.shortName + "_albumFiltersCollapse", this.albumFiltersCollapse)
        },refreshTimeout: null,refreshed: null,resetRefreshButton: function() {
            if ($("#page_content_pane .refresh")) {
                $("#page_content_pane .refresh").addClass("disabled");
                GS.page.refreshTimeout && clearTimeout(GS.page.refreshTimeout);
                GS.page.refreshTimeout = setTimeout(function() {
                    GS.page.refreshed = null;
                    GS.page.refreshTimeout = null;
                    $("#page_content_pane .refresh").removeClass("disabled")
                }, 6E4)
            }
        },fromCorrectUrl: false}, {url: false,type: false,id: false,subpage: false,pageSearchHasFocus: false,slickbox: null,feed: null,header: {name: false,breadcrumbs: [],imageUrl: false,subpages: [],options: [],labels: []},list: {doPlayAddSelect: false,doSearchInPage: false,sortOptions: [],gridOptions: {data: [],
                columns: {},options: {}}},cache: {},init: function() {
            this.subscribe("gs.grid.selectedRows", this.callback("changeSelectionCount"));
            this.subscribe("gs.grid.onsort", this.callback("gridOnSort"));
            this._super();
            $(document).keydown(this.callback(function(b) {
                if (!$(b.target).is("input,textarea,select,object")) {
                    var g = _.orEqual(b.keyCode, b.which), h = String.fromCharCode(g).replace(/\s+/g, ""), m = {17: true,91: true,93: true,37: true,38: true,39: true,40: true,16: true}, k = {9: true,19: true,20: true,27: true,33: true,34: true,35: true,
                        36: true,45: true,46: true,112: true,113: true,114: true,115: true,116: true,117: true,118: true,119: true,120: true,121: true,122: true,123: true,145: true};
                    if (!$(b.target).is("input,textarea,select,object"))
                        if (g == 8)
                            history.back();
                        else
                            h.length && h !== "" && !m[g] && !k[g] && !b.metaKey && !b.ctrlKey && !GS.getLightbox().isOpen && $("#header_search input.search").select().focus();
                    if (String.fromCharCode(g) == " " && $(b.target).val().length === 0)
                        return false
                }
            }));
            $("#tooltip.stayOpen").live({mouseenter: this.callback("delayCloseTooltip"),
                mouseleave: this.callback("closeTooltip")})
        },destroy: function() {
            this.searchTimeout && clearTimeout(this.searchTimeout);
            this._super()
        },index: function() {
            this.url = location.hash;
            this.element.html(this.view("index"))
        },notFound: function() {
            GS.Controllers.PageController.activate("home", null).notFound()
        },showPageLoading: function() {
            if (this.element) {
                this.element.html(this.view("/shared/pageLoading"));
                var b = this.element.find(".page_loading");
                b.css("marginLeft", b.width() / 2 * -1 + "px")
            }
        },showGridLoading: function(b) {
            $el = 
            _.orEqual(b, $("#grid"));
            $el.html(this.view("/shared/loadingIndicator"));
            b = this.element.find(".page_loading");
            b.css("marginLeft", b.width() / 2 * -1 + "px")
        },changeSelectionCount: function(b) {
            if (b.type === "album" || b.type === "artist")
                $("input.search", this.element).val("").trigger("keyup");
            if (b.type === "song") {
                var g = _.isNumber(b.len) && b.len > 0 ? b.len : 0, h = $("#page .page_controls");
                if (g) {
                    h.find(".play.count .label").localeDataString("SELECTION_PLAY_COUNT", {count: g});
                    h.find(".addSongs.count .label").localeDataString("SELECTION_ADD_COUNT", 
                    {count: g});
                    h.find(".deleteSongs.count .label").localeDataString("SELECTION_DELETE_COUNT", {count: g})
                } else {
                    h.find(".play.count .label").localeDataString("SELECTION_PLAY_ALL");
                    h.find(".addSongs.count .label").localeDataString("SELECTION_ADD_ALL");
                    h.find(".deleteSongs.count .label").localeDataString("SELECTION_DELETE_ALL")
                }
                h.find(".music_options").toggleClass("hide", g === 0);
                var m = $("#page").attr("class").split("_")[2];
                m = b.len > 0 ? "song" : m;
                var k = h.find("a[name=share]");
                k.parent().hide();
                var n = GS.shareTypes[m];
                if (n) {
                    h.find("button.share").parent().show();
                    $.each(n, function(o, q) {
                        k.filter("[rel=" + q + "]").show().parent().show().removeClass("hide")
                    })
                } else
                    h.find("button.share").parent().hide();
                n = h.find(".share .label");
                if (m === "song")
                    g > 1 ? n.localeDataString("SHARE_SONGS") : n.localeDataString("SHARE_SONG");
                else
                    n.localeDataString("SHARE_" + m.toUpperCase());
                if (b.len != 1)
                    m === "playlist" ? h.find("li.shareOptions").show() : h.find("li.shareOptions .share_single").hide();
                else {
                    h.find("li.shareOptions").show();
                    h.find("li.shareOptions share_single").show()
                }
                h.find("button.deleteSongs").parent().toggle(b.len > 
                0);
                $("#page").hasClass("gs_page_now_playing") && h.find("button.delete").toggle(b.len > 0)
            }
        },correctUrl: function(b, g) {
            function h(m) {
                if ($.isFunction(m.toUrl)) {
                    m = m.toUrl(g);
                    if (window.location.hash !== m) {
                        var k = location.hash.match(/(?:&|\?)fb_comment_id=([a-zA-Z0-9\_\-]+)/);
                        if (k && k[1])
                            m += k[0];
                        if (window.location.hash.replace(/src=\d/, "") !== m.replace(/src=\d/, "")) {
                            GS.page.fromCorrectUrl = true;
                            GS.router.replaceHash(m)
                        }
                    }
                }
            }
            if (b)
                $.isFunction(b.getPathName) ? b.getPathName(h) : h(b);
            else
                console.warn("invalid page.correctUrl obj", 
                b, g)
        },gridOnSort: function(b) {
            b && b.sortStoreKey && GS.store.set(b.sortStoreKey, b)
        },getPlayContext: function() {
            var b;
            switch (this.Class.shortName) {
                case "PlaylistController":
                    if (this.hasOwnProperty("playlist") && this.playlist instanceof GS.Models.Playlist)
                        b = new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_PLAYLIST, this.playlist);
                    break;
                case "ArtistController":
                    if (this.hasOwnProperty("artist") && this.artist instanceof GS.Models.Artist)
                        b = new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_ARTIST, this.artist);
                    break;
                case "AlbumController":
                    if (this.hasOwnProperty("album") && this.album instanceof GS.Models.Album)
                        b = new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_ALBUM, this.album);
                    break;
                case "UserController":
                case "UserMusicController":
                    if (this.hasOwnProperty("user") && (this.user instanceof GS.Models.User || this.user instanceof GS.Models.AuthUser))
                        b = new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_USER, this.user);
                    break;
                case "MusicController":
                    if (this.subpage == "popular")
                        b = new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_POPULAR);
                    break;
                case "SearchController":
                    b = new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_SEARCH, {query: this.query,type: this.type ? this.type : "everything"});
                    break
            }
            return _.orEqual(b, new GS.Models.PlayContext)
        },setSort: function(b, g, h) {
            var m = $("#grid").controller(), k = GS.page.activePage;
            if (m)
                b == "Rank" ? m.dataView.setItems(m.data) : m.grid.onSort(b);
            else if (k.slickbox) {
                m = {};
                switch (k.type) {
                    case "playlist":
                        switch (b) {
                            case "Rank":
                                m = {sortType: "relevance",sortFunction: null};
                                break;
                            case "PlaylistName":
                                m = {sortType: "playlistName",
                                    sortFunction: _.getSort("PlaylistName", true)};
                                break
                        }
                        break;
                    case "artist":
                        switch (b) {
                            case "Rank":
                                m = {sortType: "relevance",sortFunction: null};
                                break;
                            case "ArtistName":
                                m = {sortType: "artistName",sortFunction: _.getSort("ArtistName", true)};
                                break
                        }
                        break;
                    case "album":
                        switch (b) {
                            case "Rank":
                                m = {sortType: "relevance",sortFunction: null};
                                break;
                            case "AlbumName":
                                m = {sortType: "albumName",sortFunction: _.getSort("AlbumName", true)};
                                break;
                            case "ArtistName":
                                m = {sortType: "artistname",sortFunction: _.getSort("ArtistName", true)};
                                break
                        }
                        break;
                    case "user":
                        switch (b) {
                            case "Rank":
                                m = {sortType: "byPicture",sortFunction: k.sortByPicture};
                                break;
                            case "Name":
                                m = {sortType: "username",sortFunction: _.getSort("Username", true)};
                                break
                        }
                }
                if (k.currentSort && m && k.currentSort.sortType == m.sortType || !k.currentSort.sortFunction && !m.sortFunction)
                    return;
                k.slickbox.setSort(m.sortFunction);
                k.currentSort = m
            }
            b = g.find("span.label");
            b.attr("data-translate-text", h);
            b.text($.localize.getString(h))
        },getPlayMenu: function() {
            var b = this.getPlayContext(), g = this.getSongsIDsFromSelectedGridRows(), 
            h = this.element;
            return [{title: $.localize.getString("PLAY_NOW"),action: {type: "fn",callback: function() {
                            g.length && GS.player.addSongsToQueueAt(g, GS.player.INDEX_DEFAULT, true, b)
                        },log: function() {
                            GS.getGuts().objectListPlayAdd(g, h, "play")
                        }},customClass: "jj_menu_item_hasIcon jj_menu_item_play"}, {title: $.localize.getString("PLAY_NEXT"),action: {type: "fn",callback: function() {
                            g.length && GS.player.addSongsToQueueAt(g, GS.player.INDEX_NEXT, false, b)
                        },log: function() {
                            GS.getGuts().objectListPlayAdd(g, h, "play")
                        }},customClass: "jj_menu_item_hasIcon jj_menu_item_play_next"}, 
                {title: $.localize.getString("PLAY_LAST"),action: {type: "fn",callback: function() {
                            g.length && GS.player.addSongsToQueueAt(g, GS.player.INDEX_LAST, false, b)
                        },log: function() {
                            GS.getGuts().objectListPlayAdd(g, h, "play")
                        }},customClass: "jj_menu_item_hasIcon jj_menu_item_play_last"}, {customClass: "separator"}, {title: $.localize.getString("REPLACE_QUEUE"),action: {type: "fn",callback: function() {
                            g.length && GS.player.addSongsToQueueAt(g, GS.player.INDEX_REPLACE, true, b)
                        },log: function() {
                            GS.getGuts().objectListPlayAdd(g, h, 
                            "play")
                        }},customClass: "jj_menu_item_hasIcon jj_menu_item_replace_playlist"}, {title: $.localize.getString("START_RADIO"),action: {type: "fn",callback: function() {
                            if ($("#grid").controller().selectedRowIDs.length)
                                g.length && GS.player.addSongsToQueueAt(g, GS.player.INDEX_REPLACE, true, b, true);
                            else
                                GS.player.addSongsToQueueAt(g[0], GS.player.INDEX_REPLACE, true, b, true)
                        },log: function() {
                            GS.getGuts().objectListPlayAdd(g, h, "play")
                        }},customClass: "jj_menu_item_hasIcon jj_menu_item_new_station"}]
        },getAddMenu: function() {
            var b = 
            this.getPlayContext(), g = this.getSongsIDsFromSelectedGridRows(), h = this.element, m = $("#grid").controller();
            m = m ? m.selectedRowIDs.length : 0;
            var k = [{title: $.localize.getString("CONTEXT_ADD_TO_QUEUE"),action: {type: "fn",callback: function() {
                            g.length && GS.player.addSongsToQueueAt(g, GS.player.INDEX_LAST, false, b)
                        },log: function() {
                            GS.getGuts().objectListPlayAdd(g, h, "add")
                        }},customClass: "jj_menu_item_hasIcon jj_menu_item_now_playing"}];
            if (this.type && g.length && (this.type != "artist" || m !== 0) && !(this.type == "song" && this.song && 
            this.song.fromLibrary) && GS.page.activePageName != "UserMusicController")
                k.push({title: $.localize.getString("CONTEXT_ADD_TO_LIBRARY"),action: {type: "fn",callback: function() {
                            g.length && GS.user.addToLibrary(g)
                        },log: function() {
                            GS.getGuts().objectListPlayAdd(g, h, "add")
                        }},customClass: "jj_menu_item_hasIcon jj_menu_item_music"});
            this.song && this.type == "song" && !this.song.isFavorite && k.push({title: $.localize.getString("CONTEXT_ADD_TO_FAVORITES"),action: {type: "fn",callback: function() {
                        g.length == 1 && GS.user.addToSongFavorites(g[0], 
                        true)
                    },log: function() {
                        GS.getGuts().objectListPlayAdd(g, this.element, "add")
                    }},customClass: "jj_menu_item_hasIcon jj_menu_item_favorites"});
            if (this.type != "artist" || m !== 0)
                k.push({title: $.localize.getString("CONTEXT_ADD_TO_PLAYLIST"),type: "sub",src: GS.Models.Playlist.getPlaylistsMenu(g, function(o) {
                        o.addSongs(g, null, true)
                    }, false, true),customClass: "jj_menu_item_hasIcon jj_menu_item_add_playlist"});
            if (this.song && this.type == "song") {
                var n = this.song.SongID;
                GS.user.getIsShortcut("song", n) ? k.push({title: $.localize.getString("CONTEXT_REMOVE_FROM_PINBOARD"),
                    action: {type: "fn",callback: function() {
                            GS.user.removeFromShortcuts("song", n);
                            $("#page_header a[name=shortcut]").parent().show();
                            $("#page_header a[name=removeshortcut]").parent().hide()
                        }},customClass: "jj_menu_item_hasIcon jj_menu_remove_music"}) : k.push({title: $.localize.getString("CONTEXT_ADD_TO_PINBOARD"),action: {type: "fn",callback: function() {
                            GS.user.addToShortcuts("song", n, songName, true);
                            $("#page_header a[name=shortcut]").parent().hide();
                            $("#page_header a[name=removeshortcut]").parent().show()
                        }},
                    customClass: "jj_menu_item_hasIcon jj_menu_item_pinboard"})
            }
            return k
        },getSortMenu: function() {
            return []
        },getOptionMenu: function() {
            return []
        },"input focus": function(b) {
            $(b).parent().parent().addClass("active")
        },"textarea focus": function(b) {
            $(b).parent().parent().parent().addClass("active")
        },"input blur": function(b) {
            $(b).parent().parent().removeClass("active")
        },"textarea blur": function(b) {
            $(b).parent().parent().parent().removeClass("active")
        },lastClickEvent: null,doubleClickTime: 500,"button click": function(b, 
        g) {
            if (this.lastClickEvent && this.lastClickEvent.target == g.target && g.timeStamp - this.lastClickEvent.timeStamp < this.doubleClickTime) {
                g.stopImmediatePropagation();
                this.lastClickEvent = g;
                return false
            }
            this.lastClickEvent = g
        },"button.radio click": function(b) {
            b = $(b).attr("data-artists").split(",");
            b.length && GS.player.setAutoplay(true, null, {seeds: b,seedArtistWeightRange: [110, 130],secondaryArtistWeightModifier: 0.75})
        },".play.dropdownButton click": function(b, g) {
            b.jjmenu(g, this.getPlayMenu(), null, {xposition: "left",
                yposition: "auto",show: "default",className: "contextmenu",keepState: b,shouldLog: true})
        },".addSongs.dropdownButton click": function(b, g) {
            b.jjmenu(g, this.getAddMenu(), null, {xposition: "left",yposition: "auto",show: "default",className: "contextmenu",keepState: b,shouldLog: true})
        },".dropdownButton.sort click": function(b, g) {
            var h = this.getSortMenu();
            h && h.length ? b.jjmenu(g, h, null, {xposition: "left",yposition: "auto",show: "default",className: "contextmenu",keepState: b}) : console.warn("no menu")
        },".shareOptions .share click": function() {
            var b = 
            this.getSongsIDsFromSelectedGridRows(), g = b > 1 ? "song" : "manySongs", h = $("#grid").controller().grid, m = {};
            if (g == "song") {
                GS.getLightbox().open("share", {type: g,id: b[0]});
                m.ranks = h.getSelectedRows()[0] + 1;
                m.songIDs = this.getSongsIDsFromSelectedGridRows()[0]
            } else {
                GS.getLightbox().open("widget", {type: g,id: b});
                b = h.getSelectedRows();
                _.forEach(b, function(k, n, o) {
                    o[n] = k + 1
                });
                b.sort(_.numSortA);
                m.ranks = b.join();
                m.songIDs = this.getSongsIDsFromSelectedGridRows().join()
            }
            GS.getGuts().logEvent("OLShare", m)
        },".dropdownButton.option click": function(b, 
        g) {
            var h = this.getOptionMenu();
            b.jjmenu(g, h, null, {xposition: "left",yposition: "auto",show: "default",className: "contextmenu",keepState: b})
        },".dropdownButton.shop click": function(b, g) {
            var h = this.getShopMenu();
            b.jjmenu(g, h, null, {xposition: "left",yposition: "auto",show: "default",className: "contextmenu",keepState: b})
        },".play.playTop click": function() {
            var b = this.getSongsIDsFromSelectedGridRows();
            b.length && GS.player.addSongsToQueueAt(b, GS.Controllers.PlayerController.INDEX_DEFAULT, true, this.getPlayContext());
            GS.getGuts().objectListPlayAdd(b, this.element, "play")
        },"#page_header .upload click": function() {
            GS.user.isLoggedIn ? window.open("http://" + location.host + "/upload", "_blank") : GS.getLightbox().open("login")
        },"#page .dropdownButton click": function() {
            function b(h) {
                if (h.target !== g.target) {
                    h.data.$groups.removeClass("active");
                    $(this).unbind("click", b)
                }
            }
            var g;
            return function(h, m) {
                g = m;
                var k = $("#page .btn_group"), n = $(h).closest(".btn_group");
                if (n.hasClass("active"))
                    k.removeClass("active");
                else {
                    k.removeClass("active");
                    n.addClass("active");
                    $(document).unbind("click contextmenu", b).bind("click contextmenu", {$groups: k}, b)
                }
            }
        }(),".display_toggles .slickbox click": function(b) {
            if (this.displayMethod != "slickbox") {
                this.displayResults("slickbox");
                GS.store.set("searchDisplay", "slickbox");
                $("#page_header .display_toggles button").removeClass("active");
                b.addClass("active")
            }
        },".display_toggles .grid click": function(b) {
            if (this.displayMethod != "grid") {
                this.displayResults("grid");
                GS.store.set("searchDisplay", "grid");
                $("#page_header .display_toggles button").removeClass("active");
                b.addClass("active")
            }
        },getSongsIDsFromSelectedGridRows: function() {
            var b = $("#grid").controller(), g = [];
            if (b && b.selectedRowIDs.length > 0)
                g = b.selectedRowIDs;
            else if (b)
                for (var h = 0; h < b.dataView.rows.length; h++) {
                    if (g.length >= 1E3)
                        break;
                    g.push(b.dataView.rows[h].SongID)
                }
            else
                this.type === "song" && this.song && g.push(this.song.SongID);
            return g
        },".inPageFilter input keydown": function(b, g) {
            if (g.which == _.keys.ENTER && !b.parents("form").hasClass("inPageSearch")) {
                g.preventDefault();
                g.stopPropagation()
            } else if (g.which == 
            _.keys.ESC && !b.parents("form").hasClass("inPageSearch")) {
                var h = $("#page_search_results");
                if (h.is(":visible")) {
                    h.hide();
                    $.publish("gs.menu.hide")
                } else {
                    b.siblings("a.remove").addClass("hide");
                    b.val("")
                }
            }
            b.siblings("a.remove").toggleClass("hide", !b.val().length);
            this.inpageFilter(b)
        },".inPageSearch input keydown": function(b, g) {
            var h = $("#page_search_results li.selected");
            switch (g.which) {
                case _.keys.ENTER:
                    b.parents("form").submit();
                    return;
                case _.keys.ESC:
                    h = $("#page_search_results");
                    if (h.is(":visible")) {
                        h.hide();
                        $.publish("gs.menu.hide")
                    } else {
                        b.siblings("a.remove").addClass("hide");
                        b.val("");
                        this.inpageSearch(b)
                    }
                    return;
                case _.keys.UP:
                    h.is(":first-child") ? $("#page_search_results li:last").addClass("selected") : h.prev().addClass("selected");
                    h.removeClass("selected");
                    return;
                case _.keys.DOWN:
                    h.is(":last-child") ? $("#page_search_results li:first").addClass("selected") : h.next().addClass("selected");
                    h.removeClass("selected");
                    return
            }
            b.siblings("a.remove").toggleClass("hide", !b.val().length);
            this.inpageSearch(b)
        },filterTimeout: false,
        searchTimeout: false,searchTimeoutWait: 100,inpageSearch: function(b) {
            clearTimeout(this.searchTimeout);
            this.searchTimeout = setTimeout(this.callback(function() {
                if (this.element) {
                    this.element.find(".gs_grid:last").controller();
                    var g = $.trim(b.val().toLowerCase());
                    if (g.length > 0)
                        GS.service.getAutocomplete(g, "artist", this.callback("autocompleteSuccess"), this.callback("autocompleteFail"));
                    else {
                        $("#page_search_results").hide();
                        $.publish("gs.menu.hide")
                    }
                }
            }), this.searchTimeoutWait)
        },inpageFilter: function(b) {
            clearTimeout(this.filterTimeout);
            this.filterTimeout = setTimeout(this.callback(function() {
                if (this.element) {
                    var g = this.element.find(".gs_grid:last").controller(), h = $.trim($(b).val().toLowerCase());
                    if (g) {
                        var m = h;
                        if ($("#page").is(".gs_page_search") && _.isString(this.query))
                            if (h.indexOf(this.query.toLowerCase()) === 0)
                                m = h.substring(this.query.length);
                        g.searchString = $.trim(m);
                        g.dataView.refresh()
                    } else if ($("#feed.events").length)
                        if (h === "")
                            $("#feed.events .event").show();
                        else {
                            (new Date).getTime();
                            $("#feed.events .event").each(function() {
                                var k = 
                                $(this);
                                k.text().toLowerCase().indexOf(h) !== -1 ? k.show() : k.hide()
                            });
                            (new Date).getTime()
                        }
                    else
                        this.slickbox && this.filterUsers(h)
                }
            }), this.searchTimeoutWait)
        },".inPageSearchBar input focus": function(b) {
            b.siblings(".placeholder").hide();
            this.pageSearchHasFocus = true
        },".inPageSearchBar input blur": function(b) {
            if (!b.val()) {
                b.siblings(".placeholder").show();
                b.siblings("a.remove").addClass("hide")
            }
            setTimeout(this.callback(function() {
                if (!this.pageSearchHasFocus) {
                    $("#page_search_results").hide();
                    $.publish("gs.menu.hide")
                }
            }), 
            500);
            this.pageSearchHasFocus = false
        },".inPageSearchBar .search-item a click": function(b) {
            $("#page_search_results li.selected").removeClass("selected");
            $(b).parent().addClass("selected");
            $(b).is(".search-item") && b.closest("input").val($(b).text());
            b.submit()
        },".inPageSearchBar a.icon click": function(b) {
            b.siblings("input").focus().select()
        },".inPageSearchBar a.remove click": function(b) {
            b.addClass("hide");
            var g = b.siblings("input");
            b = b.parents("form");
            g.val("").focus();
            $("#page_search_results").hide();
            $.publish("gs.menu.hide");
            b.hasClass("inPageSearch") && this.inpageSearch(g);
            b.hasClass("inPageFilter") && this.inpageFilter(g)
        },".inPageSearchBar submit": function(b, g) {
            g.preventDefault();
            GS.search = _.orEqual(GS.search, {});
            GS.search.type = $(b).attr("data-search-type") || "";
            var h = $("#page_search_results li.selected");
            GS.search.query = h.is(".search-item-result") ? h.find("a").text() : $("input[name=q]", b).val();
            if (GS.search.query && GS.search.query.length) {
                this.pageSearchHasFocus = false;
                GS.router.performSearch(GS.search.type, 
                GS.search.query)
            }
        },autocompleteSuccess: function(b) {
            this.autocompleteResults = b;
            $("#page_search_results").html(this.view("/shared/pageSearchResults"));
            if (this.pageSearchHasFocus) {
                $("#page_search_results").show();
                $.publish("gs.menu.show")
            }
        },autocompleteFail: function() {
            $("#page_search_results").hide().find(".search-item").remove();
            $.publish("gs.menu.hide")
        },addAutocomplete: function(b) {
            if (!(GS.getGuts().currentTest && GS.getGuts().currentTest.name == "autocomplete")) {
                b = _.orEqual(b, $("#page").attr("class"));
                b.match(".gs_page_") || (b = ".gs_page_" + b);
                $("input.search.autocomplete", this.element).autocomplete({scroll: true,matchSubset: false,selectFirst: false,source: function(g, h) {
                        if (g = $.trim(g.term || g)) {
                            var m = [], k = $("#searchBar_precomplete");
                            k.hide();
                            GS.service.getAutocomplete(g, "artist", function(n) {
                                if ($("#page").is(b)) {
                                    n && n.length && $.each(n, function(q, x) {
                                        x.hasOwnProperty("Name") && x.hasOwnProperty("ArtistID") && m.push({label: x.Name.toString(),value: x.ArtistID})
                                    });
                                    if (b == ".gs_page_home" && m.length) {
                                        n = $("#searchBar_input input").val();
                                        var o = m[0].label;
                                        o = [o.substring(0, n.length), o.substring(n.length)];
                                        n == g && n.toLowerCase() == o[0].toLowerCase() ? k.text(n + o[1]).show() : k.text("").hide()
                                    } else
                                        k.text("").hide();
                                    h(m)
                                }
                            }, function() {
                            })
                        }
                    },select: function(g, h) {
                        g.preventDefault();
                        b == ".gs_page_home" && parseInt(h.item.value, 10) ? GS.router.setHash("/artist/~/" + h.item.value) : $("input.search.autocomplete").val(h.item.label).submit()
                    },focus: function(g, h) {
                        g.preventDefault();
                        $("#searchBar_input input").val(h.item.label);
                        $("#searchBar_precomplete").hide()
                    },
                    close: function() {
                        $("#searchBar_precomplete").show()
                    }})
            }
        },getPlayOptionsMenuForFeeds: function(b) {
            return [{title: $.localize.getString("PLAY_NOW"),action: {type: "fn",callback: function() {
                            b.playSongs(-1, true)
                        }},customClass: "jj_menu_item_hasIcon jj_menu_item_play"}, {title: $.localize.getString("PLAY_NEXT"),action: {type: "fn",callback: function() {
                            b.playSongs(-2, false)
                        }},customClass: "jj_menu_item_hasIcon jj_menu_item_play_next"}, {title: $.localize.getString("PLAY_LAST"),action: {type: "fn",callback: function() {
                            b.playSongs(-3, 
                            false)
                        }},customClass: "jj_menu_item_hasIcon jj_menu_item_play_last"}, {title: $.localize.getString("REPLACE_QUEUE"),action: {type: "fn",callback: function() {
                            b.playSongs(-4, true)
                        }},customClass: "jj_menu_item_hasIcon jj_menu_item_replace_playlist"}]
        },scroll: function(b) {
            $page = $(b);
            $controls = $(".page_controls");
            $sticky = $(".page_controls .sticky");
            $("#tooltip").length && this.closeTooltip();
            if ($sticky.length) {
                $sticky.width($controls.width());
                $sticky.hasClass("fixed") || $controls.height($controls.height());
                if ($controls.offset().top < 
                59)
                    $sticky.addClass("fixed");
                else {
                    $sticky.removeClass("fixed");
                    $controls.height("auto")
                }
            }
        },"#feed.events .play.dropdownButton click": function(b, g) {
            var h = $(b).closest(".event").data("event");
            h ? b.jjmenu(g, this.getPlayOptionsMenuForFeeds(h), null, {xposition: "left",yposition: "auto",show: "default",className: "contextmenu",keepState: b}) : console.warn("feed data not attached")
        },"#feed.events button[name=play] click": function(b) {
            $(b).closest(".event").data("event").playSongs(-1, true)
        },"#feed.events .event .songLink click": function(b, 
        g) {
            g.preventDefault();
            var h = $(b).closest(".event");
            h = $(h).data("event");
            var m;
            h = GS.Models.Song.wrapCollection(h.data.songs);
            if (_.defined($(b).attr("data-songid"))) {
                m = parseInt($(b).attr("data-songid"), 10);
                m = GS.Models.Song.getOneFromCache(m)
            } else {
                var k = _.defined($(b).attr("data-song-index")) ? parseInt($(b).attr("data-song-index"), 10) : 0;
                if (h.length > 0)
                    m = h[k]
            }
            (m = m && $.isFunction(m.toUrl) ? m.toUrl() : false) && GS.router.setHash(m)
        },"#feed.events .event button.subscribe click": function(b) {
            var g = $(b).closest(".event").data("event").data.playlists[0].playlistID;
            GS.Models.Playlist.getPlaylist(g, this.callback("subscribePlaylist", b), this.callback("subscribePlaylistError"), false)
        },subscribePlaylist: function(b, g) {
            if (g.isSubscribed()) {
                GS.user.removeFromPlaylistFavorites(g.PlaylistID);
                b.find("span.label").localeDataString("PLAYLIST_SUBSCRIBE")
            } else {
                GS.user.addToPlaylistFavorites(g.PlaylistID);
                b.find("span.label").localeDataString("PLAYLIST_UNSUBSCRIBE")
            }
        },subscribePlaylistError: function() {
            $.publish("gs.notification", {type: "error",message: $.localize.getString("NOTIF_FAVORITE_ERROR_GENERAL")})
        },
        "#feed.events .event .showSongs click": function(b) {
            b = $(b).closest(".event");
            var g = $(b).data("event"), h = $(b).find(".songWrapper"), m = $(b).find(".songList");
            if (m.children().length)
                h.toggle();
            else {
                var k = GS.Models.Song.wrapCollection(g.data.songs);
                h.css("visibility", "hidden").show();
                oldCols = GS.Controllers.GridController.columns.song.concat();
                g = [oldCols[0], oldCols[1], oldCols[2]];
                m.gs_grid(k, g, {sortCol: "Sort",padding: 0});
                $(window).resize();
                h.css("visibility", "visible")
            }
            h = m.is(":visible") ? $.localize.getString("FEED_HIDE_SONGS") : 
            $.localize.getString("FEED_VIEW_SONGS");
            $(b).find("button.showSongs .label").text(h)
        },"#feed.events .event .remove click": function(b) {
            var g = $(b).closest(".event");
            b = parseInt($(b).attr("rel"), 10);
            b == GS.user.UserID ? $(".warning", g).attr("data-translate-text", "FEED_REMOVE_ACTIVITY_WARNING").attr("rel", b).html($.localize.getString("FEED_REMOVE_ACTIVITY_WARNING")).show() : $(".warning", g).attr("data-translate-text", "FEED_HIDE_USER_WARNING").attr("rel", b).html($.localize.getString("FEED_HIDE_USER_WARNING")).show()
        },
        "#feed.events .event .removeComment click": function(b) {
            var g = $(b).closest(".feedComment");
            b = $(b).attr("rel");
            $(".warning", g).attr("data-translate-text", "FEED_REMOVE_COMMENT_WARNING").attr("rel", b).html($.localize.getString("FEED_REMOVE_COMMENT_WARNING")).show()
        },"#feed.events .event .warning .yesRemove click": function(b) {
            var g = $(b).closest(".event"), h = $(g).data("event");
            b = parseInt($(b).parent().attr("rel"), 10);
            if (b == GS.user.UserID) {
                g.remove();
                h.remove()
            } else {
                this.find("#feed .user_" + b).remove();
                GS.user.changeFollowFlags([{userID: b,
                        flags: 1}])
            }
            $(".warning", g).hide()
        },"#feed.events .event .warning .noRemove click": function(b) {
            b = $(b).closest(".event");
            $(".warning", b).hide()
        },"#feed.events .event .warning .yesRemoveComment click": function(b) {
            var g = $(b).closest(".event"), h = $(b).closest(".feedComment");
            b = $(b).parents(".warning").attr("rel");
            var m = $(g).data("event");
            m.removeComment(b);
            h.remove();
            if (m.comments.length)
                m.comments.length == 1 ? g.find(".showCommentForm .label").html($.localize.getString("FEED_COMMENTS_COUNT_ONE")) : g.find(".showCommentForm .label").html(_.getString("FEED_COMMENTS_COUNT", 
                {count: m.comments.length}));
            else {
                g.find(".commentWrapper").hide();
                g.find(".showCommentForm .label").html($.localize.getString("FEED_COMMENT"))
            }
        },"#feed.events .event .warning .noRemoveComment click": function(b) {
            b = $(b).closest(".feedComment");
            $(".warning", b).hide()
        },"#feed.events .event .showCommentForm click": function(b) {
            b = $(b).closest(".event");
            $(b).data("event");
            var g = $(b).find(".commentFormWrapper");
            $(b).find(".commentFormWrapper").hasClass("hide") || g.html(this.view("community/eventCommentForm"));
            g.find(".message").select()
        },".feedCommentForm .message keydown": function(b, g) {
            if (g.which == _.keys.ENTER)
                return false
        },".feedCommentForm .message keyup": function(b, g) {
            if (g.which == _.keys.ENTER) {
                g.preventDefault();
                g.stopPropagation();
                b.parents(".feedCommentForm").submit();
                return false
            }
        },".feedCommentForm submit": function(b, g) {
            g.preventDefault();
            var h = $(b).closest(".event"), m = $(h).data("event"), k = $("textarea[name=message]", h).val(), n = $(".feedCommentForm .error");
            k = $.trim(k);
            if (k.length) {
                n.hide();
                m.addComment(k, 
                this.callback(this.commentSuccess, h), this.callback(this.commentFailed, h))
            } else
                n.show().find(".message").html($.localize.getString("FEED_COMMENT_ERROR_EMPTY"))
        },commentSuccess: function(b, g) {
            if (g) {
                var h = $(b).data("event");
                $(b).find(".commentFormWrapper").html("");
                $(b).find(".commentWrapper").append(this.view("community/eventComments", {comments: [h.comments[h.comments.length - 1]],event: h})).show();
                h.comments.length == 1 ? b.find(".showCommentForm .label").html($.localize.getString("FEED_COMMENTS_COUNT_ONE")) : 
                b.find(".showCommentForm .label").html(_.getString("FEED_COMMENTS_COUNT", {count: h.comments.length}))
            } else
                this.commentFailed(b, g)
        },commentFailed: function(b, g) {
            $(".feedCommentForm .error").show().find(".message").html($.localize.getString("FEED_COMMENT_ERROR"));
            console.warn("commentFailed", g)
        },"#feed.events .event .showMoreComments click": function(b) {
            var g = $(b).closest(".event"), h = $(g).data("event");
            $(g).find(".commentWrapper").html(this.view("community/eventComments", {comments: h.comments,event: h}));
            $(b).remove()
        },".feeds_loadMore click": function(b) {
            if (this.feed) {
                this.feed.next(this.callback("showNextFeedPage"));
                $(".showMore", b).hide().siblings().show()
            }
        },showNextFeedPage: function(b) {
            if (b && b.length) {
                this.activity = b;
                $("#feed").append(this.view("/user/community/feedEvents"));
                for (var g = 0; g < b.length; g++) {
                    event = b[g];
                    $event = $("#feedEvent_" + event.eventID).data("event", event);
                    event.dataString && event.dataString.hookup($event.find("p.what"))
                }
            }
            $(".feeds_loadMore .loading").hide().siblings().show();
            this.feed.hasMore || 
            $(".feeds_loadMore").hide()
        },".slick-row .song .options .favorite click": function(b) {
            var g = b.attr("rel"), h = parseInt($(b).parents(".slick-row").attr("row"), 10), m = h + 1, k = "";
            if ($("#grid").controller())
                k = $("#grid").controller().data[h].ppVersion;
            h = {songID: g,rank: m};
            if (k)
                h.ppVersion = k;
            if (b.is(".isFavorite")) {
                GS.user.removeFromSongFavorites(g);
                b.removeClass("isFavorite")
            } else {
                GS.user.addToSongFavorites(g);
                b.addClass("isFavorite");
                GS.getGuts().songItemFavoriteClick(h)
            }
        },".slick-row .song .options .library click": function(b) {
            var g = 
            b.attr("rel"), h = parseInt($(b).parents(".slick-row").attr("row"), 10), m = h + 1, k = $("#grid"), n = "";
            if (k.controller()) {
                k = k.controller().data;
                if (k[h] && k[h].ppVersion)
                    n = k[h].ppVersion
            }
            h = {songID: g,rank: m};
            if (n)
                h.ppVersion = n;
            if (b.parent().is(".inLibrary")) {
                GS.user.removeFromLibrary(g);
                b.parent().removeClass("inLibrary")
            } else {
                GS.user.addToLibrary([g]);
                b.parent().addClass("inLibrary");
                GS.getGuts().songItemLibraryClick(h)
            }
        },".slick-row .playlist .subscribe click": function(b) {
            var g = b.attr("rel"), h = GS.Models.Playlist.getOneFromCache(g);
            if (!h && GS.user.PageNameData.CollabPlaylists)
                h = GS.Models.Playlist.wrap(GS.user.PageNameData.CollabPlaylists[g], false);
            if (h.isSubscribed()) {
                GS.user.removeFromPlaylistFavorites(g);
                b.removeClass("subscribed").find("span.label").text($.localize.getString("PLAYLIST_SUBSCRIBE"))
            } else {
                GS.user.addToPlaylistFavorites(g);
                b.addClass("subscribed").find("span.label").text($.localize.getString("PLAYLIST_UNSUBSCRIBE"))
            }
        },".slick-row .playlist .removePlaylist click": function(b) {
            b = b.attr("rel");
            var g = GS.Models.Playlist.getOneFromCache(b);
            if (!g && GS.user.PageNameData.CollabPlaylists)
                g = GS.Models.Playlist.wrap(GS.user.PageNameData.CollabPlaylists[b], false);
            g.setCollaborativePermissions(GS.user.UserID, -1)
        },".slick-cell.song a.more click": function(b, g) {
            var h = $(b).attr("rel"), m = GS.Models.Song.getOneFromCache(h);
            h = $(b).parents(".slick-row").attr("row");
            var k = $(b).parents(".gs_grid").controller(), n = {}, o;
            if ($("#page").is(".gs_page_now_playing")) {
                o = m.queueSongID;
                n = {isQueue: true,flagSongCallback: function(x) {
                        GS.player.flagSong(o, x)
                    }}
            }
            if ($("div.gridrow" + 
            h).is(":visible")) {
                $("div.gridrow" + h).hide();
                b.removeClass("active-context")
            } else {
                n = {menuType: "songOptionMenu",multiClick: false,gridController: k};
                n = m.getContextMenu(n);
                var q = GS.getGuts();
                q.currentTest && q.currentTest.name == "gridRowPlayV2" && q.currentGroup > 1 && n.push({customClass: "separator"}, {title: "Song Page",action: {type: "fn",callback: function() {
                            GS.router.setHash(m.toUrl())
                        },log: this.callback(function() {
                            GS.getGuts().onContextMenuClick("contextNavigateSongPage", menuType, false, songItemInfo)
                        })},customClass: "last jj_menu_item_hasIcon jj_menu_item_song_page"});
                b.addClass("active-context").jjmenu(g, n, null, {xposition: "left",yposition: "auto",show: "show",className: "rowmenu gridrow" + h,keepState: b,shouldLog: true})
            }
            k.currentRow = h;
            k.grid.setSelectedRows([h]);
            k.grid.onSelectedRowsChanged()
        },playClickSongID: false,".slick-cell.song a.play, .slick-cell.song a.addToQueue click": function(b, g) {
            var h = parseInt(b.attr("rel"), 10), m = GS.player.getCurrentQueue(), k = GS.player.isPlaying;
            isPaused = GS.player.isPaused;
            if (this.playClickSongID != h) {
                this.playClickSongID = h;
                var n = $(b).parents(".slick-row").attr("row");
                n = parseInt(n, 10) + 1;
                this.playClickSongID = h;
                n = parseInt($(b).parents(".slick-row").attr("row"), 10);
                n = n + 1;
                var o = "";
                if ($("#grid").controller()) {
                    var q = $("#grid").controller().data;
                    if (q[n - 1])
                        o = q[n - 1].ppVersion
                }
                gutsInfo = o ? {songID: h,rank: n,ppVersion: o} : {songID: h,rank: n};
                n = $(b).parents(".slick-row").attr("row");
                n = parseInt(n, 10) + 1;
                if (b.parents(".slick-row.active").length && m.activeSong.SongID == h)
                    if (!k && !isPaused) {
                        $(b).removeClass("paused");
                        GS.player.playSong(h)
                    } else if (k) {
                        $(b).addClass("paused");
                        GS.player.pauseSong()
                    } else {
                        $(b).removeClass("paused");
                        GS.player.resumeSong()
                    }
                else if ($(b).hasClass("addToQueue")) {
                    GS.player.addSongsToQueueAt([h], GS.player.INDEX_DEFAULT, false, this.getPlayContext());
                    GS.getGuts().logEvent("songItemAddToQueueButtonButton", gutsInfo)
                } else if (!$("#page").is(".gs_page_now_playing") && GS.getGuts().currentTest && GS.getGuts().currentTest.name == "gridRowPlayV2" && GS.getGuts().currentGroup == 5) {
                    GS.player.addSongAndPlay(h, this.getPlayContext());
                    GS.getGuts().logEvent("songItemPlayButton", gutsInfo)
                } else if ($("#page").is(".gs_page_now_playing")) {
                    g.stopImmediatePropagation();
                    GS.player.playSong($(b).parents(".slick-row").attr("rel"))
                } else if ($(b).parents(".gs_grid.hasSongs").length) {
                    GS.player.addSongsToQueueAt([h], GS.player.INDEX_DEFAULT, false, this.getPlayContext());
                    GS.getGuts().logEvent("songItemAddButton", gutsInfo)
                } else {
                    GS.player.addSongAndPlay(h, this.getPlayContext());
                    GS.getGuts().logEvent("songItemPlayButton", gutsInfo)
                }
                setTimeout(this.callback(function() {
                    this.playClickSongID = false
                }), 500);
                return false
            }
        },".slick-row.event .event_tickets click": function(b, g) {
            var h = b.parents(".slick-row").attr("row");
            h = $("#grid").controller().dataView.getItemByIdx(h);
            if (!$(g.target).is("a[href]") && h && h.TicketsURL) {
                window.open(h.TicketsURL, "_blank");
                GS.getGuts().gaTrackEvent("grid", "eventClick", h.TicketsURL);
                return false
            }
        },"#searchForm, #homeSearch submit": function(b, g) {
            g.preventDefault();
            var h = $("input[name=q]", b).val();
            if (h.substring(0, 2).toLowerCase() == "gs")
                switch (h.toLowerCase()) {
                    case "GS.google.lasterror":
                        alert(JSON.stringify(GS.getGoogle().lastError));
                        return false;
                    case "GS.facebook.lasterror":
                        alert(JSON.stringify(GS.getFacebook().lastError));
                        return false;
                    case "GS.lastfm.lasterror":
                        alert(JSON.stringify(GS.getLastfm().lastError));
                        return false
                }
            else if (h.toLowerCase() == "floppy music" || h.toLowerCase() == "floppy drive music")
                GS.getYoutube().loadFloppyMusic();
            else if (h.toLowerCase() == "about:dubstep" || h.toLowerCase() == "how do i dubstep")
                GS.getYoutube().loadDubstep();
            else if (h.toLowerCase() == "about:christmas") {
                GS.Models.Station.makeChristmasHappen();
                return
            }
            GS.search = _.orEqual(GS.search, {});
            GS.search.query = h;
            GS.search.type = $(b).attr("data-search-type") || 
            "";
            GS.search.query && GS.search.query.length && GS.router.performSearch(GS.search.type, GS.search.query);
            return false
        },"a.searchLink click": function(b, g) {
            g.preventDefault();
            var h = b.data("searchtype"), m = b.data("searchquery");
            h = h ? h : "";
            m = m ? m : "";
            GS.router.performSearch(h, m)
        },"#feed .what>a click": function(b, g) {
            GS.getGuts().handleFeedEventClick(b, g)
        },"#feed li.option click": function(b, g) {
            GS.getGuts().handleFeedEventClick(b, g)
        },"#feed li.show click": function(b, g) {
            GS.getGuts().handleFeedEventClick(b, g)
        },"#profile_artists a click": function(b, 
        g) {
            GS.getGuts().handleSearchSidebarClick(b, g, "artist")
        },"#profile_albums a click": function(b, g) {
            GS.getGuts().handleSearchSidebarClick(b, g, "album")
        },"#profile_playlists a click": function(b, g) {
            GS.getGuts().handleSearchSidebarClick(b, g, "playlist")
        },"#profile_users a click": function(b, g) {
            GS.getGuts().handleSearchSidebarClick(b, g, "user")
        },"#profile_events a click": function(b, g) {
            GS.getGuts().handleSearchSidebarEventClick(b, g)
        },"a.follow, button.follow click": function(b) {
            var g = parseInt($(b).attr("data-follow-userid"), 
            10), h = _.orEqual($(b).attr("data-cachePrefix"), ""), m = "", k = function() {
                if (b.is(".following")) {
                    GS.user.removeFromUserFavorites(g);
                    b.removeClass("following").addClass("add");
                    m = "FOLLOW"
                } else {
                    GS.user.addToUserFavorites(g);
                    b.addClass("following").removeClass("add");
                    m = "FOLLOWING"
                }
                b.find("span.label").attr("data-translate-text", m).text($.localize.getString(m))
            };
            GS.Models.User.getOneFromCache(g, h) ? k() : GS.Models.User.getUser(g, k, null, false)
        },"a.signup, button.signup click": function() {
            GS.router.setHash("/signup")
        },
        "a.login, button.login click": function() {
            GS.getLightbox().open("login")
        },"a.uploadMusic, button.uploadMusic click": function() {
            GS.user.isLoggedIn ? window.open("http://" + location.host + "/upload", "_blank") : GS.getLightbox().open("login")
        },"a.saveQueue, button.saveQueue click": function() {
            GS.player.saveQueue()
        },"a.newPlaylist, button.newPlaylist click": function() {
            GS.getLightbox().open("newPlaylist")
        },"a.inviteFriends, button.inviteFriends click": function() {
            GS.getLightbox().open("invite")
        },"select.launchStation change": function(b) {
            (b = 
            $(b).val()) && GS.player.setAutoplay(true, b)
        },"select change": function(b) {
            $(b).prev("span").text($(b).find("option:selected").html())
        },"button.playRecent click": function() {
            if (this.feed)
                this.feed.play(GS.player.INDEX_DEFAULT, true);
            else
                this.user && this.user.profileFeed.play(GS.player.INDEX_DEFAULT, true)
        },"button.playDropdownRecent click": function(b, g) {
            var h;
            if (this.feed)
                h = this.feed;
            else if (this.user)
                h = this.user.profileFeed;
            this.user && b.jjmenu(g, this.getFeedPlayRecentDropdown(h), null, {xposition: "left",
                yposition: "auto",show: "default",className: "contextmenu",keepState: b})
        },getFeedPlayRecentDropdown: function(b) {
            return b ? [{title: $.localize.getString("PLAY_NOW"),action: {type: "fn",callback: function() {
                            b.play(GS.player.INDEX_DEFAULT, true)
                        }},customClass: "jj_menu_item_hasIcon jj_menu_item_play"}, {title: $.localize.getString("PLAY_NEXT"),action: {type: "fn",callback: function() {
                            b.play(GS.player.INDEX_NEXT, false)
                        }},customClass: "jj_menu_item_hasIcon jj_menu_item_play_next"}, {title: $.localize.getString("PLAY_LAST"),
                    action: {type: "fn",callback: function() {
                            b.play(GS.player.INDEX_LAST, false)
                        }},customClass: "jj_menu_item_hasIcon jj_menu_item_play_last"}, {customClass: "separator"}, {title: $.localize.getString("REPLACE_QUEUE"),action: {type: "fn",callback: function() {
                            b.play(GS.player.INDEX_REPLACE, true)
                        }},customClass: "jj_menu_item_hasIcon jj_menu_item_replace_playlist"}] : []
        },"button.refresh click": function(b) {
            feedType = $(b).attr("data-feed-type");
            if (!GS.page.refreshed || GS.page.refreshed.type !== this.feed.type || GS.page.refreshed.user !== 
            this.user.UserID) {
                switch (this.feed.type) {
                    case "profile":
                        this.user.UserID == GS.user.UserID ? this.loadMyProfile(GS.user) : this.loadProfile(this.user);
                        break;
                    case "community":
                        this.user.communityFeed.isDirty = true;
                        this.user.UserID == GS.user.UserID || this.UserID == -1 ? this.loadMyCommunity(this.user) : this.loadCommunity(this.user);
                        break
                }
                GS.page.refreshed = {type: this.feed.type,user: this.user.UserID};
                GS.page.resetRefreshButton()
            }
        },"button.followArtist click": function(b) {
            var g = b.attr("data-artistid");
            GS.Models.Artist.getArtist(g, 
            function() {
                if (GS.user.favorites.artists.hasOwnProperty(g)) {
                    GS.user.removeFromArtistFavorites(g, true);
                    b.attr("title", "");
                    $(".artistID" + g).removeClass("following").addClass("plus").find("span.label").attr("data-translate-text", "ARTIST_FOLLOW").text($.localize.getString("ARTIST_FOLLOW"))
                } else {
                    GS.user.addToArtistFavorites(g, true);
                    b.attr("title", $.localize.getString("UNFOLLOW"));
                    $(".artistID" + g).removeClass("plus").addClass("following").find("span.label").attr("data-translate-text", "ARTIST_FOLLOWING").text($.localize.getString("ARTIST_FOLLOWING"))
                }
            }, 
            null, false)
        },"button.subscribePlaylist click": function(b) {
            var g = b.attr("data-playlistid");
            GS.Models.Playlist.getPlaylist(g, function() {
                if (GS.user.favorites.playlists.hasOwnProperty(g)) {
                    GS.user.removeFromPlaylistFavorites(g, false);
                    $(".playlistID" + g).removeClass("subscribed").addClass("plus").find("span.label").attr("data-translate-text", $.localize.getString("PLAYLIST_SUBSCRIBE")).text($.localize.getString("PLAYLIST_SUBSCRIBE"))
                } else {
                    GS.user.addToPlaylistFavorites(g, false);
                    $(".playlistID" + g).removeClass("plus").addClass("subscribed").find("span.label").attr("data-translate-text", 
                    $.localize.getString("PLAYLIST_SUBSCRIBED")).text($.localize.getString("PLAYLIST_SUBSCRIBED"))
                }
            }, null, false)
        },"button.librarySong click": function(b) {
            b = b.attr("data-songid");
            if (GS.user.library.songs.hasOwnProperty(b)) {
                GS.user.removeFromLibrary(b, false);
                $(".songID" + b).removeClass("inLibrary").addClass("plus").find("span.label").attr("data-translate-text", $.localize.getString("SONG_ADD_LIBRARY")).text($.localize.getString("SONG_ADD_LIBRARY"))
            } else {
                GS.user.addToLibrary(b, false);
                $(".songID" + b).removeClass("plus").addClass("inLibrary").find("span.label").attr("data-translate-text", 
                $.localize.getString("SONG_IN_LIBRARY")).text($.localize.getString("SONG_IN_LIBRARY"))
            }
        },whatsNewTooltips: [{ID: 1,title: "TOOLTIP_UK3_UPDATES_TITLE",message: "TOOLTIP_UK3_UPDATES_MESSAGE",buttons: {left: {text: "CLOSE"},right: {text: "NEXT"}}}, {ID: 2,title: "TOOLTIP_UK3_FEATURES_TITLE",message: "TOOLTIP_UK3_FEATURES_MESSAGE",buttons: {left: {text: "CLOSE"},right: {text: _.toArray(GS.user.playlists).length ? "GET_STARTED" : "SHORTCUTS_CREATE_PLAYLIST"}}}],currentTipElement: null,tooltipTimer: null,"#page .tooltip mouseover": function(b) {
            clearTimeout(this.toolTipTimer);
            if (this.currentTipElement != b.get(0)) {
                this.currentTipElement = b.get(0);
                b = $(b);
                var g = b.attr("data-tip-type"), h = null;
                h = null;
                var m = b.offset(), k = m.left + b.width() + 350 > $("body").width() ? "left" : "right", n = {};
                $("#tooltip").stop().remove();
                switch (g) {
                    case "song":
                        h = GS.Models.Song.getOneFromCache(b.attr("data-SongID"), b.attr("data-cachePrefix"));
                        break;
                    case "artist":
                        h = GS.Models.Artist.getOneFromCache(b.attr("data-ArtistID"), b.attr("data-cachePrefix"));
                        break;
                    case "playlist":
                        h = GS.Models.Playlist.getOneFromCache(b.attr("data-PlaylistID"), 
                        b.attr("data-cachePrefix"));
                        break;
                    case "album":
                        h = GS.Models.Album.getOneFromCache(b.attr("data-AlbumID"), b.attr("data-cachePrefix"));
                        break;
                    case "video":
                        h = GS.Models.Video.getOneFromCache(b.attr("data-VideoID"), b.attr("data-cachePrefix"));
                        break;
                    case "feed":
                        h = GS.Models.FeedEvent.getOneFromCache(b.attr("data-EventID"));
                        k = "top";
                        n.index = b.attr("data-index");
                        break;
                    case "flattr":
                        k = "left";
                        h = {flattrTarget: b.attr("data-tip-target"),flattrContext: "artist"};
                        break
                }
                if (h)
                    if (g == "flattr") {
                        h = $(this.view("/shared/tooltips/" + 
                        g, {data: h,direction: k}));
                        $("body").append(h.css({visibility: "hidden"}));
                        k == "left" ? h.css({top: m.top - 10,left: m.left - parseFloat(b.attr("data-tip-width")) - 10}) : h.css({top: m.top,left: m.left + b.width() + 5});
                        $("body").append(h.hide().css({visibility: "visible"}).delay(250).fadeIn("fast"));
                        h.bind("mouseover", this.callback(function(o) {
                            $(o.currentTarget).attr("data-tooltip-mouseover", true)
                        })).bind("mouseout", this.callback(function(o) {
                            $(o.currentTarget).attr("data-tooltip-mouseover", null);
                            this.toolTipTimer = setTimeout(this.callback("closeTooltip"), 
                            750)
                        }))
                    } else {
                        h = $(this.view("/shared/tooltips/" + g, {data: h,direction: k,info: n}));
                        $("body").append(h.css({visibility: "hidden"}));
                        g = 0;
                        if (k == "left")
                            h.css({top: m.top,right: m.left - 5});
                        else if (k == "right")
                            h.css({top: m.top,left: m.left + b.width() + 5});
                        else {
                            if (k == "top") {
                                g = Math.max(5, m.left + b.width() / 2 - h.width() / 2 - 6);
                                h.css({top: m.top - h.height() - 5,left: g})
                            } else {
                                g = Math.max(5, m.left + b.width() / 2 - h.width() / 2 - 6);
                                h.css({top: m.top + h.height(),left: g})
                            }
                            $("#tooltip_caret", h).css({left: m.left - g + 14})
                        }
                        $("body").append(h.hide().css({visibility: "visible"}).delay(500).fadeIn("fast"))
                    }
            }
        },
        "#page .tooltip mouseout": function() {
            this.toolTipTimer = setTimeout(this.callback("closeTooltip"), 750)
        },delayCloseTooltip: function() {
            clearTimeout(this.toolTipTimer)
        },closeTooltip: function() {
            if (!$("#tooltip.displayOnHover").attr("data-tooltip-mouseover")) {
                clearTimeout(this.tooltipTimer);
                this.tooltipTimer = this.currentTipElement = null;
                $("#tooltip").stop().fadeOut(50, function() {
                    $(this).remove()
                })
            }
        },".playBtn click": function(b, g) {
            g.preventDefault();
            if (b.attr("data-playlistid"))
                GS.Models.Playlist.getPlaylist(b.attr("data-playlistid"), 
                function(m) {
                    m.play(GS.player.INDEX_NEXT, true)
                });
            else if (b.attr("data-songid"))
                if (b.attr("data-eventid") && this.feed && this.feed.cache && this.feed.cache[b.attr("data-eventid")]) {
                    var h = _.orEqual(b.attr("data-index"), 0);
                    (h = GS.Models.Song.wrap(this.feed.cache[b.attr("data-eventid")].data.songs[h])) && GS.player.addSongsToQueueAt([h.SongID], GS.player.INDEX_NEXT, true)
                } else
                    GS.player.addSongsToQueueAt([b.attr("data-songid")], GS.player.INDEX_NEXT, true);
            else
                b.attr("data-albumid") ? GS.Models.Album.getAlbum(b.attr("data-albumid"), 
                function(m) {
                    m.play(GS.player.INDEX_NEXT, true)
                }) : console.warn("Not a valid data attribute")
        },".songLink click": function(b, g) {
            g.preventDefault();
            var h = b.attr("data-songid");
            h && GS.Models.Song.getSong(h, function(m) {
                (m = m && $.isFunction(m.toUrl) ? m.toUrl() : false) && GS.router.setHash(m)
            })
        },sliderOrBoxDragSetup: function(b, g) {
            b.unbind("draginit").unbind("dragstart").unbind("drag").unbind("dragend");
            b.bind("draginit", function(h, m) {
                var k = $(h.target).closest(g);
                if (k.length === 0)
                    return false;
                m.draggedItemID = k.attr("data-dragid");
                m.draggedItemsType = k.attr("data-dragtype");
                if (!m.draggedItemID || !m.draggedItemsType)
                    return false;
                m.proxyOffsetX = h.clientX - k.offset().left;
                m.proxyOffsetY = h.clientY - k.offset().top
            }).bind("dragstart", function(h, m) {
                var k, n;
                k = GS.Controllers.PageController.getActiveController();
                m.draggedItemsContext = k.getPlayContext();
                m.draggedItems = [];
                m.draggedItemsSource = "grid";
                switch (m.draggedItemsType) {
                    case "album":
                        n = GS.Models.Album.getOneFromCache(parseInt(m.draggedItemID, 10));
                        break;
                    case "playlist":
                        n = GS.Models.Playlist.getOneFromCache(parseInt(m.draggedItemID, 
                        10));
                        break;
                    case "artist":
                        n = GS.Models.Artist.getOneFromCache(parseInt(m.draggedItemID, 10));
                        break;
                    case "user":
                        n = GS.Models.User.getOneFromCache(parseInt(m.draggedItemID, 10));
                        break;
                    case "song":
                        n = GS.Models.Song.getOneFromCache(parseInt(m.draggedItemID, 10));
                        break
                }
                if (!n)
                    return false;
                m.draggedItems.push(n);
                k = $('<div class="dragProxy slick-reorder-proxy"><div class="status"></div><span class="info"><span class="text"></span></span></div>').css({position: "absolute",zIndex: "99999","min-height": "50px","padding-right": "50px"}).appendTo("body").mousewheel(_.globalDragProxyMousewheel);
                $.isFunction(n.toProxyLabel) ? k.find(".text").html(n.toProxyLabel()) : k.find(".text").html(n.toString());
                m.proxyOffsetX = Math.floor(k.width() / 2) + 15;
                m.proxyOffsetY = k.height() * 2 - 52;
                $.publish("gs.drag.start", m);
                return k
            }).bind("drag", function(h, m) {
                m.clientX = h.clientX;
                m.clientY = h.clientY;
                $(m.proxy).css("top", h.clientY - m.proxyOffsetY).css("left", h.clientX - m.proxyOffsetX);
                var k = false, n = false;
                _.forEach(m.drop, function(o) {
                    $.isFunction(o.updateDropOnDrag) && o.updateDropOnDrag(h, m);
                    if (!k)
                        if ($(o).within(h.clientX, 
                        h.clientY).length > 0)
                            if ($(o).data("ignoreForOverDrop"))
                                n = true;
                            else {
                                n = false;
                                k = true
                            }
                });
                n || (k ? $(m.proxy).addClass("valid").removeClass("invalid") : $(m.proxy).addClass("invalid").removeClass("valid"))
            }).bind("dragend", function(h, m) {
                $(m.proxy).remove();
                $.publish("gs.drag.end", m)
            })
        },likeWidth: "48px",likeWidthCache: {},loadLikeButtonCount: function(b, g) {
            if (!g && this.likeWidthCache[b]) {
                this.likeWidth = this.likeWidthCache[b];
                $("#page_content_social_buttons .fblike").css("width", this.likeWidth)
            }
            GS.getFacebook().queryFQL('SELECT total_count FROM link_stat WHERE url="' + 
            b + '"', this.callback(function(h) {
                if (h[0].total_count) {
                    this.likeWidth = h[0].total_count > 1E4 ? "80px" : h[0].total_count > 1E3 ? "77px" : h[0].total_count > 100 ? "80px" : h[0].total_count > 10 ? "77px" : h[0].total_count > 0 ? "77px" : "48px";
                    $("#page_content_social_buttons .fblike").css("width", this.likeWidth);
                    this.likeWidthCache[b] = this.likeWidth
                }
            }), this.callback(function() {
                this.likeWidth = "48px";
                $("#page_content_social_buttons .fblike").css("width", this.likeWidth)
            }))
        }})
})();
GS.Controllers.BaseController.extend("GS.Controllers.RapLeafController", {isGSSingleton: true,preSetup: function() {
        $.subscribe("gs.auth.update", GS.Controllers.BaseController.singletonCallback("rapleaf", "update"))
    }}, {personalizeMapTheme: {"4097253982": "10=2","4097253968": "10=2","4097253992": "10=3","4097253999": "10=4","4097254011": "10=5","4097254001": "10=5","4097254007": "10=5","4097253897": "1=0","4097253890": "1=1"},personalizeMapSidebar: {"4097253982": "10=2","4097253968": "10=2","4097253992": "10=3","4097253999": "10=4",
        "4097254011": "10=5","4097254001": "10=5","4097254007": "10=5","4097253897": "1=0","4097253890": "1=1"},init: function() {
        this._super()
    },appReady: function() {
        this.onPersonalize()
    },update: function() {
        this.onPersonalize()
    },onPersonalize: function() {
        if (!GS.user.subscription.isPremium() && !GS.user.isLoggedIn) {
            var c = GS.store.get("webvisit");
            c ? this.updateParams(c) : $.getScript("http://rd.rlcdn.com/rd?type=js&site=108574", this.callback("onPersonalizeCallback"))
        }
    },updateParams: function(c) {
        for (var a = 0; a < c.theme.length; a++) {
            if (c.theme[a].indexOf("0=") == 
            0) {
                c.theme[a] = c.theme[a].replace("0=18-24", "10=2");
                c.theme[a] = c.theme[a].replace("0=25-34", "10=3");
                c.theme[a] = c.theme[a].replace("0=35-44", "10=4");
                c.theme[a] = c.theme[a].replace("0=50-", "10=5")
            }
            if (c.sidebar[a].indexOf("AgeRange=") == 0) {
                c.sidebar[a] = c.sidebar[a].replace("AgeRange=18-24", "10=2");
                c.sidebar[a] = c.sidebar[a].replace("AgeRange=25-34", "10=3");
                c.sidebar[a] = c.sidebar[a].replace("AgeRange=35-44", "10=4");
                c.sidebar[a] = c.sidebar[a].replace("AgeRange=50-", "10=5")
            } else if (c.sidebar[a].indexOf("Gender=M") == 
            0)
                c.sidebar[a] = c.sidebar[a].replace("Gender=M", "1=0");
            else if (c.sidebar[a].indexOf("Gender=F") == 0)
                c.sidebar[a] = c.sidebar[a].replace("Gender=F", "1=1")
        }
        GS.store.set("webvisit", c)
    },onPersonalizeCallback: function() {
        if (_rlcdnsegs && _rlcdnsegs.length) {
            for (var c = {theme: [],sidebar: []}, a = 0; a < _rlcdnsegs.length; a++)
                try {
                    c.theme.push(this.personalizeMapTheme[_rlcdnsegs[a].toString()]);
                    c.sidebar.push(this.personalizeMapSidebar[_rlcdnsegs[a].toString()])
                } catch (b) {
                    console.warn("[ Personalize Out of Bounds ]")
                }
            GS.store.set("webvisit", 
            c);
            a = {};
            a.params = c.sidebar.toString();
            jQuery.isEmptyObject(a) || GS.getGuts().logEvent("rapleafCollectedData", a)
        } else
            GS.store.remove("webvisit")
    }});
GS.Controllers.BaseController.extend("GS.Controllers.KruxController", {isGSSingleton: true,preSetup: function() {
        var c = GS.Controllers.BaseController.singletonCallback;
        $.subscribe("gs.auth.update", c("krux", "update"));
        $.subscribe("gs.app.ready", c("krux", "update"))
    }}, {ksgmnts: null,kuid: null,kruxTimeoutID: null,kruxMap: {lpza0398b: "k=lpza0398b"},init: function() {
        this._super()
    },update: function() {
        this.onPersonalize()
    },onPersonalize: function() {
        if (GS.user.subscription.isPremium())
            clearTimeout(this.kruxTimeoutID);
        else {
            if (GS.user.isLoggedIn) {
                var c = {};
                if (GS.user.Sex)
                    c["1"] = GS.user.Sex.toLowerCase() == "m" ? "0" : "1";
                if (GS.user.TSDOB) {
                    var a = GS.user.TSDOB.split("-");
                    if (a.length == 3) {
                        var b = new Date, g = b.getFullYear() - parseInt(a[0], 10);
                        if (parseInt(a[1], 10) > b.month)
                            g -= 1;
                        else if (parseInt(a[1], 10) == b.month && parseInt(a[2], 10) > b.date)
                            g -= 1;
                        var h;
                        if (g >= 13 && g < 18)
                            h = "1";
                        else if (g >= 18 && g < 25)
                            h = "2";
                        else if (g >= 25 && g < 35)
                            h = "3";
                        else if (g >= 35 && g < 50)
                            h = "4";
                        else if (g >= 50)
                            h = "5"
                    }
                    c["10"] = h;
                    c["14"] = GS.getAd().encodeInteger(g)
                }
                try {
                    c["0"] = GS.getAd().locales[GS.getLocale().locale]
                } catch (m) {
                    c["0"] = 
                    "0=1"
                }
                window.KRUXSetup = {pubid: "b5c2e077-e8aa-4ed6-9bf5-d6e958d0e2ca",site: "Grooveshark.com",section: "Listen",sub_section: "Rock",async: true,userAttributes: c}
            } else
                window.KRUXSetup = {pubid: "b5c2e077-e8aa-4ed6-9bf5-d6e958d0e2ca",site: "Grooveshark.com",async: true,loadSegments: true};
            c = !GS.user.isLoggedIn ? 1E4 : 100;
            this.kruxTimeoutID = setTimeout(this.callback(function() {
                $.ajax({cache: true,dataType: "script",url: "http://cdn.krxd.net/krux.js",success: this.callback("onKruxLoad")})
            }), c)
        }
    },onKruxLoad: function() {
        if (KRUX) {
            var c = 
            KRUX.getSegments();
            if (c && c.length) {
                var a = {params: []};
                this.ksgmnts = c.split(",");
                for (c = 0; c < this.ksgmnts.length; c++)
                    try {
                        this.kruxMap[this.ksgmnts[c].toString()] && a.params.push(this.kruxMap[this.ksgmnts[c].toString()])
                    } catch (b) {
                        console.warn("[ Krux Out of Bounds ]")
                    }
                a.params.length && GS.store.set("krux", a)
            } else
                GS.store.set("krux", null)
        }
    }});
GS.Controllers.BaseController.extend("GS.Controllers.PartyController", {isGSSingleton: true}, {partyPath: "http://" + (gsConfig && gsConfig.httpHost) + "/u/",partyHash: null,shortURL: "",enabled: false,playlist: null,syncPlaylist: false,voteDowns: {},voteDownGotoNext: 6,init: function() {
        this._super()
    },enable: function(c) {
        this.enabled && this.disable();
        this.voteDowns = {};
        this.shortURL = "";
        this.syncPlaylist = false;
        if (GS.user.UserID > 0) {
            if (c && c.UserID == GS.user.UserID) {
                this.playlist = c;
                GS.player.clearQueue();
                this.playlist.play(-1, 
                true, false)
            }
            GS.service.getPartyHash(this.callback("onHashSuccess"), this.callback("onHashFail"))
        }
    },onHashSuccess: function(c) {
        this.partyHash = c;
        this.user = GS.user;
        this.enabled = true;
        $.publish("gs.player.party", c);
        c = "http://api.bitly.com/v3/shorten?login=grooveshark&apiKey=R_44014f5c4cfe09348eced3baebeadcc3&longUrl=" + this.getPartyUrl();
        $.ajax({url: c,dataType: "jsonp",success: this.callback(function(a) {
                this.shortURL = a.data.url;
                $.publish("gs.player.party.update", {playlist: this.playlist})
            })})
    },onHashFail: function() {
        console.warn("failed to get party hash -- not much of a party anymore")
    },
    getPartyUrl: function(c) {
        if (this.enabled && this.partyHash) {
            if (!c && this.shortURL)
                return this.shortURL;
            return this.partyPath + this.partyHash
        }
    },disable: function() {
        this.enabled = false;
        this.playlist = null;
        $.publish("gs.player.party", false)
    },updateQueueFromBroadcast: function(c) {
        var a = [], b = [];
        if (c.data.songs)
            a = GS.Models.Song.wrapCollection(c.data.songs);
        for (var g = 0, h = a.length; g < h; g++)
            b.push(a[g].SongID);
        if (this.enabled)
            switch (c.action) {
                case "append":
                    c = !Boolean(GS.player.getCurrentQueue().activeSong);
                    GS.player.addSongsToQueueAt(b, 
                    -3, c);
                    this.playlist && this.syncPlaylist && this.playlist.addSongs(a, -1, true);
                    break;
                case "voteDown":
                    a = c.data.songID;
                    b = GS.player && GS.player.currentSong;
                    if (this.voteDowns[a])
                        this.voteDowns[a]++;
                    else
                        this.voteDowns[a] = 1;
                    if (this.voteDowns[a] >= this.voteDownGotoNext && b && b.SongID == a) {
                        this.voteDowns[a] = 0;
                        GS.player.nextSong()
                    }
                    break
            }
    }});
(function() {
    var c = {interactionLB: {id: "89099aa1c37d6b1a4607225be0d931ca",maxLength: 120,limit: 1},toolbooth: {id: "0513bbc13de156ddf22f311b174d4da5",maxLength: 150,limit: 1}}, a = [{VideoID: "Z0BXlrQwxYs",width: 560,height: 315}, {VideoID: "5C70IZwHA5g",width: 560,height: 315}, {VideoID: "qtcYIP31QXo",width: 560,height: 315}, {VideoID: "yzN4Q7IIzuQ",width: 560,height: 315}, {VideoID: "eG1ty-M2pwQ",width: 560,height: 315}, {VideoID: "W62H93GQREc",width: 560,height: 315}, {VideoID: "8sWXV8hCvLw",width: 560,height: 315}];
    GS.Controllers.BaseController.extend("GS.Controllers.EngagementsController", 
    {isGSSingleton: true}, {JSON_ENDPOINT: "http://b.v11media.com/json/3.0",cache: {},init: function() {
            this._super()
        },getGender: function() {
            if (GS.user.Sex)
                return GS.user.Sex.toLowerCase();
            var b = GS.store ? GS.store.get("adhelper") : null;
            if (b)
                if (b.hasOwnProperty("gender")) {
                    var g = false;
                    if (b.gender == 1536)
                        g = "m";
                    else if (b.gender == 1537)
                        g = "f";
                    if (g)
                        return g
                }
            if (b = GS.store ? GS.store.get("webvisit") : null)
                if (b.hasOwnProperty("sidebar")) {
                    b = b.sidebar;
                    for (g = 0; g < b.length; g++)
                        if (b[g].substring(0, 2) == "1=")
                            return b[g] == "1=0" ? "m" : 
                            "f"
                }
            return false
        },getDOB: function() {
            if (GS.user.TSDOB)
                return GS.user.TSDOB;
            var b = GS.store ? GS.store.get("adhelper") : null;
            if (b) {
                if (b.hasOwnProperty("ageRange")) {
                    var g = 0;
                    switch (b.ageRange) {
                        case 29516:
                            g = Math.floor(Math.random() * 4 + 13);
                            break;
                        case 29517:
                            g = Math.floor(Math.random() * 6 + 18);
                            break;
                        case 30024:
                            g = Math.floor(Math.random() * 4 + 25);
                            break;
                        case 30025:
                            g = Math.floor(Math.random() * 4 + 30);
                            break;
                        case 29520:
                            g = Math.floor(Math.random() * 9 + 35);
                            break;
                        case 29521:
                            g = Math.floor(Math.random() * 9 + 45);
                            break;
                        case 29522:
                            g = Math.floor(Math.random() * 
                            9 + 64);
                            break;
                        case 29523:
                            g = Math.floor(Math.random() * 15 + 65);
                            break
                    }
                }
                if (g) {
                    g = (new Date).getYear() - g;
                    return g + "-01-01"
                }
            }
            if (b = GS.store ? GS.store.get("webvisit") : null)
                if (b.hasOwnProperty("sidebar")) {
                    b = b.sidebar;
                    for (var h = 0; h < b.length; h++)
                        if (b[h].substring(0, 2) == "10") {
                            switch (b[h]) {
                                case "10=1":
                                    g = Math.floor(Math.random() * 4 + 13);
                                    break;
                                case "10=2":
                                    g = Math.floor(Math.random() * 6 + 18);
                                    break;
                                case "10=3":
                                    g = Math.floor(Math.random() * 9 + 25);
                                    break;
                                case "10=4":
                                    g = Math.floor(Math.random() * 14 + 35);
                                    break;
                                case "10=5":
                                    g = Math.floor(Math.random() * 
                                    30 + 50);
                                    break
                            }
                            if (g) {
                                g = (new Date).getYear() - g;
                                return g + "-01-01"
                            }
                        }
                }
            return false
        },getPlacementVideos: function(b, g, h) {
            if (c[b]) {
                var m = c[b], k = this.JSON_ENDPOINT + "?k=" + m.id;
                k += "&ua=" + encodeURIComponent(navigator.userAgent);
                var n = this.getDOB();
                if (n)
                    k += "&dob=" + n;
                if (n = this.getGender())
                    k += "&gender=" + n;
                k += "&ip=" + gsConfig.remoteAddr;
                k += GS.user.UserID > 0 ? "&uid=" + GS.user.UserID : "&uid=" + GS.service.sessionID;
                var o = this.callback("onVideos", g, m, b), q = function() {
                    $.ajax({url: k,dataType: "jsonp",timeout: 5E3,success: o,error: o})
                };
                h ? this.testForVideoBlocker(this.callback(function(x) {
                    if (x)
                        $.isFunction(g) && g([]);
                    else
                        q()
                })) : q()
            }
        },onVideos: function(b, g, h, m) {
            g = this.filterVideos(m, g);
            $.isFunction(b) && b(g)
        },filterVideos: function(b, g) {
            if (!b || !b.length)
                return [];
            var h = 0;
            if (g.maxLength)
                h = g.maxLength;
            for (var m = [], k = null, n = 0, o = b.length; n < o; n++) {
                if (g.limit && g.limit <= m.length)
                    break;
                if (!(h && b[n].length > h)) {
                    if (b[n].gender) {
                        if (k === null)
                            k = this.getGender();
                        if (b[n].gender.toLowerCase() != k)
                            continue
                    }
                    if (b[n].length)
                        b[n].minsSecs = _.millisToMinutesSeconds(b[n].length * 
                        1E3);
                    m.push(b[n])
                }
            }
            return m
        },videoBlockerDetected: null,testForVideoBlocker: function(b) {
            this.videoBlockerDetected !== null && b(this.videoBlockerDetected);
            $.browser.chrome ? $.ajax({url: "http://ad.doubleclick.net/pfadx/grooveshark.wall/;dcmt=text/json",dataType: "json",timeout: 500,success: this.callback(function() {
                    this.videoBlockerResult(b, false)
                }),error: this.callback(function() {
                    this.videoBlockerResult(b, true)
                })}) : GS.service.suggestFlattr(["http://ad.doubleclick.net/ad/pixel"], 5, true, this.callback("videoBlockerResult", 
            b), this.callback("videoBlockerResult", b))
        },videoBlockerResult: function(b, g) {
            this.videoBlockerDetected = g;
            b(g)
        },loadVideoAdFromDFP: function(b) {
            var g = GS.getAd().buildParams(["dcmt=text/json", "sz=777x777"], ";", ";");
            GS.service.getVideoFromDFP(g, this.callback("onVideoFromDFP", b, false), this.callback("onVideoFromDFPError", b))
        },onVideoFromDFPError: function(b) {
            this.onVideoFromDFP(b, true, null)
        },onVideoFromDFP: function(b, g, h) {
            var m = {};
            if (h) {
                try {
                    m = JSON.parse(h)
                } catch (k) {
                    m = null
                }
                if (!m || !m.VideoID)
                    m = this.getHouseAd()
            } else
                m = 
                this.getHouseAd();
            m || b(null, g, false);
            if (!m.length)
                m.length = 10;
            if (!m.width)
                m.width = 560;
            if (!m.height)
                m.height = 315;
            if (m.autoplay !== false)
                m.autoplay = true;
            if (m.forceServe !== true)
                m.forceServe = false;
            m.load = this.callback(function(n, o, q, x, v) {
                var A = this.callback("loadDFPStateTracking", m, m.tracking, "videowallVideoImpression", function() {
                    GS.store.set("sawHouseVideoAd:" + GS.user.UserID + ":" + m.VideoID, (new Date).getTime());
                    o && o()
                });
                GS.getYoutube().embedYoutubeAd(n, m.VideoID, m.width, m.height, A, m.length, this.callback("loadDFPStateTracking", 
                m, m.on30Tracking, "videowallVideoWatched", x), this.callback("loadDFPStateTracking", m, m.onCompleteTracking, "videowallVideoCompleted", null), q, v, m.autoplay)
            });
            b(m, g, m.forceServe)
        },loadDFPStateTracking: function(b, g, h, m) {
            $.isArray(g) && g.length && GS.theme.loadTracking(g);
            m && m();
            this.logGutsPoint(b, h)
        },logGutsPoint: function(b, g, h) {
            GS.getGuts().forceLogEvent(g, {videoID: b.VideoID,videoLength: b.length});
            h && h()
        },getHouseAd: function() {
            var b = a.slice(0), g, h, m, k = (new Date).getTime();
            do {
                g = Math.floor(Math.random() * b.length);
                h = b[g];
                m = GS.store.get("sawHouseVideoAd:" + GS.user.UserID + ":" + h.VideoID);
                if (k - m > 864E5)
                    return h;
                b.splice(g, 1)
            } while (b.length);
            return a[Math.floor(Math.random() * a.length)]
        }})
})();
GS.Controllers.BaseController.extend("GS.Controllers.InviteInterface", {onDocument: false}, {userInfo: {},googleContacts: null,facebookFriends: [],fbIDs: {},slickbox: false,peopleError: null,people: null,onFollowersSuccess: function(c) {
        var a = [];
        $.each(c, this.callback(function(b, g) {
            a.push([g.Email, g.Name + " " + g.Email, g.Name, g.Name]);
            this.userInfo[g.UserID] = g;
            this.userInfo[g.Email] = g
        }));
        c = new $.TextboxList("#emails", {addOnBlur: true,bitsOptions: {editable: {growing: true,growingOptions: {maxWidth: $("#emails").innerWidth() - 
                        10}}},plugins: {autocomplete: {placeholder: $.localize.getString("SHARE_EMAIL_PLACEHOLDER")}},encode: this.callback(function(b) {
                for (var g = [], h = 0; h < b.length; h++)
                    if (b[h][0])
                        this.userInfo[b[h][0]] ? g.push(this.userInfo[b[h][0]].Email) : g.push(b[h][0]);
                    else if (b[h][1])
                        this.userInfo[b[h][1]] ? g.push(this.userInfo[b[h][1]].Email) : g.push(b[h][1]);
                return g.join(",")
            })});
        c.plugins.autocomplete.setValues(a);
        c.addEvent("bitAdd", this.callback(function(b) {
            b.getValue()[1] === "" && b.hide();
            if (this.userInfo[b.getValue()[1]] && 
            _.notDefined(b.getValue()[0])) {
                var g = this.userInfo[b.getValue()[1]];
                b.setValue([g.Email, g.Name + " " + g.Email, g.Name, g.Name]);
                b.show()
            }
        }));
        $("#services_content input.textboxlist-bit-editable-input").focus()
    },extractInviteEmails: function(c) {
        var a, b = [], g, h = $.trim(c).split(",");
        for (c = 0; c < h.length; c++) {
            g = $.trim(h[c]).split(" ");
            for (a = 0; a < g.length; a++) {
                g[a] = $.trim(g[a]);
                g[a] && b.push(g[a])
            }
        }
        return b
    },onFollowersFailed: function(c) {
        console.warn("failed grabbing contact info for followers", autocompleteTerms, 
        c);
        $.publish("gs.notification", {type: "error",message: $.localize.getString("POPUP_FAIL_FANS_EMAIL_ONLY")})
    },onFacebookFriends: function(c) {
        this.facebookFriends = c || [];
        var a = [];
        $.each(this.facebookFriends, this.callback(function(b, g) {
            a.push([g.id, g.name, g.name])
        }));
        this.facebookLoaded = true;
        if (a.length > 0)
            this.friendsLoaded = true;
        if ($("a.facebook_service", "#invite_options").hasClass("active")) {
            $("#lightbox_pane", this.element).html(this.view("/lightbox/invite/facebook"));
            GS.getLightbox().positionLightbox();
            if (a.length > 0) {
                c = new $.TextboxList("#facebook_invite_list", {addOnBlur: true,bitsOptions: {editable: {growing: true,growingOptions: {maxWidth: $("#facebook_invite_list").innerWidth() - 10}}},plugins: {autocomplete: {placeholder: $.localize.getString("SHARE_FACEBOOK_PLACEHOLDER")}},encode: this.callback(function(b) {
                        var g = [];
                        if (b.length) {
                            for (var h = 0; h < b.length; h++)
                                b[h][0] && g.push(b[h][0]);
                            this.element.find(".submit span").attr("data-translate-text", "SHARE_FACEBOOK_FRIENDS").html($.localize.getString("SHARE_FACEBOOK_FRIENDS"))
                        } else
                            this.element.find(".submit span").attr("data-translate-text", 
                            "SHARE_FACEBOOK_WALL").html($.localize.getString("SHARE_FACEBOOK_WALL"));
                        return g.join(",")
                    })});
                c.plugins.autocomplete.setValues(a);
                c.addEvent("bitAdd", this.callback(function(b) {
                    this.element.find(".error").hide();
                    if (b.getValue()[1] === "")
                        b.hide();
                    else {
                        var g = $("#facebook_invite_list").val().split(",");
                        if (g) {
                            var h = g.indexOf(b.getValue()[0]);
                            b.getValue()[0] && h >= 0 && h != g.length - 1 && b.hide();
                            if (b.getValue()[0])
                                GS.getFacebook().canPostToFriend(b.getValue()[0], this.callback(function(m) {
                                    if (!m) {
                                        m = b.getValue()[1];
                                        var k = $.localize.getString("POPUP_SHARE_ERROR_FACEBOOK_CANTPOST");
                                        k = k.replace("{name}", m);
                                        this.element.find(".error").show().find(".message").html(k);
                                        b.remove();
                                        if (g.length == 1) {
                                            this.submitKey = "SHARE_FACEBOOK_WALL";
                                            this.element.find(".submit span").html($.localize.getString(this.submitKey))
                                        }
                                        GS.getLightbox().positionLightbox()
                                    }
                                }));
                            else {
                                b.remove();
                                if (g.length == 1) {
                                    this.submitKey = "SHARE_FACEBOOK_WALL";
                                    this.element.find(".submit span").html($.localize.getString(this.submitKey))
                                }
                            }
                        }
                    }
                }));
                $("#services_content input.textboxlist-bit-editable-input").focus()
            }
        }
    },
    formSubmit: function() {
        var c = this, a = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i;
        this.peopleError = [];
        this.people = [];
        switch (this.submitType) {
            case "email":
                var b;
                b = $.trim($("textarea[name=emails]", this.element).val());
                var g = $("div.textboxlist", this.element).find(".textboxlist-bit").not(".textboxlist-bit-box-deletable").filter(":last").text();
                if (b !== "") {
                    b = this.extractInviteEmails(b);
                    _.forEach(b, function(k) {
                        k.match(a) ? c.people.push(k) : c.peopleError.push(k)
                    })
                }
                if (g) {
                    g = this.extractInviteEmails(g);
                    for (b = 0; b < 
                    g.length; b++)
                        g[b].match(a) ? this.people.push(g[b]) : this.peopleError.push(g[b])
                }
                if (this.people.length)
                    GS.service.sendInvites(this.people, this.callback("sendInviteSuccess"), this.callback("sendInviteFailed"));
                else
                    this.peopleError.length && this.invalidInviteEmail();
                break;
            case "googleLogin":
                g = $("input[name=google_username]", this.element).val();
                b = $("input[name=google_password]", this.element).val();
                GS.service.getGoogleAuthToken(g, b, this.callback("googAuthSuccess"), this.callback("googAuthFailed"));
                break;
            case "googleContacts":
                var h = 
                [];
                $(".contactsContainer input:checked", this.element).each(function() {
                    h.push(this.value)
                });
                h.length && GS.service.sendInvites(h, this.callback("sendInviteSuccess"), this.callback("sendInviteFailed"));
                break;
            case "facebook":
                g = $("#facebook_invite_list").val() ? $("#facebook_invite_list").val().split(",") : [];
                var m = _.orEqual($("textarea[name=facebookMessage]", this.element).val(), "");
                if (g.length > 0) {
                    GS.getFacebook().lastError = false;
                    _.forEach(g, this.callback(function(k) {
                        GS.getFacebook().lastError || GS.getFacebook().postToFeed(k, 
                        "http://grooveshark.com/", m, "link", "invite", null, this.callback("facebookFailed"))
                    }));
                    if (!GS.getFacebook().lastError) {
                        g.length > 1 ? $.publish("gs.facebook.notification.sent", {params: {type: "invites",hideUndo: true},data: {},notifData: {}}) : $.publish("gs.facebook.notification.sent", {params: {type: "invite",hideUndo: true},data: {},notifData: {}});
                        this.facebookSuccess()
                    }
                } else if (GS.getFacebook().connected && window.FB && FB.getAccessToken())
                    m != "" ? GS.getFacebook().postToFeed("me", "http://grooveshark.com/", m, "link", "invite", 
                    this.callback("facebookSuccess"), this.callback("facebookFailed")) : GS.getFacebook().postLink("me", "http://grooveshark.com/", m, "link", "invite", this.callback("facebookSuccess"), this.callback("facebookFailed"));
                else if (GS.getFacebook().facebookLoaded && GS.getFacebook().connected)
                    this.facebookFailed();
                else {
                    window.open("http://www.facebook.com/sharer.php?u=http://grooveshark.com&t=Grooveshark&ref=invite");
                    this.facebookSuccessCallback()
                }
                break;
            case "twitter":
                g = $("textarea[name=twitterMessage]", this.element).val();
                if (GS.getTwitter().connected)
                    GS.getTwitter().postTweet(g, "invite", this.callback("twitterSuccess"), this.callback("twitterFailed"));
                else {
                    g = g.replace(" " + this.tinysong.tinySongURL, "");
                    window.open("http://twitter.com/share?related=grooveshark&via=grooveshark&url=" + encodeURIComponent(this.tinysong.tinySongURL) + "&text=" + encodeURIComponent(g), "_blank");
                    GS.getLightbox().close()
                }
                break
        }
        return false
    },sendInviteSuccess: function(c) {
        var a = [], b = [], g = [], h = [], m = "";
        if (c)
            for (var k in c)
                switch (c[k].status) {
                    case "error":
                        c[k].errorCode == 
                        -3 ? h.push(k) : a.push(k);
                        break;
                    case "followed":
                        b.push(_.cleanText(c[k].FName));
                        break;
                    case "invited":
                        g.push(k);
                        break
                }
        if (b.length) {
            m = (new GS.Models.DataString($.localize.getString("POPUP_INVITE_FORM_RESPONSE_FOLLOWING"), {list: b.join(", ")})).render();
            $.publish("gs.notification", {type: "info",message: m})
        }
        if (g.length) {
            m = g.length > 5 ? (new GS.Models.DataString($.localize.getString("POPUP_INVITE_FORM_RESPONSE_INVITED_SUM"), {sum: String(g.length)})).render() : (new GS.Models.DataString($.localize.getString("POPUP_INVITE_FORM_RESPONSE_INVITED_LIST"), 
            {list: g.join(", ")})).render();
            $.publish("gs.notification", {type: "info",message: m})
        }
        if (h.length) {
            m = (new GS.Models.DataString($.localize.getString("POPUP_INVITE_FORM_RESPONSE_ALREADY_SENT"), {list: h.join(", ")})).render();
            $.publish("gs.notification", {type: "info",message: m})
        }
        if (a.length) {
            m = (new GS.Models.DataString($.localize.getString("POPUP_INVITE_FORM_RESPONSE_ERROR"), {list: a.join(", ")})).render();
            $.publish("gs.notification", {type: "error",message: m})
        }
        if (this.peopleError.length)
            this.invalidInviteEmail();
        else if (a.length + b.length + g.length + h.length == 0) {
            this.element.find(".message").attr("data-translate-text", "POPUP_INVITE_FORM_RESPONSE_UNKNOWN_ERROR").html($.localize.getString("POPUP_INVITE_FORM_RESPONSE_UNKNOWN_ERROR"));
            this.element.find(".error").show()
        } else
            this.sendInviteSuccessCallback()
    },sendInviteFailed: function(c) {
        console.warn("invite failed", c);
        this.element.find(".message").attr("data-translate-text", "POPUP_INVITE_FORM_RESPONSE_UNKNOWN_ERROR").html($.localize.getString("POPUP_INVITE_FORM_RESPONSE_UNKNOWN_ERROR"));
        this.element.find(".error").show()
    },invalidInviteEmail: function() {
        console.warn("invalid invite email");
        var c = $("div.textboxlist", this.element).find(".textboxlist-bit").not(".textboxlist-bit-box-deletable").filter(":last").text();
        c && this.people.indexOf(c) >= 0 && $("div.textboxlist", this.element).find(".textboxlist-bit").not(".textboxlist-bit-box-deletable").remove();
        _.forEach(this.people, function(a) {
            $("li.textboxlist-bit:contains('" + a + "')").remove()
        });
        this.element.find(".message").attr("data-translate-text", 
        "POPUP_INVITE_FORM_RESPONSE_INVALID_EMAIL_ERROR").html($.localize.getString("POPUP_INVITE_FORM_RESPONSE_INVALID_EMAIL_ERROR"));
        this.element.find(".error").show()
    },googAuthSuccess: function(c) {
        switch (parseInt(c.result.statusCode)) {
            case 1:
                c = String(c.result.rawResponse);
                c = c.substr(c.indexOf("Auth=") + 5);
                GS.service.getGoogleContacts(c, this.callback("googContactsSuccess"), this.callback("googContactsFailed"));
                break;
            case 2:
                this.element.find(".message").attr("data-translate-text", "POPUP_INVITE_GOOGAUTH_RESPONSE_AUTH_ERROR").html($.localize.getString("POPUP_INVITE_GOOGAUTH_RESPONSE_AUTH_ERROR"));
                this.element.find(".error").show();
                break;
            default:
                this.element.find(".message").attr("data-translate-text", "POPUP_INVITE_GOOGAUTH_RESPONSE_UNKNOWN_ERROR").html($.localize.getString("POPUP_INVITE_GOOGAUTH_RESPONSE_UNKNOWN_ERROR"));
                this.element.find(".error").show();
                break
        }
    },googAuthFailed: function() {
        this.element.find(".message").attr("data-translate-text", "POPUP_INVITE_GOOGAUTH_RESPONSE_UNKNOWN_ERROR").html($.localize.getString("POPUP_INVITE_GOOGAUTH_RESPONSE_UNKNOWN_ERROR"));
        this.element.find(".error").show()
    },
    googContactsSuccess: function(c) {
        switch (parseInt(c.result.statusCode, 10)) {
            case 1:
                this.googleContacts = c.result.parsedResult;
                this.showOnlyNamedContacts = true;
                this.googContactsSuccessCallback();
                break;
            case 2:
                this.element.find(".message").attr("data-translate-text", "POPUP_INVITE_GOOGAUTH_RESPONSE_AUTH_ERROR").html($.localize.getString("POPUP_INVITE_GOOGAUTH_RESPONSE_AUTH_ERROR"));
                this.element.find(".error").show();
                break;
            default:
                this.element.find(".message").attr("data-translate-text", "POPUP_INVITE_GOOGAUTH_RESPONSE_UNKNOWN_ERROR").html($.localize.getString("POPUP_INVITE_GOOGAUTH_RESPONSE_UNKNOWN_ERROR"));
                this.element.find(".error").show();
                break
        }
    },googContactsFailed: function(c) {
        console.warn("goog contacts failed", c);
        this.element.find(".message").attr("data-translate-text", "POPUP_INVITE_GOOGAUTH_RESPONSE_UNKNOWN_ERROR").html($.localize.getString("POPUP_INVITE_GOOGAUTH_RESPONSE_UNKNOWN_ERROR"));
        this.element.find(".error").show()
    },facebookSuccess: function() {
        this.facebookSuccessCallback()
    },facebookFailed: function() {
        this.element.find(".message").attr("data-translate-text", "POPUP_SHARE_FACEBOOK_ERROR").html($.localize.getString("POPUP_SHARE_FACEBOOK_ERROR"));
        this.element.find(".error").show()
    },twitterSuccess: function() {
        this.twitterSuccessCallback()
    },twitterFailed: function() {
        this.element.find(".message").attr("data-translate-text", "POPUP_SHARE_TWITTER_ERROR").html($.localize.getString("POPUP_SHARE_TWITTER_ERROR"));
        this.element.find(".error").show()
    },"input keydown": function(c, a) {
        a.keyCode && a.keyCode == 13 && c.is("[name*=google]") && this.formSubmit()
    },"input.googleContact click": function(c) {
        $(c).is(":checked") ? $(c).closest("li.contact").addClass("selected") : 
        $(c).closest("li.contact").removeClass("selected")
    },"button.uncheckAll click": function() {
        if (this.submitType == "facebook")
            this.facebookClearSelected();
        else
            this.submitType == "googleContacts" && $(".google_contacts input", this.element).attr("checked", false)
    },"button.checkAll click": function() {
        if (this.submitType == "facebook") {
            this.element.find(".submit span").attr("data-translate-text", "SEND_INVITE").html($.localize.getString("SEND_INVITE"));
            _.forEach(this.facebookFriends, function(c, a) {
                this.facebookFriends[a].selected = 
                true;
                this.fbIDs[c.id] = c.id
            }, this);
            this.slickbox.setItems(this.facebookFriends)
        } else
            this.submitType == "googleContacts" && $(".google_contacts input", this.element).attr("checked", true)
    },updateFacebookForm: function() {
        $("#settings_facebook_form").html(this.view("/shared/inviteFacebook"));
        $("#settings_facebook_form .error").addClass("hide");
        $(window).resize()
    },updateFacebookFormWithError: function(c) {
        if (typeof c == "object" && c.error)
            c = c.error;
        $("#settings_facebook_form .error").html($.localize.getString(c));
        $("#settings_facebook_form .error").removeClass("hide");
        $(window).resize()
    },"#fbConnect-btn.fbConnect click": function() {
        var c = GS.getFacebook().flags;
        GS.getFacebook().logout(this.callback(function() {
            GS.getFacebook().login(null, this.callback(function(a) {
                a && a.error ? this.element.find(".error").show().find(".message").html($.localize.getString(a.error)) : this.element.find(".error").show().find(".message").html($.localize.getString("FACEBOOK_PROBLEM_CONNECTING_ERROR_MSG"));
                GS.getLightbox().positionLightbox()
            }), 
            c)
        }))
    },"#fbConnect-btn.fbLogin click": function() {
        GS.getFacebook().login(null, this.callback(function(c) {
            c && c.error ? this.element.find(".error").show().find(".message").html($.localize.getString(c.error)) : this.element.find(".error").show().find(".message").html($.localize.getString("FACEBOOK_PROBLEM_CONNECTING_ERROR_MSG"));
            GS.getLightbox().positionLightbox()
        }))
    },"#lightbox .error .message .resetPerms click": function(c, a) {
        a.preventDefault();
        var b = GS.getFacebook().flags;
        GS.getFacebook().logout(function() {
            GS.getFacebook().login(function() {
                $("#lightbox").find(".error").hide()
            }, 
            this.callback(function() {
                error && error.error ? this.element.find(".error").show().find(".message").html($.localize.getString(error.error)) : this.element.find(".error").show().find(".message").html($.localize.getString("FACEBOOK_PROBLEM_CONNECTING_ERROR_MSG"));
                GS.getLightbox().positionLightbox()
            }), b)
        })
    },"#fbInvalid a.fbConnect click": function() {
        var c = GS.getFacebook().flags;
        GS.getFacebook().logout(this.callback(function() {
            GS.getFacebook().login(null, this.callback(function(a) {
                a && a.error ? this.element.find(".error").show().find(".message").html($.localize.getString(a.error)) : 
                this.element.find(".error").show().find(".message").html($.localize.getString("FACEBOOK_PROBLEM_CONNECTING_ERROR_MSG"));
                GS.getLightbox().positionLightbox()
            }), c)
        }))
    },"#fbConnect-btn.fbChange click": function() {
        GS.getFacebook().serviceLogout(this.callback(function() {
            GS.getFacebook().login(null, this.callback(function(c) {
                c && c.error ? this.element.find(".error").show().find(".message").html($.localize.getString(c.error)) : this.element.find(".error").show().find(".message").html($.localize.getString("FACEBOOK_PROBLEM_CONNECTING_ERROR_MSG"));
                GS.getLightbox().positionLightbox()
            }))
        }))
    },"#lightbox .error .changeFBLogin click": function() {
        GS.getFacebook().serviceLogout(this.callback(function() {
            GS.getFacebook().login(null, this.callback(function(c) {
                c && c.error ? this.element.find(".error").show().find(".message").html($.localize.getString(c.error)) : this.element.find(".error").show().find(".message").html($.localize.getString("FACEBOOK_PROBLEM_CONNECTING_ERROR_MSG"));
                GS.getLightbox().positionLightbox()
            }))
        }))
    }});
GS.Controllers.BaseController.extend("GS.Controllers.VipInterface", {onDocument: false,vipErrorCodes: {"GS-00": "VIP_ERROR_UNKNOWN","GS-01": "VIP_ERROR_LOGIN","GS-02": "VIP_ERROR_ALREADY_VIP","CC-01": "VIP_ERROR_MISSING_NAME","CC-02": "VIP_ERROR_UNKNOWN","CC-03": "VIP_ERROR_MISSING_CC_INFO","CC-04": "VIP_ERROR_ADDRESS","CC-05": "VIP_ERROR_UNKNOWN","CC-06": "VIP_ERROR_PAYMENT_PROCESSOR","CC-07": "VIP_ERROR_SESSION_EXPIRED","CC-08": "VIP_ERROR_INVALID_CC","CC-09": "VIP_ERROR_MISSING_CVD","CC-10": "VIP_ERROR_INVALID_CVD",
        "CC-11": "VIP_ERROR_ADDRESS1_TOO_LONG","CC-000": "VIP_ERROR_GENERIC_PAYMENT_ERROR","CC-000X": "VIP_ERROR_GENERIC_PAYMENT_ERROR","CC-000-1": "VIP_ERROR_XML","CC-001": "VIP_ERROR_CARD_DECLINED","PP-01": "VIP_ERROR_UNKNOWN","PP-02": "VIP_ERROR_UNKNOWN_PAYPAL","PP-03": "VIP_ERROR_UNKNOWN","PP-04": "VIP_ERROR_PAYPAL_CANCEL","PP-000": "VIP_ERROR_PAYPAL_FAIL","PP-000X": "VIP_ERROR_PAYPAL_FAIL","PPX-001": "VIP_ERROR_PAYPAL_COUNTRY","PC-01": "VIP_ERROR_NO_PROMOCODE","PC-02": "VIP_ERROR_CODE_NOT_FOUND","PC-03": "VIP_ERROR_CODE_REDEEMED",
        "RC-01": "VIP_ERROR_NOT_ENOUGH_POINTS"},excludedCreditCardCountries: {BY: true,MM: true,CD: true,CI: true,CU: true,RS: true,IR: true,IQ: true,LB: true,LR: true,LY: true,KP: true,RW: true,SD: true,SY: true,VE: true,ZW: true,EG: true,ID: true,NG: true,PH: true,UA: true},excludedRecurringCountries: {AF: true,AL: true,AM: true,AO: true,AT: true,AZ: true,BA: true,BD: true,BE: true,BG: true,BI: true,BY: true,CD: true,CF: true,CG: true,CK: true,CS: true,CU: true,DE: true,DZ: true,EG: true,ER: true,ET: true,GE: true,GT: true,HT: true,ID: true,IQ: true,IR: true,
        KG: true,KH: true,KP: true,KZ: true,LA: true,LR: true,LY: true,MD: true,MK: true,MM: true,MN: true,MY: true,NG: true,NR: true,PH: true,PK: true,RO: true,RU: true,RW: true,SD: true,SL: true,SR: true,SY: true,TJ: true,TM: true,UZ: true,VE: true,YE: true,ZW: true}}, {vipPackageNames: {plus: "plus",anywhere: "anywhere",lite: "lite",vip: "vip"},vipPackagePrices: GS.user.subscription.getNewPricing(),showVipErrors: function(c) {
        if (c.errorID && c.message)
            c.error = [{errorID: c.errorID,message: c.message}];
        var a, b = ['<ul class="errors">'];
        this.element.find(".error.response .message").html("");
        this.element.find(".error.response").hide();
        if (c.error && c.error.length) {
            _.forEach(c.error, this.callback(function(g) {
                if (a = $.trim($.localize.getString(GS.Controllers.VipInterface.vipErrorCodes[g.errorID])))
                    b.push("<li>" + a + "</li>");
                else {
                    console.warn("unknown error in arr", g.errorID, g.message, GS.Controllers.VipInterface.vipErrorCodes[g.errorID]);
                    a = _.isString(g.message) ? g.message : g.message[0];
                    if (a.match("AVS"))
                        a = $.localize.getString("VIP_ERROR_AVS");
                    else if (a.match("invalid XML"))
                        a = $.localize.getString("VIP_ERROR_XML");
                    else if (a.match("invalid card number"))
                        a = $.localize.getString("VIP_ERROR_CARD_NUMBER");
                    else if (a.match("CVD check"))
                        a = $.localize.getString("VIP_ERROR_CVD");
                    a && b.push("<li>" + a + "</li>")
                }
            }));
            b.push("</ul>");
            c = this.element.find(".error").show().find(".message");
            c.html("<strong>" + $.localize.getString("POPUP_VIP_ERROR_MESSAGE") + "</strong> " + b.join(""))
        } else {
            this.element.find(".message").attr("data-translate-text", "VIP_ERROR_UNKNOWN").html($.localize.getString("VIP_ERROR_UNKNOWN"));
            this.element.find(".error").show()
        }
    },
    "a.login click": function() {
        GS.getLightbox().close();
        GS.getLightbox().open("login")
    }});
GS.Controllers.PageController.extend("GS.Controllers.Page.HomeController", {}, {init: function(c, a) {
        this.update(a);
        this.subscribe("gs.app.resize", this.callback("resize"));
        this._super()
    },update: function() {
        if (!GS.getLightbox || !GS.getLightbox().isOpen)
            $("input.search.autocomplete", this.element).focus();
        !GS.user.isLoggedIn || GS.user.subscription.canHideAds() ? $(".home_upgrade").addClass("hide") : $(".home_upgrade").removeClass("hide");
        $.publish("gs.page.home.update")
    },index: function() {
        this._super();
        this.addAutocomplete("home");
        this.resize();
        this.subscribe("gs.app.resize", this.callback("resize"));
        this.subscribe("gs.auth.update", this.callback("update"));
        this.focusSearch();
        GS.Controllers.PageController.title("Listen to Free Music Online - Internet Radio - Free MP3 Streaming", false);
        $.publish("gs.page.home.view");
        GS.resize()
    },focusSearch: function() {
        if (!GS.getLightbox || !GS.getLightbox().isOpen)
            $("input.search.autocomplete", this.element).focus()
    },resize: function() {
        var c = $("#homeSearch"), a = 500;
        if (c.length) {
            a = Math.max(500, Math.min(400, 
            $(this.element).width() - 200));
            c.width(a).css("marginLeft", -Math.round(a / 2))
        }
    },toggleHint: function(c, a) {
        var b = $("#searchBar_hint"), g = $("#searchBar_input input"), h = $("#searchBar_precomplete");
        if (a.type == "mousedown")
            g.val() === "" && a.button != 2 ? b.show() : b.hide();
        else if (a.type == "keyup" || a.type == "keydown") {
            var m = _.orEqual(a.keyCode, a.which), k = String.fromCharCode(m).replace(/[\b]/g, "");
            if (String.fromCharCode(m).replace(/[\s]/g, "").length > 0)
                g.val() === "" && k.length < 1 ? b.show() : b.hide();
            if (a.type == "keydown") {
                h.hide();
                if (m == _.keys.TAB) {
                    a.preventDefault();
                    b = h.text();
                    b.length && g.val(b)
                }
            }
        } else
            g.val() === "" ? b.show().removeClass("faded") : b.hide();
        g.val() === "" && h.text("")
    },"#homeSearch submit": function(c, a) {
        if ($("input[name=q]", c).val() === "") {
            a.stopImmediatePropagation();
            return false
        }
        return true
    },"#searchButton click": function() {
        $("#searchBar_input .search").val() ? $("#homeSearch").submit() : $("#searchBar_input span").trigger("click")
    },"#searchBar_input span click": function() {
        this.focusSearch()
    },"#homePage keydown": function() {
        this.focusSearch()
    },
    "input.search.autocomplete mousedown": function(c, a) {
        return this.toggleHint(c, a)
    },"input.search.autocomplete keydown": function(c, a) {
        return this.toggleHint(c, a)
    },"input.search.autocomplete keyup": function(c, a) {
        return this.toggleHint(c, a)
    },"input.search.autocomplete focusout": function(c, a) {
        if ($("#searchBar_input input").hasClass("focused")) {
            setTimeout(function() {
                $("input.search.autocomplete", "#page").focus()
            }, 0);
            $("#searchBar_input input").removeClass("focused");
            return true
        } else
            return this.toggleHint(c, 
            a)
    },"a.about click": function() {
        GS.getLightbox().open("about")
    },"a.themes click": function() {
        GS.getLightbox().open("themes")
    },"a.upgrade click": function() {
        GS.getLightbox().open("vipPerks")
    },"a.station click": function(c, a) {
        a.stopPropagation();
        var b = c.attr("data-tagid");
        GS.player.setAutoplay(true, b);
        return false
    },notFound: function() {
        this.element.html(this.view("not_found"));
        this.addAutocomplete("home");
        this.resize();
        this.subscribe("gs.app.resize", this.callback("resize"));
        this.subscribe("gs.auth.update", 
        this.callback("update"));
        GS.Controllers.PageController.title("Unable To Find What You're Looking For")
    }});
GS.Controllers.PageController.extend("GS.Controllers.Page.SongController", {}, {type: "song",scrollToComment: false,index: function(c, a) {
        this.url = location.hash;
        this.token = c || "";
        this.subpage = a || "overview";
        this.token ? GS.Models.Song.getSongFromToken(this.token, this.callback("loadSong")) : GS.router.notFound()
    },loadSong: function(c) {
        if (c.validate()) {
            this.song = c;
            if (!c.fanbase)
                c.fanbase = GS.Models.Fanbase.wrap({objectID: c.SongID,objectType: "song"});
            this.correctUrl(this.song, this.subpage === "overview" ? "" : this.subpage);
            this.id = this.song.SongID;
            this.fbCommentsUrl = "http://listen.grooveshark.com/" + this.song.toUrl().replace("#!/", "");
            this.fbUrl = "http://grooveshark.com/" + this.song.toUrl().replace("#!/", "").split("?")[0];
            this.header.name = this.song.SongName;
            this.header.breadcrumbs = [{text: this.song.ArtistName,url: _.cleanUrl(this.song.ArtistName, this.song.ArtistID, "artist")}, {text: this.song.AlbumName,url: _.cleanUrl(this.song.AlbumName, this.song.AlbumID, "album")}];
            this.header.subpages = ["overview"];
            this.header.options = false;
            this.list.doPlayAddSelect = true;
            this.list.doSearchInPage = true;
            this.list.sortOptions = [{text: "Track",column: "TrackNum"}, {text: "Popularity",column: "Popularity"}, {text: "Song Name",column: "Name"}, {text: "Artist Name",column: "ArtistName"}];
            this.element.html(this.view("index"));
            switch (this.subpage) {
                case "overview":
                default:
                    this.song.album = GS.Models.Album.getOneFromCache(this.song.AlbumID);
                    this.triedUnverified = this.song.album ? this.song.album.songsLoaded && this.song.album.songsUnverifiedLoaded : false;
                    GS.Controllers.PageController.title(this.song.getTitle());
                    $("#page_header button.share").parent().show();
                    if (window.FB && FB.XFBML && this.fbUrl && GS.getFacebook().initialXFBML)
                        FB.XFBML.parse(window.document.getElementById("page_content"), this.callback("onPageLoaded"));
                    else if (this.fbUrl) {
                        var a;
                        a = this.subscribe("gs.facebook.xfbml.ready", this.callback(function() {
                            FB.XFBML.parse(window.document.getElementById("page_content_pane"), this.callback("onPageLoaded"));
                            $.unsubscribe(a)
                        }))
                    }
                    this.fans = [];
                    this.fansLoaded = false;
                    this.song.fanbase.getFans(this.callback("loadSidebarFans"), 
                    this.callback("loadSidebarFans"), false);
                    break
            }
            c.getVideos(this.callback("loadVideos"), this.callback("loadVideosFailed"));
            GS.Models.Artist.getArtist(this.song.ArtistID, this.callback("loadDigests"));
            GS.service.getSongRecentListeners(this.song.SongID)
        } else
            GS.router.notFound()
    },onPageLoaded: function() {
        setTimeout(this.callback(function() {
            if ($("#page_content_social_buttons").length) {
                $("#page_content .comments").removeClass("loadingFBComments");
                $("#page_content_social_buttons .fblike").css("width", this.likeWidth);
                this.loadLikeButtonCount(this.fbUrl);
                FB.XFBML.parse(window.document.getElementById("fbLike"), this.callback(function() {
                    setTimeout(function() {
                        $.publish("gs.facebook.xfbml.ready")
                    }, 100);
                    this.scrollToComment && this.scrollToFBComment();
                    $("#page_content_social_buttons .fblike").css("width", this.likeWidth)
                }));
                GS.resize();
                GS.getTwitter().getTwitterShareMessage("song", this.song, this.fbUrl, this.callback(function(c, a) {
                    var b = $(document.createElement("a"));
                    b.attr("data-text", c.replace('"', '"'));
                    b.attr("data-url", 
                    a);
                    b.attr("data-via", "grooveshark");
                    b.attr("data-count", "none");
                    b.addClass("twitter-share-button");
                    b.text("Tweet");
                    $("#page_content_social_buttons .tweetButton").empty().append(b);
                    GS.getTwitter().parseWidgets()
                }));
                GS.getGoogle().parsePlusWidgets($("#page_content_social_buttons .googlePlusButton").get(0))
            }
        }), 10)
    },loadDigests: function(c) {
        this.artist = c;
        this.artist.getSongs(this.callback("loadAlbumDigest"));
        GS.service.artistGetSimilarArtists(this.artist.ArtistID, this.callback("loadSimilarDigest"));
        GS.service.getSongkickEventsFromArtists([this.artist.ArtistID], 
        [this.artist.ArtistName], this.callback("loadEventsDigest"));
        if (!GS.user.subscription.canHideAds()) {
            GS.getAd().updateRotationCount();
            GS.getAd().buildAd($("#songCapital_300"), 300, 250, ["p=song_overview"]);
            GS.getAd().buildAd($("#songCapital_728"), 728, 90, ["p=song_overview"])
        }
    },loadAlbumDigest: function() {
        if (this.artist && this.artist.albums) {
            var c = _.toArray(this.artist.albums).sort(GS.Models.Album.prettySort).slice(0, 6);
            c.length && $("#album_digest").html(this.view("/artist/album_digest", {artist: this.artist,
                albums: c}))
        }
    },loadSimilarDigest: function(c) {
        this.similarArtists = GS.Models.Artist.wrapCollection(c.SimilarArtists);
        this.similarArtists.length && this.element.find("#similarArtists_digest").html(this.view("/artist/similarArtists_digest"))
    },loadEventsDigest: function(c) {
        if (c && c.length) {
            c.sort(_.getSort("StartTime", -1));
            c = c.slice(0, 5);
            $("#events_digest").html(this.view("/artist/event_digest", {artist: this.artist,events: c}))
        }
    },loadVideos: function(c) {
        if (this.subpage === "overview")
            if (c && c.length) {
                this.videos = 
                c;
                $("#song_videos").html(this.view("song_videos", {videos: c}))
            }
    },loadVideosFailed: function() {
        if (this.subpage === "overview")
            if (this.fans.length) {
                this.sliderObject = this.videos = this.fans;
                this.sliderObject.name = '<span data-translate-text="FANS">' + $.localize.getString("FANS") + "</span>";
                this.sliderWidth = this.fans.length * 140;
                this.sliderContents = this.fans;
                this.sliderRenderer = GS.Models.User.sliderRenderer;
                $("#song_subcontent").removeClass("loading").html(this.view("/shared/slider"))
            } else if (this.fansLoaded)
                $("#song_subcontent").removeClass("loading").hide();
            else
                this.loadSubFans = true
    },loadSidebarFans: function(c) {
        this.fansLoaded = true;
        if (c) {
            var a = [];
            for (var b in c)
                if (c.hasOwnProperty(b)) {
                    if (a.length >= 20)
                        break;
                    c[b].Picture && a.push(c[b])
                }
            this.fans = a;
            this.sidebarFans = true;
            $("#song_fans").html(this.view("/shared/sidebarFans", {fans: a,seeAll: false}));
            this.loadSubFans && this.loadVideosFailed()
        } else
            this.loadSubFans && $("#song_subcontent").removeClass("loading").hide()
    },selectCurrentSong: function() {
        var c = this.element.find(".gs_grid").controller();
        if (c) {
            var a = c.dataView.getIdxById(this.song.SongID), 
            b = c.grid.getSelectedRows();
            b.push(a);
            c.selectedRowIDs.push(this.song.SongID);
            c.grid.setSelectedRows(b);
            c.grid.onSelectedRowsChanged()
        }
    },scrollToFBComment: function() {
        this.scrollToComment = true
    },".slick-row.verifiedDivider click": function(c, a) {
        a.stopPropagation();
        var b = $("#grid").controller(), g;
        if (b) {
            if (!this.triedUnverified) {
                this.triedUnverified = true;
                this.song.getRelatedSongs(this.callback("loadRelatedGrid"), null, false)
            }
            if (b.filter.onlyVerified) {
                c.find(".showMore").addClass("showingMore").attr("data-translate-text", 
                "SEARCH_RESULTS_SHOW_LESS").html($.localize.getString("SEARCH_RESULTS_SHOW_LESS"));
                b.filter.onlyVerified = false
            } else {
                c.find(".showMore").removeClass("showingMore").attr("data-translate-text", "SEARCH_RESULTS_SHOW_MORE").html($.localize.getString("SEARCH_RESULTS_SHOW_MORE"));
                b.filter.onlyVerified = 1
            }
            (g = b.grid) && g.onSort(b.sortCol, b.sortDir)
        }
    },".page_content_profile_options .share click": function() {
        GS.getLightbox().open("share", {type: "song",id: this.song.SongID})
    },"a.songLink click": function(c, a) {
        a.preventDefault();
        var b = parseInt($(c).attr("rel"), 10);
        b && GS.Models.Song.getSong(b, function(g) {
            g && GS.router.setHash(g.toUrl())
        })
    },"a.video click": function(c) {
        c = parseInt($(c).attr("rel"), 10);
        GS.getLightbox().open("video", {videos: this.videos,index: c,autoSkipToNextVideo: false,renderSection: false})
    },".capitalSliderBtn click": function(c) {
        c = $(c);
        c.scrollLeft(0);
        $(c).hasClass("capitalSliderNext") ? $(".capitalView_728").animate({scrollLeft: $(".capitalView_728").scrollLeft() + 200}, 500) : $(".capitalView_728").animate({scrollLeft: $(".capitalView_728").scrollLeft() - 
            200}, 500)
    },".capitalSliderBtn mouseup": function(c) {
        c = $(c);
        c.scrollLeft(0);
        console.warn("hereeee")
    },getOptionMenu: function() {
        var c = [], a = this.song.SongID;
        songName = this.song.SongName;
        GS.user.getIsShortcut("song", a) ? c.push({title: $.localize.getString("CONTEXT_REMOVE_FROM_PINBOARD"),action: {type: "fn",callback: function() {
                    GS.user.removeFromShortcuts("song", a);
                    $("#page_header a[name=shortcut]").parent().show();
                    $("#page_header a[name=removeshortcut]").parent().hide()
                }},customClass: "jj_menu_item_hasIcon jj_menu_remove_music"}) : 
        c.push({title: $.localize.getString("CONTEXT_ADD_TO_PINBOARD"),action: {type: "fn",callback: function() {
                    GS.user.addToShortcuts("song", a, songName, true);
                    $("#page_header a[name=shortcut]").parent().hide();
                    $("#page_header a[name=removeshortcut]").parent().show()
                }},customClass: "jj_menu_item_hasIcon jj_menu_item_pinboard"});
        return c
    },getShopMenu: function() {
        var c = [], a = this.song.SongID;
        songName = this.song.SongName;
        c.push({title: $.localize.getString("CONTEXT_BUY_SONG"),action: {type: "fn",callback: function() {
                    GS.getLightbox().open("buySong", 
                    a)
                },log: function() {
                    GS.getGuts().onContextMenuClick("contextBuySong", "songOptionsMenu", false, null)
                }},customClass: "jj_menu_item_hasIcon jj_menu_item_download"});
        return c
    },getPlayMenu: function() {
        var c = this.getPlayContext(), a = [this.song.SongID], b = this.element;
        return [{title: $.localize.getString("PLAY_NOW"),action: {type: "fn",callback: function() {
                        a.length && GS.player.addSongsToQueueAt(a, GS.player.INDEX_DEFAULT, true, c)
                    },log: function() {
                        GS.getGuts().objectListPlayAdd(a, b, "play")
                    }},customClass: "jj_menu_item_hasIcon jj_menu_item_play"}, 
            {title: $.localize.getString("PLAY_NEXT"),action: {type: "fn",callback: function() {
                        a.length && GS.player.addSongsToQueueAt(a, GS.player.INDEX_NEXT, false, c)
                    },log: function() {
                        GS.getGuts().objectListPlayAdd(a, b, "play")
                    }},customClass: "jj_menu_item_hasIcon jj_menu_item_play_next"}, {title: $.localize.getString("PLAY_LAST"),action: {type: "fn",callback: function() {
                        a.length && GS.player.addSongsToQueueAt(a, GS.player.INDEX_LAST, false, c)
                    },log: function() {
                        GS.getGuts().objectListPlayAdd(a, b, "play")
                    }},customClass: "jj_menu_item_hasIcon jj_menu_item_play_last"}, 
            {customClass: "separator"}, {title: $.localize.getString("REPLACE_QUEUE"),action: {type: "fn",callback: function() {
                        a.length && GS.player.addSongsToQueueAt(a, GS.player.INDEX_REPLACE, true, c)
                    },log: function() {
                        GS.getGuts().objectListPlayAdd(a, b, "play")
                    }},customClass: "jj_menu_item_hasIcon jj_menu_item_replace_playlist"}, {title: $.localize.getString("START_RADIO"),action: {type: "fn",callback: function() {
                        a.length && GS.player.addSongsToQueueAt(a, GS.player.INDEX_REPLACE, true, c, true)
                    },log: function() {
                        GS.getGuts().objectListPlayAdd(a, 
                        b, "play")
                    }},customClass: "jj_menu_item_hasIcon jj_menu_item_new_station"}]
    }});
GS.Controllers.PageController.extend("GS.Controllers.Page.SearchController", {cache: {}}, {defaultType: "digest",validTypes: {song: true,playlist: true,user: true,event: true,album: true,artist: true,digest: true},query: "",queryAsTag: "",tagID: 0,type: "",ppOverride: false,originalUsers: null,searchUsers: null,startTimes: {},currentFilterStr: null,currentSort: null,prefetchSize: 3,displayMethod: "grid",videoResults: [],songs: [],albums: [],artists: [],GENRE_TAGS: {"40s": 2837,"50s": 1087,"60s": 266,"70s": 588,"80s": 55,"8bit": 2145,
        "90s": 9,acapella: 4263,acidjazz: 3519,acoustic: 105,alternativerock: 1259,ambient: 75,americana: 922,anime: 120,banda: 4264,bass: 585,beach: 912,beat: 1475,bhangra: 130,blackmetal: 4265,bluegrass: 96,blues: 230,bluesrock: 1106,britpop: 534,celtic: 513,chanson: 3692,chillout: 251,chinese: 4266,christian: 439,christianmetal: 4267,christianrock: 4268,christmas: 703,classical: 750,classiccountry: 4269,classicrock: 3529,club: 1038,contemporarychristian: 4270,country: 80,crunk: 748,cumbia: 4271,dance: 71,dancehall: 269,darkwave: 2139,dcima: 4272,
        deathmetal: 4273,desi: 2512,disco: 899,disney: 623,dnb: 273,downtempo: 153,dub: 3501,dubstep: 2563,electro: 162,electronic: 123,electronica: 67,electropop: 893,emo: 131,eurodance: 4028,experimental: 191,flamenco: 85,folk: 122,folkrock: 925,funk: 397,funky: 398,goa: 2556,gospel: 1489,grime: 268,grunge: 134,hardcore: 245,hardstyle: 4274,heavymetal: 1054,hiphop: 29,house: 48,indie: 136,indiefolk: 1221,indiepop: 573,indierock: 1138,industrial: 275,island: 2294,jazz: 43,jazzblues: 4275,jazzfusion: 4276,jesus: 1356,jpop: 568,jrock: 434,jungle: 248,
        kpop: 1765,lounge: 765,mathrock: 4277,medieval: 2585,meditation: 700,melodic: 929,merengue: 84,metal: 17,metalcore: 705,minimal: 2177,motown: 4278,mpb: 819,neofolk: 1139,neosoul: 4279,noise: 171,nujazz: 3518,numetal: 1103,oi: 4280,oldies: 102,opera: 1535,orchestra: 2760,pagode: 3606,pop: 56,poppunk: 1333,poprock: 3468,posthardcore: 1332,postrock: 422,powermetal: 4063,progressive: 97,progressiverock: 4137,psychedelic: 1168,psychobilly: 3909,punkrock: 1754,ragga: 4281,rap: 3,rave: 271,rb: 4282,reggae: 160,reggaeton: 940,relax: 1941,rnb: 877,
        rock: 12,rockabilly: 1086,rocksteady: 4283,rootsreggae: 4284,rumba: 3454,salsa: 81,samba: 4285,schlager: 3162,screamo: 166,sertanejo: 4286,singersongwriter: 923,ska: 100,skapunk: 1110,smoothjazz: 3855,softrock: 1311,soul: 520,soundtrack: 72,southernrock: 1298,surf: 1408,swing: 1032,symphonicmetal: 4287,synthpop: 163,tango: 2868,techno: 47,tejano: 789,texascountry: 4288,thrashmetal: 4289,trance: 69,triphop: 158,turkish: 689,underground: 468,vallenato: 89,videogame: 115,vocal: 6,world: 313,zydeco: 4290},index: function(c, a) {
        c = _.orEqual(c, 
        "digest");
        this.ppOverride = _.orEqual(GS.user.searchVersion, false);
        var b = GS.getGuts();
        if (b.currentTest && b.currentTest.name == "interleaving_htp_htp4")
            this.ppOverride = "Interleaving_HTP_HTP4";
        else if (b.currentTest && b.currentTest.name == "interleaving_songclicks_htp4")
            this.ppOverride = "Interleaving_SongClicks_HTP4";
        if (a.indexOf("ppVersion:", 0) === 0) {
            b = a.split(/\s+/);
            this.ppOverride = b[0].split(":")[1];
            a = b.splice(1, b.length).join(" ")
        }
        this.query = _.orEqual(a, "").replace(/\s+/g, " ");
        this.cleanQuery = _.cleanText(this.query);
        this.type = c;
        this.queryAsTag = a.replace(/[-\s]*/g, "").toLowerCase();
        this.isTagSearch = false;
        if (this.GENRE_TAGS.hasOwnProperty(this.queryAsTag) && (this.type == "digest" || this.type == "song")) {
            this.isTagSearch = true;
            this.tagID = this.GENRE_TAGS[this.queryAsTag]
        }
        if (this.type && !this.validTypes[this.type])
            this.type = this.defaultType;
        GS.search.lastSearch = GS.search.search;
        GS.search.lastType = GS.search.type;
        GS.search.search = this.query;
        (GS.search.type = this.type) && this.type != "digest" ? GS.Controllers.PageController.title("All " + 
        _.ucwords(this.type) + " Results: " + this.query) : GS.Controllers.PageController.title("Search: " + this.query);
        this.displayMethod = c == "digest" ? "slickbox" : "grid";
        this.element.html(this.view("index"));
        this.showGridLoading();
        if (this.query === "") {
            this.element.find(".gs_grid." + (c + "s")).html(this.view("noResults"));
            $(".gs_grid input[name=q]", this.element).val(this.query);
            $("#searchForm input").select();
            this.addAutocomplete("search");
            GS.resize();
            GS.getGuts().logEvent("search", {type: this.type || "song",searchString: this.query,
                searchTime: 0,numResults: 0});
            GS.getGuts().beginContext({mostRecentSearch: this.query,mostRecentSearchType: this.type || "song",mostRecentSearchVersion: ""})
        } else {
            $("#page_search a.remove").removeClass("hide");
            $.localize.ready ? this.detectRadio() : this.subscribe("gs.locale.ready", this.callback(function() {
                this.detectRadio()
            }));
            this.startTimes.song = (new Date).getTime();
            var g = {Artists: this.callback(function(k) {
                    $("#page_nav_option_artist .count").text(k ? k.length : 0);
                    this.artists = k && k.length ? k.slice(0, 3) : [];
                    $("#profile_artists").html(this.view("topArtists"))
                }),
                Songs: this.callback(function() {
                }),Albums: this.callback(function(k) {
                    this.albums = k && k.length ? k : [];
                    $("#profile_albums").html(this.view("topAlbums"))
                }),Users: this.callback(function(k) {
                    k.sort(this.sortByPicture);
                    this.users = k && k.length ? k.slice(0, 3) : [];
                    $("#profile_users").html(this.view("topUsers"))
                }),Playlists: this.callback(function(k) {
                    this.playlists = k && k.length ? k.slice(0, 3) : [];
                    $("#profile_playlists").html(this.view("topPlaylists"))
                }),Events: this.callback(function(k) {
                    this.events = k && k.length ? k.slice(0, 3) : 
                    [];
                    $("#profile_events").html(this.view("topEvents"))
                })}, h = [];
            b = this.callback(function(k, n, o, q, x) {
                if (!(!k.length && this.type == "digest" && (o == "song" || o == "album" || o == "artist"))) {
                    this.type == "digest" && $("#page_content_pane .content").append(this.view("digestSection", {type: o,cleanQuery: this.cleanQuery}));
                    n = o == "song" || this.type != "digest" || !$("#" + o + "Grid").length ? $("#grid") : $("#" + o + "Grid");
                    this.items = k;
                    this.options = q;
                    this.columns = x;
                    this.displayResults(this.displayMethod, n, o)
                }
            });
            if (this.type == "digest") {
                g.Songs = 
                b;
                g.Albums = b;
                g.Artists = b;
                h = ["Songs", "Albums", "Artists"]
            } else {
                var m = _.ucwords(this.type + "s");
                g[m] = b;
                if (this.type == "song" || this.type == "album" || this.type == "artist")
                    h = ["Songs", "Albums", "Artists"];
                else
                    h.push(m)
            }
            if (!GS.user.subscription.canHideAds()) {
                $(".capitalWrapper_728").removeClass("hide");
                $(".capitalWrapper_300").removeClass("hide")
            }
            this.getResults(g, h, this.callback(function() {
                if (!GS.user.subscription.canHideAds()) {
                    var k = ["q=" + this.query, "t=" + (this.type || "song"), "p=search_" + this.type];
                    this.artists && 
                    this.artists[0] && k.push("7=" + this.artists[0].ArtistID, "8=" + this.artists[0].ArtistName);
                    GS.getAd().updateRotationCount();
                    GS.getAd().buildAd($("#searchCapital_300"), 300, 250, k);
                    GS.getAd().buildAd($("#searchCapital_728"), 728, 90, k)
                }
                k = (new Date).getTime();
                this.startTimes.artist = k;
                this.startTimes.album = k;
                this.startTimes.playlist = k;
                this.startTimes.user = k;
                this.type != "digest" && this.type != "artist" && this.type != "song" && this.type != "album" && this.getResults(g, ["Songs", "Albums", "Artists"], null, false);
                this.type != "playlist" && 
                this.getResults(g, ["Playlists"], null, false);
                this.type != "user" && this.getResults(g, ["Users"], null, false);
                this.type != "event" && this.getResults(g, ["Events"], null, false);
                this.suggest()
            }), true, this.isTagSearch);
            GS.getYoutube().search(this.query, 20, this.callback("displayVideoResults"), this.callback("getVideoResultsError"))
        }
    },getResults: function(c, a, b, g, h) {
        var m = this.callback(function(A, t, w) {
            if (A === this.query) {
                var E, I, D = {}, G = {sortCol: "Score",sortDir: 0}, H, B, L = "Songs";
                if (a.length == 1) {
                    if ($.isArray(a) && a.length === 
                    1)
                        H = a[0];
                    H = H.substring(0, H.length - 1);
                    B = H + "s";
                    if (w.result && w.result[B] && w.result[B].length && w.result[B][0] && !w.result[B][0].init)
                        w.result[B] = GS.Models[_.ucwords(H)].wrapCollection(w.result[B], {ppVersion: ""});
                    if (w.result && w.result[B])
                        this[B.toLowerCase()] = w.result[B];
                    else
                        this[B.toLowerCase()] = [];
                    L = B
                } else {
                    if (w.result && w.result.Songs && w.result.Songs.length && w.result.Songs[0] && !w.result.Songs[0].init)
                        w.result.Songs = GS.Models.Song.wrapCollection(w.result.Songs, {ppVersion: ""});
                    if (w.result && w.result.Albums && 
                    w.result.Albums.length && w.result.Albums[0] && !w.result.Albums[0].init)
                        w.result.Albums = GS.Models.Album.wrapCollection(w.result.Albums, {ppVersion: ""});
                    if (w.result && w.result.Artists && w.result.Artists.length && w.result.Artists[0] && !w.result.Artists[0].init)
                        w.result.Artists = GS.Models.Artist.wrapCollection(w.result.Artists, {ppVersion: ""});
                    this.songs = w.result.Songs || [];
                    this.albums = w.result.Albums || [];
                    this.artists = w.result.Artists || [];
                    var F = [];
                    this.songs[0] ? F.push({name: this.songs[0].SongName.toLowerCase(),
                        verified: this.songs[0].IsVerified}) : F.push({name: "",verified: 0});
                    this.artists[0] ? F.push({name: this.artists[0].ArtistName.toLowerCase(),verified: this.artists[0].IsVerified}) : F.push({name: "",verified: 0});
                    this.albums[0] ? F.push({name: this.albums[0].AlbumName.toLowerCase(),verified: this.albums[0].IsVerified}) : F.push({name: "",verified: 0});
                    for (var K = 0, N = F.length, r = A.indexOf(" by "), s, u; K < N; K++) {
                        s = F[K].name == A.toLowerCase();
                        u = K != 1 && r > 0 ? F[K].name == A.toLowerCase().substring(0, r) : false;
                        if (s || u) {
                            switch (K) {
                                case 1:
                                    L = 
                                    "Artists";
                                    break;
                                case 2:
                                    L = "Albums";
                                    break
                            }
                            if (F[K].verified)
                                break
                        }
                    }
                }
                var y = 0;
                A = this.callback(function(C) {
                    if ((D = w.result[C]) && D.length) {
                        if (D[0].SongID)
                            H = "song";
                        else if (D[0] instanceof GS.Models.Album)
                            H = "album";
                        else if (D[0] instanceof GS.Models.Artist)
                            H = "artist";
                        else if (D[0] instanceof GS.Models.Playlist)
                            H = "playlist";
                        else if (D[0] instanceof GS.Models.User)
                            H = "user";
                        else if (D[0] instanceof GS.Models.Event)
                            H = "event";
                        if (H === "song") {
                            I = GS.Controllers.GridController.columns.song.concat();
                            E = [I[0], I[1], I[2]];
                            if (this.type == 
                            "digest" || this.type == "song") {
                                C = [];
                                for (var J = 0; J < D.length && J < this.prefetchSize; J++)
                                    C.push(D[J].SongID);
                                GS.player.prefetchStreamKeys(C)
                            }
                        } else {
                            E = GS.Controllers.GridController.columns[H];
                            if (H === "event") {
                                G = {sortCol: "StartTime",sortDir: 1,rowCssClasses: function() {
                                        return "event"
                                    }};
                                C = 0;
                                for (J = D.length; C < J; C++)
                                    if ((D[C].StartTime + "").indexOf(":") == -1) {
                                        D[C].EventID = C;
                                        D[C].StartTime = parseInt(D[C].StartTime);
                                        if (D[C].StartTime)
                                            D[C].StartTime = (new Date(D[C].StartTime * 1E3)).format("Y-m-d G:i:s");
                                        D[C].ArtistName = D[C].ArtistName || 
                                        D[C].Artists
                                    }
                            }
                        }
                        y++
                    } else
                        E = [];
                    C = _.ucwords(H + "s");
                    if (J = t[C])
                        GS.Controllers.Page.SearchController.cache[J] = w;
                    if (c && $.isFunction(c[C])) {
                        if (this.type == "digest" && !h)
                            D = D.slice(0, 15);
                        c[C](D, t[C], H, G, E)
                    }
                });
                A(L);
                for (B in w.result)
                    if (L != B) {
                        H = B.substring(0, B.length - 1).toLowerCase();
                        this.validTypes[H] && A(B)
                    }
                if (g) {
                    if (!y) {
                        H = this.type ? this.type + "s" : "digest";
                        this.element.find(".gs_grid." + H.toLowerCase()).length ? this.element.find(".gs_grid." + H.toLowerCase()).html(this.view("noResults")) : $("#page_content_pane .content").append('<div id="grid">' + 
                        this.view("noResults") + "</div>");
                        this.addAutocomplete("search");
                        GS.resize()
                    }
                    B = (new Date).getTime() - this.startTimes[H];
                    GS.search.version = w.version;
                    GS.search.server = _.orEqual(w.server, "not set");
                    B = {type: this.type || "song",searchString: this.query,searchVersion: w.version,searchTime: B,numResults: D ? D.length : 0};
                    if (this.isTagSearch) {
                        B.isTagSearch = true;
                        B.tag = this.queryAsTag
                    }
                    GS.getGuts().logEvent("search", B);
                    B = {mostRecentSearch: this.query,mostRecentSearchType: this.type || "song",mostRecentSearchVersion: w.version};
                    if (this.isTagSearch)
                        B.mostRecentTagSearched = this.queryAsTag;
                    GS.getGuts().beginContext(B);
                    !this.isTagSearch && GS.getGuts().context.hasOwnProperty("mostRecentTagSearched") && GS.getGuts().endContext("mostRecentTagSearched");
                    GS.getGuts().handlePageLoad("search", {type: this.type || "song"})
                }
                if (this.type == "song" && H == "song" && !GS.user.searchVersion)
                    GS.user.searchVersion = w.assignedVersion;
                $.isFunction(b) && b()
            }
        }), k = this.callback(function(A, t, w) {
            w = {result: {Songs: w}};
            m(A, t, w)
        });
        a = _.orEqual(a, [this.type]);
        $.isArray(a) || 
        (a = [a]);
        for (var n = {}, o, q = 0, x = 0, v; v = a[x]; x++) {
            o = v + ":" + this.query + ":" + this.ppOverride;
            GS.Controllers.Page.SearchController.cache[o] && $.isFunction(c[v]) && q++;
            n[v] = o
        }
        if (h && $.inArray(a, "Songs")) {
            n = ["tagSearch:" + o];
            GS.service.tagRadioGetAllSongs(this.tagID, this.callback(k, this.query, n), this.callback(m, this.query, n))
        } else
            a.length > q ? GS.service.getResultsFromSearch(this.query, a, this.ppOverride, this.callback(m, this.query, n), this.callback(m, this.query, n)) : m(this.query, {}, GS.Controllers.Page.SearchController.cache[o])
    },
    displayResults: function(c, a, b) {
        if (c != this.displayMethod)
            if (this.displayMethod == "grid") {
                a.controller().destroy();
                a.addClass("gs_grid")
            } else if (this.displayMethod == "slickbox") {
                this.slickbox.destroy();
                this.slickbox = null;
                this.artistSlickbox.destroy();
                this.artistSlickbox = null;
                this.albumSlickbox.destroy();
                this.albumSlickbox = null
            }
        if (b == "song" || b == "event" || b == "" || c == "grid") {
            this.options.scrollPane = $("#page");
            this.options.padding = 0;
            if (this.type === "user") {
                this.items = this.items.sort(this.sortByPicture);
                this.options.sortCol = 
                false
            } else if (b === "artist" || b == "event")
                this.options.disableMultiSelect = true;
            a.gs_grid(this.items, this.columns, this.options, b)
        } else
            b == "user" ? this.renderSlickBox(b, this.items, {sortType: "byPicture",sortFunction: this.sortByPicture}) : this.renderSlickBox(b, this.items, this.currentSort);
        this.displayMethod = c
    },displayVideoResults: function(c) {
        this.videoResults = c;
        $("#profile_videos").html(this.view("videoResults"))
    },"a.video click": function(c) {
        c = parseInt($(c).attr("rel"), 10);
        GS.getLightbox().open("video", {videos: this.videoResults,
            index: c,autoSkipToNextVideo: false,renderSection: false})
    },getVideoResultsError: function() {
        console.warn("error with video search")
    },suggest: function() {
        if ($("#page_content").is(".search")) {
            if (!window.google)
                window.google = {};
            if (!window.google.ac)
                window.google.ac = {};
            window.google.ac.h = this.callback(function(a) {
                var b = false;
                if (a[1].length > 0) {
                    a = a[1];
                    b = a[0][0].replace(/(?:\s?lyrics[^\s]*$|\<\/?[a-zA-Z]+\>)/g, "")
                }
                b && this.suggestSuccess("eg", b)
            });
            var c = "http://google.com/complete/search?output=json&q=" + $.trim(this.query) + 
            " lyrics&client=serp";
            $.ajax({url: c,dataType: "jsonp",jsonp: false,jsonpCallback: "window.google.ac.h",success: function() {
                },error: function() {
                }})
        }
    },suggestSuccess: function(c, a) {
        if ((a = _.uncleanText($.trim(a))) && $.trim(this.query).toLowerCase() !== a) {
            this.querySuggest = a;
            this.suggestSource = c;
            $("#didYouMean a").text(a).attr("title", a).data({searchquery: a,searchtype: this.type ? this.type : ""});
            $("#page_subheader").removeClass("hide");
            GS.resize();
            GS.getGuts().gaTrackEvent("search", "suggest", this.suggestSource);
            GS.getGuts().logEvent("suggest", {suggest: this.querySuggest,source: this.suggestSource,numSongs: $("#grid").controller() ? $("#grid").controller().dataView.rows.length : 0})
        }
    },".didYouMean a.remove click": function() {
        $("#page_subheader").remove();
        GS.resize()
    },".didYouMean a click": function() {
        var c = $("#grid").controller();
        c = c && c.dataView ? c.dataView.rows.length : 0;
        GS.getGuts().gaTrackEvent("search", "suggestClick", this.suggestSource, c);
        GS.getGuts().logEvent("suggestClick", {suggest: this.querySuggest,source: this.suggestSource,
            numSongs: c})
    },detectRadio: function() {
        if ($("#page_content").is(".search")) {
            var c = GS.Models.Station.getStationByName(this.query.toLowerCase());
            if (c) {
                var a = new GS.Models.DataString;
                a.string = $.localize.getString("SEARCH_START_RADIO");
                a.data = {name: $.localize.getString(c.StationTitle)};
                $("#page_content_pane .radio_suggestion").removeClass("hide");
                $("#page_content_pane .radio_suggestion a.startRadio").attr("rel", c.StationID).html("<span>" + a.render() + "</span>")
            }
        }
    },".radio_artist_suggestion .startRadio click": function(c) {
        GS.player.setAutoplay(true, 
        c.attr("data-tagid"))
    },".radio_suggestion .startRadio click": function(c) {
        GS.player.setAutoplay(true, c.attr("rel"))
    },"#grid a, #songDigest a, #albumDigest a, #artistDigest a click": function(c) {
        if (c.attr("href")) {
            var a = false, b = c.attr("href").split("/");
            if (b[1] == "artist")
                a = {artistID: b[3]};
            else if (b[1] == "album")
                a = {albumID: b[3]};
            else if (b[1] == "user")
                a = {userID: b[3]};
            else if (b[1] == "playlist")
                a = {playlistID: b[3]};
            if (a) {
                a.rank = c.parents("div.slick-row").length ? 1 + parseInt(c.parents("div.slick-row").attr("row"), 
                10) : 1 + parseInt(c.parents("li.slickbox-item").attr("rel"), 10);
                GS.getGuts().logEvent(GS.getGuts().searchClickLpid, a)
            }
        }
    },renderSlickBox: function(c, a, b) {
        switch (c) {
            case "user":
                this.currentFilterStr = this.query;
                this.originalUsers = a.concat();
                this.renderUsers(this.originalUsers, b);
                break;
            case "playlist":
                this.renderPlaylists(a, b);
                break;
            case "album":
                this.renderAlbums(a, b);
                break;
            case "artist":
                this.renderArtists(a, b);
                break
        }
    },renderAlbums: function(c, a) {
        var b = $("#albumGrid").length ? $("#albumGrid") : $("#grid");
        this.currentSort = 
        _.orEqual(a, {sortType: "relevance",sortFunction: null});
        b.html("").css("height", "auto").addClass("albums");
        this.albumSlickbox = $("#albumGrid").slickbox({sortFunction: this.currentSort.sortFunction,scrollPane: "#page",padding: 0,itemRenderer: GS.Models.Album.itemRenderer,itemWidth: 195,itemHeight: 70,maxHorizontalGap: 20,minHorizontalGap: 5,verticalGap: 15,dragAs: "album",dragItemID: "AlbumID",hidePositionInfo: true,displayRows: this.type == "digest" ? 1 : -1}, c);
        this.sliderOrBoxDragSetup(this.albumSlickbox, ".slickbox-item")
    },
    renderPlaylists: function(c, a) {
        this.currentSort = _.orEqual(a, {sortType: "relevance",sortFunction: null});
        $("#playlistGrid").html("").css("height", "auto").addClass("playlistList");
        this.slickbox = $("#playlistGrid").slickbox({sortFunction: this.currentSort.sortFunction,scrollPane: "#page",padding: 0,itemRenderer: GS.Models.Playlist.itemRenderer,itemWidth: 195,itemHeight: 70,maxHorizontalGap: 20,minHorizontalGap: 5,verticalGap: 15,dragAs: "playlist",dragItemID: "PlaylistID"}, c);
        this.sliderOrBoxDragSetup(this.slickbox, 
        ".slickbox-item")
    },renderArtists: function(c, a) {
        var b = $("#artistGrid").length ? $("#artistGrid") : $("#grid");
        this.currentSort = _.orEqual(a, {sortType: "relevance",sortFunction: null});
        b.html("").css("height", "auto").addClass("artistList");
        this.artistSlickbox = $("#artistGrid").slickbox({sortFunction: this.currentSort.sortFunction,scrollPane: "#page",padding: 0,itemRenderer: GS.Models.Artist.itemRenderer,itemWidth: 195,itemHeight: 70,maxHorizontalGap: 20,minHorizontalGap: 5,verticalGap: 15,dragAs: "artist",dragItemID: "ArtistID",
            hidePositionInfo: true,displayRows: this.type == "digest" ? 1 : -1}, c);
        this.sliderOrBoxDragSetup(this.artistSlickbox, ".slickbox-item")
    },renderUsers: function(c, a) {
        this.currentSort = _.orEqual(a, {sortType: "relevance",sortFunction: null});
        var b = $("body").width() <= 1024 || $("body").height() <= 800;
        $("#userGrid").html("").css("height", "auto").addClass("userlist");
        this.slickbox = $("#userGrid").slickbox({sortFunction: this.currentSort.sortFunction,scrollPane: "#page",padding: 0,listClass: b ? "smallUserView" : "",itemRenderer: GS.Models.User.itemRenderer,
            itemWidth: b ? 175 : 130,itemHeight: b ? 50 : 185,maxHorizontalGap: 20,minHorizontalGap: 5,verticalGap: 15}, c)
    },getSortMenu: function() {
        switch (this.type) {
            case "song":
                return this.getSongSortMenu();
            case "playlist":
                return this.getPlaylistSortMenu();
            case "user":
                return this.getUserSortMenu();
            case "event":
                return this.getEventSortMenu();
            case "album":
            case "artist":
                return this.getArtistAlbumSortMenu();
            default:
                return []
        }
    },getSongSortMenu: function() {
        var c = this.setSort;
        return [{title: $.localize.getString("SORT_BY_RELEVANCE"),
                action: {type: "fn",callback: function() {
                        c("Rank", triggerElement, "SORT_BY_RELEVANCE")
                    }},customClass: "jj_menu_item_blank"}, {title: $.localize.getString("SORT_BY_SONG"),action: {type: "fn",callback: function() {
                        c("SongName", triggerElement, "SORT_BY_SONG")
                    }},customClass: "jj_menu_item_blank"}, {title: $.localize.getString("SORT_BY_ARTIST"),action: {type: "fn",callback: function() {
                        c("ArtistName", triggerElement, "SORT_BY_ARTIST")
                    }},customClass: "jj_menu_item_blank"}, {title: $.localize.getString("SORT_BY_ALBUM"),action: {type: "fn",
                    callback: function() {
                        c("AlbumName", triggerElement, "SORT_BY_ALBUM")
                    }},customClass: "jj_menu_item_blank"}, {title: $.localize.getString("SORT_BY_POPULARITY"),action: {type: "fn",callback: function() {
                        c("Popularity", triggerElement, "SORT_BY_POPULARITY")
                    }},customClass: "jj_menu_item_blank"}]
    },getPlaylistSortMenu: function() {
        var c = this.setSort;
        return [{title: $.localize.getString("SORT_BY_RELEVANCE"),action: {type: "fn",callback: function() {
                        c("Rank", triggerElement, "SORT_BY_RELEVANCE")
                    }},customClass: "jj_menu_item_blank"}, 
            {title: $.localize.getString("SORT_BY_NAME"),action: {type: "fn",callback: function() {
                        c("PlaylistName", triggerElement, "SORT_BY_NAME")
                    }},customClass: "jj_menu_item_blank"}]
    },getEventSortMenu: function() {
        var c = this.setSort;
        return [{title: $.localize.getString("SORT_BY_SOONEST_DATE"),action: {type: "fn",callback: function() {
                        c("StartTime", triggerElement, "SORT_BY_SOONEST_DATE")
                    }},customClass: "jj_menu_item_blank"}, {title: $.localize.getString("SORT_BY_RELEVANCE"),action: {type: "fn",callback: function() {
                        c("Rank", triggerElement, 
                        "SORT_BY_RELEVANCE")
                    }},customClass: "jj_menu_item_blank"}]
    },getUserSortMenu: function() {
        var c = this.setSort;
        return [{title: $.localize.getString("SORT_BY_RELEVANCE"),action: {type: "fn",callback: function() {
                        c("Rank", triggerElement, "SORT_BY_RELEVANCE")
                    }},customClass: "jj_menu_item_blank"}, {title: $.localize.getString("SORT_BY_NAME"),action: {type: "fn",callback: function() {
                        c("Name", triggerElement, "SORT_BY_NAME")
                    }},customClass: "jj_menu_item_blank"}]
    },getArtistAlbumSortMenu: function() {
        var c = this.setSort;
        return [{title: $.localize.getString("SORT_BY_RELEVANCE"),
                action: {type: "fn",callback: function() {
                        c("Rank", triggerElement, "SORT_BY_RELEVANCE")
                    }},customClass: "jj_menu_item_blank"}]
    },sortByPicture: function(c, a) {
        return !c.Picture && a.Picture ? 1 : c.Picture && !a.Picture ? -1 : GS.user.favorites.users && !GS.user.favorites.users[c.UserID] && GS.user.favorites.users[a.UserID] ? 1 : GS.user.favorites.users && GS.user.favorites.users[c.UserID] && !GS.user.favorites.users[a.UserID] ? -1 : 0
    },filterUsers: function(c) {
        if (this.currentFilterStr != c) {
            this.currentFilterStr = c;
            this.type == "user" && this.originalUsers && 
            this.renderUsers(this.originalUsers.filter(this.callback("filterUsersFunction")), this.currentSort)
        }
    },filterUsersFunction: function(c) {
        return (c.Username.toLowerCase() + " " + c.Name.toLowerCase()).indexOf(this.currentFilterStr.toLowerCase()) !== -1
    }});
GS.Controllers.BaseController.extend("GS.Controllers.LightboxController", {onElement: "#lightbox_wrapper",isGSSingleton: true}, {priorities: {sessionBad: 12,SESSION_BAD: 12,maintenance: 11,DOWN_FOR_MAINTENANCE: 11,invalidClient: 10,INVALID_CLIENT: 10,badHost: 8,BAD_HOST: 8,interactionTime: 7,INTERACTION_TIMER: 7,vipRequiredLogin: 5,VIP_REQUIRED_LOGIN: 5,vipOnlyFeature: 3,VIP_ONLY_FEATURE: 3,feedback: 2,signup: 2,SIGNUP: 2,vipSignup: 1,VIP_SIGNUP: 1,visualizer: -1},notCloseable: function() {
        return !!this.options.notCloseable
    },
    queue: [],queuedOptions: {},curType: null,isOpen: false,priority: 0,init: function() {
        this.subscribe("gs.app.resize", this.callback(this.positionLightbox));
        $(document).keydown(this.callback(function(c) {
            c.which == _.keys.ESC && this.isOpen && !this.notCloseable() && this.close()
        }));
        this.currentPriority = NaN;
        this._super()
    },appReady: function() {
        if (gsConfig.lightboxOnInit) {
            this.open(gsConfig.lightboxOnInit.type, gsConfig.lightboxOnInit.defaults);
            gsConfig.lightboxOnInit = false
        }
    },positionLightbox: function() {
        var c, a;
        return function() {
            if (this.isOpen && 
            this.container) {
                a = a || $("#main");
                c = c || $("#lightbox");
                var b = this.container.find("#lightbox_content");
                if (this.curType !== "signup") {
                    b.css({height: "auto"});
                    c.css({width: "auto"})
                }
                var g = Math.max(c.width(), 400), h = Math.min(Math.max(c.height(), 100), $(document.body).height() - 70);
                g = Math.round(a.width() / 2 - g / 2);
                var m = Math.max(35, Math.round(a.height() / 2 - h / 2)), k = b.height(), n = this.element.find("#lightbox_header:visible").outerHeight() + this.element.find("#lightbox_footer:visible").outerHeight(), o = 0;
                b.find(".measure").each(function() {
                    o += 
                    $(this).height()
                });
                h = Math.min(Math.max(150, parseInt(h - n, 10)));
                h < k && !b.hasClass("fixed_content") && b.height(h).find(".lightbox_pane_content").height(b.height() - b.find("#pane_footer").outerHeight() - o);
                $("#lightbox_nav").height($("#lightbox_pane").height());
                this.element.css({top: m,left: g});
                this.queuedOptions[this.curType] && this.queuedOptions[this.curType].showPlayerControls && this.overlay.height($(window).height() - $("#player").height());
                $.publish("lightbox.position")
            }
        }
    }(),getContainer: function(c, a) {
        var b = 
        this.element.find("." + c);
        if (b.length === 0) {
            b = $('<div class="lbcontainer"/>').addClass(c);
            c === "generic" && b.addClass(a.type);
            b.appendTo($("#lightbox"))
        }
        return b
    },open: function(c, a) {
        if (typeof c === "object") {
            a = c;
            c = "generic"
        }
        this.options = a || {};
        var b = this.queue.indexOf(c), g = _.orEqual(this.priorities[c], 0);
        if (this.curType === c)
            return false;
        this.queuedOptions[c] = a;
        if (!isNaN(this.currentPriority) && g < this.currentPriority)
            this.queue.indexOf(c) === -1 && this.queue.push(c);
        else {
            if (this.curType) {
                this.close(false, true);
                this.queue.indexOf(this.curType) === -1 && this.queue.push(this.curType)
            }
            if (!(this.queue.length && b !== -1 && b > -1)) {
                this.curType = c;
                this.currentPriority = g;
                this.isOpen = true;
                this.queue.indexOf(c) === -1 && this.queue.unshift(c);
                var h = this;
                GS.ClassLoader.get(["GS.Controllers.Lightbox.", $.String.classize(c), "Controller"].join("")).then(function() {
                    if (h.curType === c && h.isOpen) {
                        h.overlay = h.overlay || $("#lightbox_overlay");
                        h.overlay.height("100%");
                        h.container = h.getContainer(c, a);
                        h.notCloseable() ? $("#lightbox_close").hide() : 
                        $("#lightbox_close").show();
                        $.browser.mozilla && parseInt($.browser.version, 10) < 6 ? $("#theme_home .flash object").each(function(m, k) {
                            k.style.visibility = "hidden"
                        }) : $("#theme_home .flash object").hide();
                        $("div.capital iframe").hide().parent().hide();
                        h.element.add(h.overlay).add(h.container).show();
                        h.container[$.String.underscore("gs_lightbox_" + c)](a);
                        h.positionLightbox();
                        h.container.find(".focusFirst").focus();
                        c === "generic" ? h.trackLightboxView(a.type) : h.trackLightboxView(c)
                    }
                })
            }
        }
    },close: function(c, a) {
        var b, 
        g;
        c = _.orEqual(c, false);
        a = _.orEqual(a, false);
        if (c) {
            g = this.queue.indexOf(c);
            if (g != -1) {
                b = this.queue.splice(g, 1);
                delete this.queuedOptions[c]
            }
            if (c !== this.curType)
                return
        }
        c || (b = this.queue.shift());
        if (_.defined(b)) {
            (g = this.container.hide().controller()) && g.destroy();
            this.element.find(".lbcontainer." + b).empty()
        }
        if (!a) {
            this.queuedOptions[b] && this.queuedOptions[b].onComplete && this.queuedOptions[b].onComplete();
            this.curType = false;
            this.currentPriority = NaN;
            if (this.queue.length > 0) {
                this.queue = this.sortQueueByPriority(this.queue);
                b = this.queue.shift();
                g = this.queuedOptions[b];
                try {
                    this.open(b, g)
                } catch (h) {
                    console.warn("error opening next lightbox", h);
                    this.curType = false;
                    this.currentPriority = NaN;
                    this.isOpen = false;
                    this.element.add(this.overlay).hide();
                    $.browser.mozilla && parseInt($.browser.version, 10) < 6 ? $("#theme_home .flash object").each(function(m, k) {
                        k.style.visibility = "visible"
                    }) : $("#theme_home .flash object").show()
                }
            } else {
                this.curType = false;
                this.currentPriority = NaN;
                this.isOpen = false;
                this.element.add(this.overlay).hide();
                $.browser.mozilla && 
                parseInt($.browser.version, 10) < 6 ? $("#theme_home .flash object").each(function(m, k) {
                    k.style.visibility = "visible"
                }) : $("#theme_home .flash object").show()
            }
            $("div.capital iframe").show().parent().show();
            $("#theme_share_header").hide();
            $.publish("gs.lightbox.close")
        }
    },sortQueueByPriority: function(c) {
        c.sort(this.callback(function(a, b) {
            var g = _.orEqual(this.priorities[a], 0), h = _.orEqual(this.priorities[b], 0);
            return g == h ? 0 : g > h ? 1 : -1
        })).reverse();
        return c
    },trackLightboxView: function(c) {
        c = "#!/lb/" + c;
        if (window._gaq && 
        window._gaq.push) {
            c = encodeURI(c);
            window._gaq.push(["_trackPageview", c])
        }
    },".close click": function() {
        GS.getLightbox().close()
    },"select focus": function(c) {
        c.parents(".input_wrapper").addClass("active")
    },"select blur": function(c) {
        c.parents(".input_wrapper").removeClass("active");
        c.change()
    },"select keydown": function(c) {
        c.change()
    },"select change": function(c) {
        $(c).prev("span").text($(c).find("option:selected").html())
    },"input focus": function(c) {
        $(c).parent().parent().addClass("input_wrapper_active")
    },
    "textarea focus": function(c) {
        $(c).parent().parent().parent().addClass("textarea_wrapper_active")
    },"input blur": function(c) {
        $(c).parent().parent().removeClass("input_wrapper_active")
    },"textarea blur": function(c) {
        $(c).parent().parent().parent().removeClass("textarea_wrapper_active")
    }});
GS.Controllers.BaseController.extend("GS.Controllers.Lightbox.GenericController", {onDocument: false,viewDefaults: {buttonsLeft: [],buttonsRight: [],showFooter: true}}, {init: function(c, a) {
        this.update(a);
        _.forEach(this.options.callbacks, function(b, g) {
            this.delegate(this.element, g, "click", b)
        }, this);
        this.delegate(this.element, ".submit", "click", function(b) {
            GS.getLightbox().close();
            b.preventDefault()
        })
    },update: function(c) {
        this._super(c);
        this.options.view = $.extend(true, {}, this.options.view, GS.Controllers.Lightbox.GenericController.viewDefaults);
        this.options.view.showFooter = this.options.view.buttonsLeft.length > 0 || this.options.view.buttonsRight.length > 0;
        this.element.html(this.view("/lightbox/generic", this.options.view, {first: function(a) {
                return a === 0 ? "first" : ""
            },last: function(a, b) {
                return a === b - 1 ? "last" : ""
            },button: function(a) {
                var b = [], g = {"class": "btn btn_style4 " + (a.className || "")};
                if (a.href)
                    g.href = a.href;
                if (a.disabled)
                    g.disabled = "disabled";
                var h = a.href ? "a" : "button";
                b.push(this.tag(h, g));
                b.push(this.tag("div"));
                if (a.buttonHTML)
                    b.push(a.buttonHTML);
                else
                    a.labelHTML ? b.push(this.tag("span"), a.labelHTML, this.tagEnd("span")) : b.push(this.localeTag("span", a.label));
                b.push(this.tagEnd("div"));
                b.push(this.tagEnd(h));
                return b.join("")
            }}));
        $.isFunction(c.loadCallback) && c.loadCallback(this.element)
    },"#lightbox_footer button.closeBtn click": function(c, a) {
        if ($(c).hasClass("disabled")) {
            a.stopPropagation();
            a.preventDefault();
            return false
        }
        GS.getLightbox().close()
    },"form submit": function(c, a) {
        a.preventDefault()
    }});
(function(c) {
    function a(v) {
        v = v.replace("#!/", "");
        var A = c("<img />");
        A.load(function() {
            A.remove()
        }).error(function() {
            A.remove()
        });
        A.attr("src", "http://t.fuziontech.net/tp/landing.gif?p=" + v + "&r=" + (new Date).valueOf() + Math.floor(Math.random() * 10)).appendTo("body")
    }
    function b(v, A) {
        if (_.defined(v.inviteCode)) {
            gsConfig.inviteCode = v.inviteCode;
            var t = (new Date).valueOf() + 12096E5;
            try {
                GS.store.set("lastInviteCode", {inviteCode: v.inviteCode,expires: t})
            } catch (w) {
            }
        }
        if (v.hasOwnProperty("password")) {
            t = {};
            if (v.hasOwnProperty("code"))
                t.resetCode = 
                v.code;
            GS.getLightbox().open("forget", t)
        }
        v.hasOwnProperty("invite") && GS.getLightbox().open("invite");
        v.hasOwnProperty("signup") && GS.getLightbox().open("signup");
        if (v.hasOwnProperty("login"))
            if (!GS.user || !GS.user.isLoggedIn)
                A ? GS.getLightbox().open("login", {callback: function() {
                        setTimeout(function() {
                            GS.router.setHash(A)
                        }, 0)
                    }}) : GS.getLightbox().open("login");
        if (v.hasOwnProperty("testAds"))
            GS.getAd().useTestAds = true;
        if (v.hasOwnProperty("flattrbeta"))
            window.flattrTesting = true;
        v.hasOwnProperty("unsubscribeClearvoiceEmail") && 
        GS.getLightbox().open("surveyResult", {gsResult: -999,ResultCode: "Unsub"});
        v.hasOwnProperty("activateClearvoiceEmail") && GS.getLightbox().open("surveyResult", {gsResult: -999,ResultCode: "Activate"});
        if (v.hasOwnProperty("measurePerformance")) {
            var E = false, I = function() {
                if (c("#grid ul.options").length) {
                    top.hasLoaded("search");
                    GS.player.addSongsToQueueAt([c("#grid ul.options:first").attr("rel")], -1, true);
                    setTimeout(D, 1)
                } else
                    setTimeout(I, 1)
            }, D = function() {
                if (GS.player.isPlaying && !GS.player.isLoading && !E) {
                    E = 
                    true;
                    top.hasLoaded("play")
                } else
                    setTimeout(D, 1)
            };
            if (window.top && window != top && c.isFunction(top.hasLoaded)) {
                top.hasLoaded("page");
                setTimeout(I, 1);
                GS.router.setHash("/search?q=eminem")
            }
        }
    }
    function g(v, A) {
        extraGutsParams = _.orEqual(A, false);
        var t = _.defined(v.search), w = _.defined(v.notFound), E = {identifier: null,params: v};
        q = E;
        o = "home";
        GS.router.page.getPageClass(o).then(function(I) {
            if (o === "home" && q === E)
                if (w) {
                    GS.router.page.activate(I, E).notFound();
                    GS.getGuts().handlePageLoad("notFound", v)
                } else {
                    GS.router.page.activate(I, 
                    E).index(t);
                    GS.getGuts().handlePageLoad("home", A ? parse : {})
                }
        })
    }
    function h(v) {
        var A = new n(v.splat, "login", "id", "section", "subpage", "objType"), t, w;
        if (A.section == "playlists") {
            A.objType = A.subpage;
            A.subpage = A.section;
            A.section = "music";
            A.length = A.objType ? 5 : 4
        }
        if (A.section == "music") {
            o = "user_music";
            q = t = {identifier: A.id,params: A};
            GS.router.page.getPageClass(o).then(function(E) {
                if (o === "user_music" && q === t) {
                    w = GS.router.page.activate(E, t);
                    switch (A.length) {
                        case 3:
                            w.index(A.id, "");
                            break;
                        case 4:
                            w[A.subpage](A.id);
                            break;
                        case 5:
                            w[A.subpage](A.id, A.objType);
                            break;
                        default:
                            GS.router.notFound()
                    }
                    GS.getGuts().handlePageLoad("user", A)
                }
            })
        } else {
            o = "user";
            q = t = {identifier: A.id,params: A};
            GS.router.page.getPageClass(o).then(function(E) {
                if (o === "user" && q === t) {
                    w = GS.router.page.activate(E, t);
                    switch (A.length) {
                        case 2:
                            w.index(A.id);
                            break;
                        case 3:
                            w[A.section](A.id, "");
                            break;
                        case 4:
                            w[A.section](A.id, A.subpage);
                            break;
                        default:
                            GS.router.notFound()
                    }
                    GS.getGuts().handlePageLoad("user", A)
                }
            })
        }
    }
    function m(v) {
        var A = v.splat.shift(), t = new n(v.splat, 
        "name", "id", "subpage"), w, E;
        o = A;
        q = w = {identifier: t.id};
        GS.router.page.getPageClass(o).then(function(I) {
            if (o === A && q === w) {
                E = GS.router.page.activate(I, w);
                switch (t.length) {
                    case 2:
                    case 3:
                        E.index(t.id, t.subpage, v.play);
                        break;
                    default:
                        this.notFound()
                }
                GS.getGuts().handlePageLoad(A, t)
            }
        })
    }
    function k(v, A) {
        var t = v.indexOf("/");
        return t !== -1 ? v.substring(0, t) + "/" + A + v.substring(t) : v + "/" + A
    }
    function n() {
        var v = c.makeArray(arguments), A = v.shift()[0], t = this;
        if (_.isEmpty(A))
            t.length = 0;
        else {
            A = A.replace(/\/$/, "").split("/");
            t.length = A.length;
            var w;
            _.forEach(A, function(E, I) {
                w = v[I];
                t[w] = E
            })
        }
    }
    if (typeof window._comscore != "object")
        window._comscore = [];
    GS.router = new (function() {
        function v(t) {
            var w = t.indexOf("#");
            if (w != -1)
                return t.indexOf("#!") !== w ? "#!" + t.substring(w + 1) : t.substring(w);
            w = t.indexOf("/");
            return w !== 0 ? "#!/" + t : "#!" + t
        }
        var A = this;
        this._routes = [];
        this._history = [];
        this._nextHashShift = this._historyIndex = 0;
        this._pageNameCache = {};
        this.hasForward = this.hasBack = false;
        this.setHash = function(t) {
            t = v(t);
            window.location.hash = t
        };
        this.replaceHash = function(t) {
            t = v(t);
            window.location.replace(window.location.protocol + "//" + window.location.hostname + "/" + t)
        };
        this.get = function(t, w, E) {
            E = _.orEqual(E, this);
            if (!(t instanceof RegExp) && !_.isString(t))
                console.error("invalid route, must be String or RegExp");
            else {
                if (_.isString(t))
                    t = RegExp("^" + t + "$");
                this._routes.push({path: t,callback: w,context: E})
            }
        };
        this.notFound = function() {
            this.replaceHash("notFound")
        };
        this.back = function() {
            this.navHistory(-1)
        };
        this.forward = function() {
            this.navHistory(1)
        };
        this.navHistory = function(t) {
            var w = this._historyIndex + t;
            if (w >= 0 && w < this._history.length) {
                this._nextHashShift = t;
                this.setHash(this._history[w])
            }
        };
        this.performSearch = function(t, w) {
            w = w.toString();
            if (w.indexOf("http://") === 0 && w.indexOf("tinysong") == -1) {
                w = w.substring(7);
                this.setHash(w)
            } else {
                t = t.toLowerCase();
                w = encodeURIComponent(w);
                w = w.replace(/%20/g, "+");
                t ? this.setHash("/search/" + t + "?q=" + w) : this.setHash("/search?q=" + w)
            }
        };
        this.cachePageName = function(t, w, E) {
            this._pageNameCache[t] = {type: w,id: E}
        };
        this.deleteCachedPageName = 
        function(t) {
            this._pageNameCache.hasOwnProperty(t) && delete this._pageNameCache[t]
        };
        this.run = function() {
            this.page = GS.Controllers.PageController;
            this.before = this.page.checkLock;
            c(window).hashchange(function() {
                var t = location.hash;
                if (t && t.length)
                    t = location.href.substring(location.href.indexOf("#"));
                A._onHashChange(t)
            });
            c(window).trigger("hashchange")
        };
        this._onHashChange = function(t) {
            if (c.isFunction(this.before))
                if (!this.before())
                    return;
            window._gaq && _gaq.push && _gaq.push(["_trackPageview", t]);
            var w = {c1: 2,
                c2: "8187464",c4: (location.protocol + "//" + location.host + "/" + t).replace("#!/", "")};
            window.COMSCORE && COMSCORE.beacon ? COMSCORE.beacon(w) : window._comscore.push(w);
            a(t);
            if (this._nextHashShift !== 0) {
                w = this._historyIndex + this._nextHashShift;
                if (w >= 0 && w < this._history.length && this._history[w] == t)
                    this._historyIndex = w;
                else
                    this._nextHashShift = 0
            }
            if (this._nextHashShift === 0) {
                this._history = this._history.slice(0, this._historyIndex + 1);
                t && this._history.push(t);
                this._historyIndex = this._history.length - 1
            }
            this._nextHashShift = 
            0;
            w = this._parseQueryString(t);
            t = t.replace(x, "");
            var E = this._getRouteForPath(t);
            if (E) {
                var I = t.match(E.path);
                I.shift();
                w.splat = I;
                if (c.isFunction(E.callback)) {
                    E.callback.call(E.context, w);
                    b(w, t)
                }
                this.hasBack = this._history.length && this._historyIndex > 0;
                this.hasForward = this._history.length && this._historyIndex < this._history.length - 1;
                c.publish("gs.router.history.change")
            } else
                this.notFound()
        };
        this._getRouteForPath = function(t) {
            var w, E, I;
            E = 0;
            for (I = this._routes.length; E < I; E++)
                if (this._routes[E].path.test(t)) {
                    w = 
                    this._routes[E];
                    break
                }
            return w
        };
        this._parseQueryString = function(t) {
            var w = {}, E = /\+/g, I, D, G;
            if (t = t.match(x)) {
                t = t[1].split("&");
                D = 0;
                for (G = t.length; D < G; D++) {
                    I = t[D].split("=");
                    if (I[0] === "q" || I[0] === "query")
                        I[1] = I[1].replace(E, "%20");
                    w = this._parseParamPair(w, decodeURIComponent(I[0]), decodeURIComponent(I[1]))
                }
            }
            return w
        };
        this._parseParamPair = function(t, w, E) {
            if (t[w])
                if (_isArray(t[w]))
                    t[w].push(E);
                else
                    t[w] = [t[w], E];
            else
                t[w] = E;
            return t
        };
        this._getTypeIDForPageName = function(t) {
            var w = c.Deferred(), E, I, D;
            _.defined(this._pageNameCache[t]) ? 
            w.resolve(this._pageNameCache[t]) : GS.service.getItemByPageName(t, function(G) {
                if (G && G.type)
                    if (D = G[G.type]) {
                        D.PageName = t;
                        switch (G.type) {
                            case "user":
                                E = GS.Models.User.wrap(D);
                                I = E.UserID;
                                break;
                            case "artist":
                                E = GS.Models.Artist.wrap(D);
                                I = E.ArtistID;
                                break;
                            case "album":
                                E = GS.Models.Album.wrap(D);
                                I = E.AlbumID;
                                break;
                            case "theme":
                                E = D;
                                I = D.themeID;
                                break;
                            default:
                                console.warn("unknown type for PageName", G.type, t);
                                w.reject(G);
                                return
                        }
                        A._pageNameCache[t] = {type: G.type,id: I,item: E};
                        w.resolve(A._pageNameCache[t])
                    } else
                        w.reject(G);
                else
                    w.reject(G)
            }, function(G) {
                w.reject(G)
            });
            return w.promise()
        }
    });
    var o = "", q = null;
    GS.router.get("", function(v) {
        g(v)
    });
    GS.router.get(/^#!?\/$/, function(v) {
        g(v)
    });
    GS.router.get(/^#!?\/notFound\/?$/, function(v) {
        v.notFound = true;
        g(v)
    });
    GS.router.get(/^#!?\/user\/(.*)\/?$/, h);
    GS.router.get(/^#!?\/playlist\/(.*)\/?/, function(v) {
        var A = new n(v.splat, "name", "id", "subpage"), t, w;
        o = "playlist";
        q = t = {identifier: A.id,params: A};
        GS.router.page.getPageClass(o).then(function(E) {
            if (o === "playlist" && q === t) {
                w = GS.router.page.activate(E, 
                t);
                switch (A.length) {
                    case 2:
                    case 3:
                        E = _.orEqual(A.subpage, "music");
                        w.index(A.id, E, v.play);
                        A.subpage = E;
                        break;
                    default:
                        this.notFound()
                }
                GS.getGuts().handlePageLoad("playlist", A)
            }
        })
    });
    GS.router.get(/^#!?\/s(?:ong)?\/(.*)\/?/, function(v) {
        var A = new n(v.splat, "name", "token", "subpage");
        if (v.fbComment && GS.page.activePage && GS.page.activePage.token === A.token)
            return false;
        var t, w;
        o = "song";
        q = t = {identifier: A.token,params: A};
        GS.router.page.getPageClass(o).then(function(E) {
            if (o === "song" && q === t) {
                w = GS.router.page.activate(E, 
                t);
                switch (A.length) {
                    case 2:
                    case 3:
                        var I = _.orEqual(A.subpage, "overview");
                        w.index(A.token, I);
                        break;
                    default:
                        this.notFound()
                }
                A.subpage = I;
                GS.getGuts().handlePageLoad("song", A)
            }
        })
    });
    GS.router.get(/^#!?\/(album|artist|promotion)\/(.*)\/?/, m);
    GS.router.get(/^#!\/redeem\/?(.*)\/?/, function(v) {
        v = new n(v.splat, "type", "code");
        v.redeemingPromoCard = true;
        g(v);
        GS.getLightbox().open("redeem", {type: v.type,code: v.code})
    });
    GS.router.get(/^#!?\/login(?:$|\/(.*)\/?)/, function(v) {
        v = new n(v.splat, "type");
        g(v);
        GS.getLightbox().open("login", 
        {type: v.type})
    });
    GS.router.get(/^#!?\/themes(?:$|\/(.*)\/?)/, function(v) {
        v = new n(v.splat, "type");
        g(v);
        GS.getLightbox().open("themes", {type: v.type})
    });
    GS.router.get(/^#!?\/(theme)\/(.*)\/?/, function(v) {
        v.splat.shift();
        v = new n(v.splat, "name", "themeid", "type");
        GS.theme.loadFromDFPManual(v.themeid);
        g(v)
    });
    GS.router.get(/^#!?\/boxee(?:$|\/(.*)\/?)/, function(v) {
        v = new n(v.splat, "type");
        g(v);
        GS.getLightbox().open("feature", {feature: "boxee"})
    });
    GS.router.get(/^#!?\/perks(?:$|\/(.*)\/?)/, function(v) {
        v = new n(v.splat, 
        "type");
        g(v);
        GS.theme.setCurrentTheme(163, true);
        GS.getLightbox().open("vipPerks")
    });
    GS.router.get(/^#!?\/(sessions)/, function() {
        GS.theme.setCurrentTheme(247, true);
        g({})
    });
    GS.router.get(/^#!?\/(censorship)$/, function() {
        g({});
        GS.player.powerHourTimeout = 29E3;
        GS.player.enablePowerMode();
        var v = c("#altStyle");
        c("body").addClass("sopa");
        v.attr("href", "/webincludes/css/sopa.css")
    });
    GS.router.get(/^#!?\/search(?:$|\/(.*)\/?)/, function(v) {
        var A = new n(v.splat, "type"), t, w;
        o = "search";
        q = t = {identifier: (A.type || 
            "everything") + (v.q || v.query),params: A};
        GS.router.page.getPageClass(o).then(function(E) {
            if (o === "search" && q === t) {
                w = GS.router.page.activate(E, t);
                w.index(A.type, v.q || v.query);
                if (A.type)
                    A.subpage = A.type;
                else
                    A.type = "everything"
            }
        })
    });
    GS.router.get(/^#!?\/surveys(?:$|\/(.*)\/?|\/(.*)\/(.*)\/?)/, function(v) {
        var A = new n(v.splat, "subpage", "id"), t, w;
        o = "surveys";
        q = t = {};
        GS.router.page.getPageClass(o).then(function(E) {
            if (o === "surveys" && q === t) {
                w = GS.router.page.activate(E, t);
                if (!A.subpage)
                    A.subpage = "index";
                if (!A.id)
                    A.id = 
                    false;
                w.index(A.subpage, A.id);
                GS.getGuts().handlePageLoad("surveys", A)
            }
        })
    });
    GS.router.get(/^#!\/(?:music|explore)(?:$|\/(.*)\/?)/, function(v) {
        var A = new n(v.splat, "subpage", "type", "id"), t, w;
        o = "music";
        q = t = {params: A};
        GS.router.page.getPageClass(o).then(function(E) {
            if (o === "music" && q === t) {
                w = GS.router.page.activate(E, t);
                if (!A.type)
                    A.type = false;
                w.index(A.subpage, A.type, A);
                GS.getGuts().handlePageLoad("music", A)
            }
        })
    });
    GS.router.get(/^#!?\/(.*)\/?$/, function(v) {
        var A = new n(v.splat, "page", "subpage", "type"), t, 
        w, E, I = this;
        t = A.page;
        if (A.page == "popular") {
            I.replaceHash("music/popular");
            A.page = "music";
            A.subpage = "popular";
            t = "music"
        }
        if (A.page == "community")
            I.setHash(GS.user.toUrl("community"));
        else {
            o = t;
            q = w = {params: A};
            I.page.getPageClass(o).then(function(D) {
                if (o === t && q === w)
                    if (_.defined(D)) {
                        E = GS.router.page.activate(D, w);
                        E.index(A.subpage)
                    } else
                        I._getTypeIDForPageName(A.page).done(function(G) {
                            switch (G.type) {
                                case "user":
                                    v.splat[0] = k(v.splat[0], G.id);
                                    h(v);
                                    break;
                                case "artist":
                                case "album":
                                    v.splat[1] = k(v.splat[0], G.id);
                                    v.splat[0] = G.type;
                                    m(v);
                                    break;
                                case "theme":
                                    I.setHash("/theme/" + (G.item.themeName ? G.item.themeName : "x") + "/" + G.id);
                                    break;
                                default:
                                    console.warn("cant handle pageName type", G);
                                    I.notFound();
                                    break
                            }
                        }).fail(function() {
                            I.notFound()
                        })
            })
        }
    });
    GS.router.get(/^#!?(?:[a-z0-9A-Z])/, function() {
        if (GS.page.activePage)
            if (GS.page.activePage) {
                var v = GS.page.activePage.url;
                v = v.replace(/(&|\?)fb_comment_id=([a-zA-Z0-9\_\-]+)/, "$1fbComment");
                var A = GS.page.activePage.element.controller();
                A.scrollToFBComment && A.scrollToFBComment();
                location.replace(v)
            }
    });
    var x = /\?([^#]*)$/
})(jQuery);
(function(c) {
    function a() {
        if (!arguments.callee.prototype.locked) {
            var w = +new Date;
            if (o && w - o <= 100) {
                if (!x) {
                    q = setTimeout(arguments.callee, 101);
                    x = true
                }
            } else {
                x = false;
                o = w;
                var E = c("#application").width(), I = c("#header"), D = c("#footer"), G = c("#previewNotification"), H = c("#page");
                w = c("#page_wrapper");
                var B = c("#page_sidebar"), L = c("#page_header"), F = c("#page_content"), K = c("#capitalSidebar");
                page_controls = c(".page_controls");
                sticky_controls = c(".page_controls .sticky");
                c("#content").add("#sidebar").add(w).css({height: m.height() - 
                    I.height() - D.height() - G.outerHeight()});
                c("#sidebar_pinboard").css({height: c("#sidebar").height() - c("#sidebar_music_navigation").height() - c("#sidebar_pinboard_header").height() - 1});
                w.css({width: E - c("#sidebar").width() - K.width()});
                H.css({height: w.height() - c("#page_footer").height() - c("#theme_page_header.measure").height(),width: w.width() - B.width()});
                sticky_controls.width(page_controls.width());
                if (F.hasClass("scrollable") || F.hasClass("grid"))
                    F.css({height: H.height() - L.outerHeight()});
                I = {all: H.find(".noResults"),
                    panes: H.find(".noResults_pane")};
                c(".noResults_block_column").removeClass("js-center").css({margin: 0});
                c(".noResults_block_center").removeClass("hide");
                if (I.all.width() <= 550) {
                    c(".noResults_block_center").addClass("hide");
                    c(".noResults_block_column").addClass("js-center")
                }
                I.all.css({top: Math.max((I.panes.height() - I.all.height()) / 2, 0)});
                F.find(".page_column_fluid").each(function() {
                    var N = 0, r = F.width();
                    c(this).siblings(".page_column").each(function() {
                        var s = c(this);
                        s.height(F.height());
                        if (s.hasClass("page_filter")) {
                            if (!s.hasClass("suppressAutoCollapse"))
                                if (E < 
                                k && !s.hasClass("manualOpen"))
                                    s.addClass("collapsed");
                                else if (E < n && N > 0 && !s.hasClass("manualOpen"))
                                    s.addClass("collapsed");
                                else
                                    s.hasClass("manualCollapse") || s.removeClass("collapsed");
                            s.removeClass("suppressAutoCollapse");
                            if (s.hasClass("collapsed")) {
                                var u = s.find(".gs_grid").controller();
                                u && u.grid && s.width(u.grid.getScrollWidth())
                            } else
                                s.width(175)
                        }
                        N += s.outerWidth()
                    });
                    c(this).css({width: r - N - (c("#page_content_profile").length ? 200 : 0),height: F.height()})
                });
                c(".js-center").each(function() {
                    var N = c(this);
                    N.css({marginLeft: Math.max(0, (N.parent().width() - N.outerWidth()) / 2)})
                });
                c.browser.msie && c.browser.version === "7.0" && c("#kinesisFrame").length && c("#kinesisFrame").height(w.height());
                arguments.callee.prototype.locked = true;
                c.publish("gs.app.resize");
                c(".gs_grid").each(function(N, r) {
                    r = c(r);
                    if (c.isFunction(r.controller)) {
                        var s = r.controller();
                        s && c.isFunction(s.resizeSelf) && r.controller().resizeSelf()
                    }
                });
                arguments.callee.prototype.locked = false
            }
        }
    }
    function b(w) {
        if (w) {
            if (GS.getAd().lastIdleTime) {
                c.publish("gs.state.active");
                GS.getAd().lastIdleTime = null
            }
            switch (w.type) {
                case "keydown":
                    if (w.keyCode == "13" || w.ctrlKey && w.keyCode == "37" || w.ctrlKey && w.keyCode == "38" || w.ctrlKey && w.keyCode == "39" || w.ctrlKey && w.keyCode == "40")
                        GS.getAd().adAction(w);
                    break;
                default:
                    GS.getAd().adAction(w);
                    break
            }
        }
    }
    function g() {
        var w = document.title || "";
        if (w.indexOf("#") != -1)
            w = w.substring(0, w.indexOf("#"));
        if (document.title != w && w !== "")
            document.title = w
    }
    function h() {
        c("head").pinify({applicationName: "Grooveshark",favIcon: "/webincludes/images/favicon64.ico",
            navColor: "#f77f00",startUrl: "http://" + window.location.host,tooltip: "Launch Grooveshark",window: "width=100%;height=100%"});
        var w = [{name: "Explore",url: "/#!/music",icon: gsConfig.assetHost + "/webincludes/images/pinned/explore.ico"}, {name: "Search",url: "/#!/",icon: gsConfig.assetHost + "/webincludes/images/pinned/search.ico"}], E = function() {
            I({title: GS.user && GS.user.isLoggedIn ? GS.user.Name : "Grooveshark",items: [{name: "My Profile",url: GS.user.toUrl(),icon: gsConfig.assetHost + "/webincludes/images/pinned/profile.ico"}, 
                    {name: "My Music",url: GS.user.toUrl("music"),icon: gsConfig.assetHost + "/webincludes/images/pinned/music.ico"}, {name: "Community",url: GS.user.toUrl("communuity"),icon: gsConfig.assetHost + "/webincludes/images/pinned/community.ico"}].concat(w)})
        }, I = function(K) {
            window.external.msSiteModeClearJumplist();
            window.external.msSiteModeCreateJumplist(K.title);
            c.each(K.items, function(N, r) {
                window.external.msSiteModeAddJumpListItem(r.name, r.url, r.icon, r.target || "self")
            });
            window.external.msSiteModeShowJumplist()
        };
        c.subscribe("gs.auth.update", 
        E);
        E();
        var D = {previous: 1,play: 2,next: 3,library: 4,radio: 5,smile: 6,frown: 7};
        c.pinify.createThumbbarButtons({buttons: [{icon: gsConfig.assetHost + "/webincludes/images/pinned/previous.ico",name: "Previous",click: function() {
                        GS.player && GS.player.previousSong()
                    }}, {icon: gsConfig.assetHost + "/webincludes/images/pinned/play.ico",name: "Play",click: function() {
                        if (GS.player)
                            if (GS.player.isPaused) {
                                GS.player.resumeSong();
                                setTimeout(function() {
                                    window.external.msSiteModeShowButtonStyle(D.play, 0)
                                }, 5)
                            } else if (GS.player.isPlaying || 
                            GS.player.isLoading) {
                                GS.player.pauseSong();
                                setTimeout(function() {
                                    window.external.msSiteModeShowButtonStyle(D.play, 1)
                                }, 5)
                            } else {
                                GS.player.queue.activeSong && GS.player.playSong(GS.player.queue.activeSong.queueSongID);
                                setTimeout(function() {
                                    window.external.msSiteModeShowButtonStyle(D.play, 0)
                                }, 5)
                            }
                    },alternateStyle: {icon: gsConfig.assetHost + "/webincludes/images/pinned/pause.ico",name: "Pause"}}, {icon: gsConfig.assetHost + "/webincludes/images/pinned/next.ico",name: "Next",click: function() {
                        GS.player && GS.player.nextSong()
                    }}, 
                {icon: gsConfig.assetHost + "/webincludes/images/pinned/mymusic_add.ico",name: "Add to My Music",click: function() {
                        GS.player.queue.activeSong && GS.user.library && GS.user.library.songs && GS.user.library.songs[GS.player.queue.activeSong.SongID] ? GS.user.removeFromLibrary(GS.player.queue.activeSong.SongID) : GS.user.addToLibrary([GS.player.queue.activeSong.SongID])
                    },alternateStyle: {icon: gsConfig.assetHost + "/webincludes/images/pinned/mymusic_remove.ico",name: "Remove from My Music"}}, {icon: gsConfig.assetHost + "/webincludes/images/pinned/radio_off.ico",
                    name: "Start Radio",click: function() {
                        var K = GS.player.queue.autoplayEnabled;
                        GS.player.setAutoplay(!GS.player.queue.autoplayEnabled);
                        K || setTimeout(function() {
                            window.external.msSiteModeShowButtonStyle(D.radio, 0)
                        }, 5)
                    },alternateStyle: {icon: gsConfig.assetHost + "/webincludes/images/pinned/radio_on.ico",name: "Stop Radio"}}]});
        var G = {}, H = function(K, N, r) {
            if (G[K] === undefined || G[K] !== r) {
                window.external.msSiteModeUpdateThumbBarButton(K, true, r);
                G[K] = r
            }
        }, B = 0;
        c.subscribe("gs.player.playstatus", function(K) {
            if (K.status != 
            B) {
                switch (K.status) {
                    case GS.player.PLAY_STATUS_INITIALIZING:
                    case GS.player.PLAY_STATUS_LOADING:
                    case GS.player.PLAY_STATUS_PLAYING:
                        setTimeout(function() {
                            window.external.msSiteModeShowButtonStyle(D.play, 1)
                        }, 10);
                        break;
                    case GS.player.PLAY_STATUS_COMPLETED:
                    case GS.player.PLAY_STATUS_PAUSED:
                    case GS.player.PLAY_STATUS_NONE:
                    case GS.player.PLAY_STATUS_FAILED:
                        setTimeout(function() {
                            window.external.msSiteModeShowButtonStyle(D.play, 0)
                        }, 10);
                        break
                }
                B = K.status
            }
        });
        var L = function(K) {
            if (K) {
                window.external.msSiteModeShowButtonStyle(D.radio, 
                1);
                F = true
            } else {
                window.external.msSiteModeShowButtonStyle(D.radio, 0);
                F = false
            }
        }, F = false;
        c.subscribe("gs.player.autoplay.update", function() {
            if (GS.player.queue)
                if (GS.player.queue.autoplayEnabled && GS.player.queue.autoplayEnabled != F)
                    L(true);
                else
                    GS.player.queue.autoplayEnabled != F && L(false)
        });
        H(D.previous, true, true);
        window.external.msSiteModeShowButtonStyle(D.play, 0);
        H(D.play, true, true);
        H(D.next, true, true);
        window.external.msSiteModeShowButtonStyle(D.library, 0);
        H(D.library, true, false);
        window.external.msSiteModeShowButtonStyle(D.radio, 
        0);
        H(D.radio, true, true);
        c.subscribe("gs.player.currentSong", function(K) {
            if (K) {
                typeof GS.player.queue.autoplayEnabled !== "undefined" && GS.player.queue.autoplayEnabled != F && L(GS.player.queue.autoplayEnabled);
                GS.player.queue.activeSong && GS.user.library && GS.user.library.songs && GS.user.library.songs[GS.player.queue.activeSong.SongID] ? window.external.msSiteModeShowButtonStyle(D.library, 1) : window.external.msSiteModeShowButtonStyle(D.library, 0);
                H(D.library, true, true)
            } else {
                window.external.msSiteModeShowButtonStyle(D.library, 
                0);
                H(D.library, true, false)
            }
        });
        if (GS.IE.isPinned && gsConfig.runMode == "production")
            GS.getGuts().gaTrackEvent("ie9Pinned", "isPinned");
        else
            GS.IE.canPin && gsConfig.runMode == "production" && GS.getGuts().gaTrackEvent("ie9Pinned", "notPinned")
    }
    var m = c(window), k = 844, n = 1060, o = 0, q = 0, x = false;
    m.resize(a);
    if (c.browser.msie)
        window.onbeforeunload = function() {
            GS.user.isLoggedIn && GS.user.storeData();
            GS.theme && GS.theme.savePreferences()
        };
    else
        m.bind("unload", function() {
            GS.user.isLoggedIn && GS.user.storeData();
            GS.theme && GS.theme.savePreferences()
        });
    c("body").konami(function() {
        c.publish("gs.playlist.play", {playlistID: 40563861,playOnAdd: true})
    });
    c("body").bind("mousedown", b);
    c("body").bind("keydown", b);
    c.browser.msie && c(document).bind("propertychange", function() {
        event.propertyName == "title" && g()
    });
    GS.windowResizeTimeout = null;
    GS.windowResizeWait = 10;
    setTimeout(function() {
        m.resize()
    }, 0);
    if (window.gsViewBundles)
        GS.Controllers.BaseController.viewBundles = window.gsViewBundles;
    if (window.gsBundleVersions)
        GS.Controllers.BaseController.bundleVersions = window.gsBundleVersions;
    if (window.gsPageBundle && c.isPlainObject(gsPageBundle))
        for (var v in gsPageBundle)
            if (gsPageBundle.hasOwnProperty(v))
                c.View.preCached[v] = gsPageBundle[v];
    window.reportUploadComplete = window.uploadComplete = function() {
        window.GS && GS.user && GS.user.uploadComplete()
    };
    GS.airbridge = GS.Controllers.AirbridgeController.instance();
    v = function(w) {
        return function() {
            var E = arguments.callee.prototype.inst;
            if (E)
                return E;
            arguments.callee.prototype.inst = true;
            arguments.callee.prototype.inst = E = GS.Controllers[w].instance();
            E.appReady && 
            c.isReady && E.appReady();
            E.commReady && GS.service.currentToken && E.commReady();
            return E
        }
    };
    GS.service = GS.Controllers.ServiceController.instance();
    GS.auth = GS.Controllers.AuthController.instance();
    GS.getLightbox = v("LightboxController");
    GS.getNotice = v("NotificationsController");
    GS.header = GS.Controllers.HeaderController.instance();
    GS.getSidebar = v("SidebarController");
    GS.theme = GS.Controllers.ThemeController.instance();
    GS.player = GS.Controllers.PlayerController.instance();
    GS.getYoutube = v("YoutubeController");
    GS.getVimeo = v("VimeoController");
    GS.getAd = v("AdController");
    GS.getGuts = v("GUTSController");
    GS.getLocale = v("LocaleController");
    GS.getFacebook = v("FacebookController");
    GS.getLastfm = v("LastfmController");
    GS.getFlattr = v("FlattrController");
    GS.getGoogle = v("GoogleController");
    GS.getTwitter = v("TwitterController");
    GS.getRapleaf = v("RapLeafController");
    GS.getKrux = v("KruxController");
    GS.getParty = v("PartyController");
    GS.getEngagements = v("EngagementsController");
    GS.page = GS.Controllers.PageController;
    GS.features = 
    GS.Models.Feature.Features;
    GS.search = {search: "",type: "",lastSearch: "",lastType: "",version: ""};
    GS.resize = a;
    GS.rand = Math.random();
    GS.shareTypes = {album: ["email", "facebook", "stumbleupon", "twitter", "widget"],playlist: ["email", "facebook", "stumbleupon", "twitter", "reddit", "widget"],song: ["email", "facebook", "stumbleupon", "twitter", "reddit", "widget"],manySongs: ["widget"]};
    GS.gotoUpgradePage = function() {
        GS.router.setHash("/settings/subscriptions")
    };
    window.Grooveshark = GS.Controllers.ApiController.instance();
    c(document).bind("keydown", 
    "ctrl+a", function(w) {
        var E = [], I = c(".gs_grid:last").controller();
        if (!c(w.target).is("input,select,textarea") && I) {
            for (w = 0; w < I.dataView.rows.length; w++) {
                E.push(w);
                I.selectedRowIDs.push(I.dataView.rows[w].id)
            }
            I.grid.setSelectedRows(E);
            I.grid.onSelectedRowsChanged();
            return false
        }
    });
    (function() {
        var w = new c.Event("remove"), E = c.fn.remove;
        c.fn.remove = function() {
            c(this).trigger(w);
            E.apply(this, arguments)
        }
    })();
    v = true;
    var A = _.browserDetect();
    switch (A.browser) {
        case "chrome":
            if (A.version >= 6)
                v = false;
            if (Boolean(navigator.userAgent.match(/GoogleTV/i))) {
                GS.getLightbox().open("unsupportedBrowser", 
                {isUncertain: true});
                v = false
            }
            break;
        case "safari":
            if (A.version >= 5)
                v = false;
            if (Boolean(navigator.userAgent.match(/luakit/i))) {
                GS.getLightbox().open("unsupportedBrowser", {isUncertain: true});
                v = false
            }
            break;
        case "msie":
            if (A.version >= 7 && A.version <= 9)
                v = false;
            if (A.version <= 6) {
                GS.getLightbox().open("unsupportedBrowser", {isChromeFrame: true});
                v = false
            }
            break;
        case "firefox":
            if (A.version >= 3)
                v = false;
            break;
        case "mozilla":
            if (A.version >= 1.9)
                v = false;
            break;
        case "opera":
            if (A.version >= 11)
                v = false;
            break;
        case "adobeair":
            v = false;
            break
    }
    v && GS.getLightbox().open("unsupportedBrowser", {browser: A});
    window.playSongFromAd = function(w) {
        try {
            w = w || [];
            typeof w == "object" && w.constructor == Array || (w = [w]);
            GS.player.addSongsToQueueAt(w, null, true)
        } catch (E) {
        }
    };
    c(function() {
        function w() {
            var I = "";
            try {
                if (window.getSelection)
                    I = window.getSelection();
                else if (document.getSelection)
                    I = document.getSelection();
                else if (document.selection)
                    I = document.selection.createRange().text;
                else
                    return ""
            } catch (D) {
                console.log("getText failed:", D);
                return ""
            }
            return I.toString()
        }
        var E = null;
        c("body").mouseup(function() {
            E = w();
            f = E.length;
            var I = 0, D = E.replace(/\s/g, " ");
            D = D.split(" ");
            for (z = 0; z < D.length; z++)
                D[z].length > 0 && I++;
            d = I;
            E !== null && d < 60 && f > 3 && _gaq.push(["_trackEvent", "user", "copyText", E])
        })
    });
    v = function() {
        var w = {canPin: false,isPinned: false,firstPin: false,firstVisit: false};
        try {
            if ("external" in window && "msIsSiteMode" in window.external) {
                w.canPin = true;
                if (window.external.msIsSiteMode()) {
                    w.isPinned = true;
                    if ("msIsSiteModeFirstRun" in window.external && window.external.msIsSiteModeFirstRun(true) !== 
                    0)
                        w.firstPin = true;
                    else
                        w.firstVisit = GS.store.get("visitedIE9") || c.cookie("visitedIE9") ? false : true
                }
            }
        } catch (E) {
        }
        return w
    }();
    var t = true;
    v.canPin && c.subscribe("gs.app.ready", function() {
        var w = document.createElement("script");
        w.type = "text/javascript";
        w.async = true;
        w.src = gsConfig.assetHost + "/gs/resources/jquery.pinify.min.js";
        w.onload = w.onreadystatechange = function() {
            if (this.readyState && (this.readyState == "complete" || this.readyState !== "loaded") && t) {
                setTimeout(function() {
                    h(GS.IE)
                }, 100);
                t = false
            }
        };
        document.body.appendChild(w)
    });
    GS.IE = v;
    c(document).ready(function() {
        var w = c("body,#main,#page_wrapper,#mainContainer");
        w.scrollTop(0);
        document.body.scroll = "no";
        w.scroll(function(E) {
            if (c(this).scrollTop() > 0) {
                console.warn("Fixing Scroll", E.target);
                c(this).scrollTop(0)
            }
            return false
        });
        c.browser.msie && g();
        c.drop({mode: "mouse"});
        GS.isReady = true;
        c.publish("gs.app.ready");
        GS.player.isReady && GS.player.playerSetup();
        w = (new Date).format("m/d");
        GS.isApril1 = w == "04/01" ? true : false;
        GS.router.run()
    })
})(jQuery);
var oldUnload = false;
if (window.onbeforeunload)
    oldUnload = window.onbeforeunload;
window.onbeforeunload = function(c) {
    GS.player.storeQueue();
    GS.getGuts().forceSend();
    var a;
    c = c || window.event;
    if (!GS.user.isLoggedIn && GS.user.isDirty) {
        a = $.localize.getString("ONCLOSE_PROMPT_LOGIN");
        GS.getLightbox().open("login", {extraMessage: "ONCLOSE_PROMPT_LOGIN"})
    }
    if (GS.player.isPlaying)
        a = $.localize.getString("ONCLOSE_PLAYING");
    if (!GS.Controllers.PageController.ALLOW_LOAD)
        a = GS.Controllers.PageController.confirmMessage;
    if (oldUnload) {
        var b = oldUnload;
        oldUnload = false;
        b()
    }
    if (a) {
        if (c)
            c.returnValue = a;
        return a
    }
};
